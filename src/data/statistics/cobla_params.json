{
    "DnnUtili.py": {
        "sklearn": {},
        "tensorflow": {
            "NewCheckpointReader_106": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_244": {
                "variable": {
                    "value": "gxy",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "variable_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_list",
                            "Method Argument"
                        ],
                        [
                            "variable_list",
                            "Method Argument"
                        ],
                        [
                            "variable_list",
                            "Method Argument"
                        ],
                        [
                            "variable_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_247": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "gxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(f, variable_list)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_272": {
                "variable": {
                    "value": "jacob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "jacob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "jacob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(columns, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(jacob, [-1, num_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_310": {
                "variable": {
                    "value": "hp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hp)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_356": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "IsDirectory_100": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_155": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "latest_checkpoint(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_session_201": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "col",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "myGradients(f[i], variable_list)",
                            "Call"
                        ],
                        [
                            "tf.reshape(col, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_305": {
                "variable": {
                    "value": "column",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "gp[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "variable_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_list",
                            "Method Argument"
                        ],
                        [
                            "variable_list",
                            "Method Argument"
                        ],
                        [
                            "variable_list",
                            "Method Argument"
                        ],
                        [
                            "variable_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_306": {
                "variable": {
                    "value": "column",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "column",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(gp[i], variable_list)",
                            "Call"
                        ],
                        [
                            "tf.concat(column, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_365": {
                "ys": {
                    "value": "elemwise_products",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[math_ops.multiply(grad_elem, array_ops.stop_gradient(v_elem)) for (grad_elem, v_elem) in zip(grads, v) if grad_elem is not None]",
                            "ListComp"
                        ],
                        [
                            "[math_ops.multiply(grad_elem, array_ops.stop_gradient(v_elem)) for (grad_elem, v_elem) in zip(grads, v) if grad_elem is not None]",
                            "ListComp"
                        ]
                    ]
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_209": {
                "variable": {
                    "value": "var_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.get_tensor(var)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_360": {
                "x": {
                    "value": "grad_elem",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "array_ops.stop_gradient(v_elem)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_416": {
                "x": {
                    "value": "grad_elem",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "array_ops.stop_gradient(v_elem)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_360": {
                "input": {
                    "value": "v_elem",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_416": {
                "input": {
                    "value": "v_elem",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "TFInclude.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "my_slim_layers.py": {
        "sklearn": {},
        "tensorflow": {
            "concat_1067": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(outer_dimensions, [math_ops.reduce_prod(inner_dimensions)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assert_rank_at_least_1075": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "new_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_rank",
                            "Method Argument"
                        ],
                        [
                            "new_rank",
                            "Method Argument"
                        ],
                        [
                            "new_rank",
                            "Method Argument"
                        ]
                    ]
                },
                "message": {
                    "value": "inputs has rank less than new_rank",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_446": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_651": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('weights_v', dtype=dtype, initializer=v_init_value, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "v_init_value",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(v, h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "weights_value_v",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(weights_value_v, weights_value_h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "tf.multiply(v, S_effective)",
                            "Call"
                        ],
                        [
                            "tf.multiply(S_effective, v)",
                            "Call"
                        ],
                        [
                            "self.get_initial_values()",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "arguments['rate']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DecompositionScheme.get_stride(stride, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "DecompositionScheme.get_stride(stride, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "(1, mystride)",
                            "Tuple"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_stride(stride, self.scheme)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arguments['padding']",
                            "Subscript"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_658": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=weights, dilation_rate=rate, strides=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('weights_h', dtype=dtype, initializer=h_init_value, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "h_init_value",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(v, h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "weights_value_h",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(weights_value_v, weights_value_h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "self.get_initial_values()",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "arguments['rate']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DecompositionScheme.get_stride(stride, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "DecompositionScheme.get_stride(stride, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "utils.two_element_tuple(stride)",
                            "Call"
                        ],
                        [
                            "(mystride, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "DecompositionScheme.get_stride(stride, self.scheme)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arguments['padding']",
                            "Subscript"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_727": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_824": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('weights_v', dtype=dtype, initializer=v_init_value, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "v_init_value",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(v, h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "weights_value_v",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(weights_value_v, weights_value_h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "tf.multiply(v, S_effective)",
                            "Call"
                        ],
                        [
                            "tf.multiply(S_effective, v)",
                            "Call"
                        ],
                        [
                            "self.get_initial_values()",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "arguments['rate']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DecompositionScheme.get_stride(stride, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "DecompositionScheme.get_stride(stride, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "(1, mystride)",
                            "Tuple"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_stride(stride, self.scheme)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arguments['padding']",
                            "Subscript"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_830": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=weights, dilation_rate=rate, strides=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('weights_h', dtype=dtype, initializer=h_init_value, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "h_init_value",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(v, h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "weights_value_h",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(weights_value_v, weights_value_h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "self.get_initial_values()",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "arguments['rate']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DecompositionScheme.get_stride(stride, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "DecompositionScheme.get_stride(stride, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "utils.two_element_tuple(stride)",
                            "Call"
                        ],
                        [
                            "(mystride, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "DecompositionScheme.get_stride(stride, self.scheme)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arguments['padding']",
                            "Subscript"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_870": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_956": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "strided_slice_1078": {
                "variable": {
                    "value": "outer_dimensions",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "array_ops.shape(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[new_rank - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1080": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(outer_dimensions, [-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1081": {
                "variable": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat((outer_dimensions, [math_ops.reduce_prod(inner_dimensions)]), 0)",
                            "Call"
                        ],
                        [
                            "array_ops.concat((outer_dimensions, [-1]), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1463": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convolution_1497": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "arguments['rate']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.n_positive_integers(conv_dims, stride)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, stride)",
                            "Call"
                        ],
                        [
                            "utils.n_positive_integers(conv_dims, stride)",
                            "Call"
                        ],
                        [
                            "arguments['stride']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arguments['padding']",
                            "Subscript"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_254": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('weights_v', dtype=dtype, initializer=v_init_value, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "v_init_value",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(v, h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "weights_value_v",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(weights_value_v, weights_value_h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "tf.multiply(v, S_effective)",
                            "Call"
                        ],
                        [
                            "tf.multiply(S_effective, v)",
                            "Call"
                        ],
                        [
                            "self.get_initial_values()",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "S_effective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.ones(shape=[K], dtype=S.dtype), S_masks)",
                            "Call"
                        ],
                        [
                            "np.ones(shape=[K], dtype=np.float32) - S_masks",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(tf.ones(shape=[K], dtype=tf.float32), S_masks)",
                            "Call"
                        ],
                        [
                            "S_effective",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_444": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_537": {
                "variable": {
                    "value": "reduced_S_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "S_masks_reduced",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[reduced_index[1] - reduced_index[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_542": {
                "variable": {
                    "value": "S_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S_top, reduced_S_masks, S_bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "S_masks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_546": {
                "variable": {
                    "value": "S_effective",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(shape=[K], dtype=S.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "S_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S_top, reduced_S_masks, S_bottom], axis=0, name='S_masks')",
                            "Call"
                        ],
                        [
                            "np.concatenate((S_top, layer_mask_variable, S_bottom), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([S_top, tf.constant(default_value, dtype=tf.float32), S_bottom], axis=0, name='S_masks')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_725": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_802": {
                "variable": {
                    "value": "S_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S_top, tf.constant(default_value, dtype=tf.float32), S_bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "S_masks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_806": {
                "variable": {
                    "value": "S_effective",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(shape=[K], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "S_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([S_top, reduced_S_masks, S_bottom], axis=0, name='S_masks')",
                            "Call"
                        ],
                        [
                            "np.concatenate((S_top, layer_mask_variable, S_bottom), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([S_top, tf.constant(default_value, dtype=tf.float32), S_bottom], axis=0, name='S_masks')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_951": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "SeparableConv2d",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "layer_variable_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_variable_getter({'bias': 'biases', 'depthwise_kernel': 'depthwise_weights', 'pointwise_kernel': 'pointwise_weights'})",
                            "Call"
                        ],
                        [
                            "layer_variable_getter",
                            "Call"
                        ]
                    ]
                }
            },
            "depthwise_conv2d_1022": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "depthwise_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('depthwise_weights', shape=depthwise_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, trainable=trainable, collections=weights_collections)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, stride_h, stride_w] if data_format.startswith('NC') else [1, stride_h, stride_w, 1]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arguments['padding']",
                            "Subscript"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "utils.two_element_tuple(rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_1077": {
                "control_inputs": {
                    "value": "[rank_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_1122": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1126": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1461": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_257": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "S_effective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.ones(shape=[K], dtype=S.dtype), S_masks)",
                            "Call"
                        ],
                        [
                            "np.ones(shape=[K], dtype=np.float32) - S_masks",
                            "BinOp"
                        ],
                        [
                            "tf.subtract(tf.ones(shape=[K], dtype=tf.float32), S_masks)",
                            "Call"
                        ],
                        [
                            "S_effective",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('weights_v', dtype=dtype, initializer=v_init_value, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "v_init_value",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(v, h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "weights_value_v",
                            "variable"
                        ],
                        [
                            "DecompositionScheme.get_filter_weight(weights_value_v, weights_value_h, S_effective, FLAGS.decomposition_scheme)",
                            "Call"
                        ],
                        [
                            "tf.multiply(v, S_effective)",
                            "Call"
                        ],
                        [
                            "tf.multiply(S_effective, v)",
                            "Call"
                        ],
                        [
                            "self.get_initial_values()",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_686": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=weights, dilation_rate=rate, strides=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('biases', dtype=dtype, initializer=biases_value, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "biases_value",
                            "variable"
                        ],
                        [
                            "biases_value",
                            "variable"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, trainable=trainable, collections=biases_collections)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_842": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=weights, dilation_rate=rate, strides=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('biases', dtype=dtype, initializer=biases_value, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "biases_value",
                            "variable"
                        ],
                        [
                            "biases_value",
                            "variable"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, trainable=trainable, collections=biases_collections)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_1079": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_1517": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=weights, dilation_rate=rate, strides=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('biases', dtype=dtype, initializer=biases_value, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "biases_value",
                            "variable"
                        ],
                        [
                            "biases_value",
                            "variable"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, trainable=trainable, collections=biases_collections)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_546": {
                "shape": {
                    "value": "[K]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_806": {
                "shape": {
                    "value": "[K]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_1048": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=v, dilation_rate=rate, strides=stride_v, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=outputs, filter=h, dilation_rate=rate, strides=stride_h, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=weights, dilation_rate=rate, strides=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('biases', dtype=dtype, initializer=biases_value, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "biases_value",
                            "variable"
                        ],
                        [
                            "biases_value",
                            "variable"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, trainable=trainable, collections=biases_collections)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_prod_1068": {
                "input_tensor": {
                    "value": "inner_dimensions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dense_shape[new_rank - 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_collection_1184": {
                "key": {
                    "value": "collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections",
                            "variable"
                        ]
                    ]
                }
            },
            "add_to_collection_1185": {
                "name": {
                    "value": "collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables_list",
                            "variable"
                        ]
                    ]
                }
            },
            "constant_802": {
                "value": {
                    "value": "default_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name_value_dict[sc.name + '/S_masks_reduced']",
                            "Subscript"
                        ],
                        [
                            "name_value_dict[sc.name + '/S_masks_reduced']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "compute_hessian_hv.py": {
        "tensorflow": {
            "get_or_create_global_step_146": {
                "variable": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_188": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "15 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_202": {
                "variable": {
                    "value": "images_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "num_gpus",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=15 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_203": {
                "variable": {
                    "value": "labels_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "num_gpus",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=15 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_361": {
                "variable": {
                    "value": "gradient_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tower_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_362": {
                "variable": {
                    "value": "hessian_vector_op_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tower_hvs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_363": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tower_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_364": {
                "variable": {
                    "value": "top_1_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tower_top_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_365": {
                "variable": {
                    "value": "top_5_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tower_top_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_432": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_averages.variables_to_restore(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "slim.get_variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_145": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "variable": {
                    "value": "top_1_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.in_top_k(logits, labels, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_229": {
                "variable": {
                    "value": "top_5_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.in_top_k(logits, labels, 5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_416": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "IsDirectory_426": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_427": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_430": {
                "msg": {
                    "value": "'Evaluating %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_218": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, dataset.num_classes - FLAGS.labels_offset)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_222": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=15 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_224": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=15 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_228": {
                "x": {
                    "value": "tf.nn.in_top_k(logits, labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_229": {
                "x": {
                    "value": "tf.nn.in_top_k(logits, labels, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_245": {
                "device_name": {
                    "value": "'/gpu:%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "in_top_k_228": {
                "targets": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=15 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "in_top_k_229": {
                "targets": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=15 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_330": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_333": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_330": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_296": {
                "initial_value": {
                    "value": "orth_v[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'v_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mask_wrapper.py": {
        "tensorflow": {}
    },
    "masking_eval.py": {
        "tensorflow": {}
    },
    "slim_utili/datasets/build_imagenet_data.py": {
        "tensorflow": {
            "DEFINE_string_99": {
                "name": {
                    "value": "train_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_101": {
                "name": {
                    "value": "validation_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_103": {
                "name": {
                    "value": "output_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_106": {
                "name": {
                    "value": "train_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in training TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_108": {
                "name": {
                    "value": "validation_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in validation TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_111": {
                "name": {
                    "value": "num_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to preprocess the images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_122": {
                "name": {
                    "value": "labels_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_lsvrc_2015_synsets.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Labels file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_135": {
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_metadata.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "ImageNet metadata file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_151": {
                "name": {
                    "value": "bounding_box_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./imagenet_2012_bounding_boxes.csv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Bounding box file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Example_209": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FastGFile_316": {
                "variable": {
                    "value": "image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames[i]",
                            "Subscript"
                        ],
                        [
                            "parts[0]",
                            "Subscript"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Coordinator_444": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_623": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imagenet_metadata_file",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_657": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bounding_box_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounding_box_file",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Feature_162": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_169": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_174": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_233": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_236": {
                "variable": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_237": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_238": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_242": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_243": {
                "variable": {
                    "value": "self._cmyk_to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_246": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_247": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordWriter_377": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_directory, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_512": {
                "variable": {
                    "value": "matching_files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "jpeg_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/%s/*.JPEG' % (data_dir, synset)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "run_703": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Int64List_162": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FloatList_169": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BytesList_174": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_209": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FastGFile_500": {
                "name": {
                    "value": "labels_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_file",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/datasets/cifar10.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/datasets/dataset_utils.py": {
        "tensorflow": {
            "Feature_41": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_53": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_65": {
                "float_list": {
                    "value": "tf.train.FloatList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_69": {
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_125": {
                "filename": {
                    "value": "os.path.join(dataset_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_41": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BytesList_53": {
                "value": {
                    "value": "[values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_65": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Features_69": {
                "feature": {
                    "value": "{'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/datasets/download_and_convert_cifar10.py": {
        "tensorflow": {
            "placeholder_88": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_png_89": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "Remove_153": {
                "filename": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "urllib.request.urlretrieve(_DATA_URL, filepath, _progress)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_156": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'cifar-10-batches-py')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_165": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MakeDirs_166": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_171": {
                "filename": {
                    "value": "testing_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_178": {
                "path": {
                    "value": "training_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_187": {
                "path": {
                    "value": "testing_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_91": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/datasets/download_and_convert_flowers.py": {
        "tensorflow": {
            "placeholder_57": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_58": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Remove_161": {
                "filename": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_164": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'flower_photos')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_183": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MakeDirs_184": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_124": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_172": {
                "filename": {
                    "value": "output_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_130": {
                "path": {
                    "value": "output_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "FastGFile_139": {
                "variable": {
                    "value": "image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filenames[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/datasets/download_and_convert_mnist.py": {
        "tensorflow": {
            "placeholder_117": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(_IMAGE_SIZE, _IMAGE_SIZE, _NUM_CHANNELS)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "encode_png_118": {
                "variable": {
                    "value": "encoded_png",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Remove_183": {
                "filename": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "urllib.request.urlretrieve(_DATA_URL + filename, filepath, _progress)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_192": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MakeDirs_193": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ],
                        [
                            "dataset_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_198": {
                "filename": {
                    "value": "testing_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_205": {
                "path": {
                    "value": "training_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_211": {
                "path": {
                    "value": "testing_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_120": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_167": {
                "name": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "urllib.request.urlretrieve(_DATA_URL + filename, filepath, _progress)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "slim_utili/datasets/flowers.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/datasets/imagenet.py": {
        "tensorflow": {
            "FixedLenFeature_147": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_149": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpeg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_151": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_153": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VarLenFeature_155": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_157": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_159": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_161": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_163": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/datasets/mnist.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "raw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([1], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/deployment/model_deploy.py": {
        "tensorflow": {
            "add_n_306": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_357": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_220": {
                "variable": {
                    "value": "clone_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_294": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_218": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_222": {
                "variable": {
                    "value": "clone_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clone_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, clone.scope)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "clone_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_228": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "regularization_losses",
                            "Method Argument"
                        ],
                        [
                            "regularization_losses",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "regularization_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_232": {
                "variable": {
                    "value": "sum_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_235": {
                "name": {
                    "value": "clone.scope + '/clone_loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "clone_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_optimize_clone(optimizer, clone, num_clones, regularization_losses, **kwargs)",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_237": {
                "name": {
                    "value": "regularization_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.add_n(regularization_losses, name='regularization_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_349": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_361": {
                "device_name": {
                    "value": "config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_385": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_409": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_224": {
                "variable": {
                    "value": "clone_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clone_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_optimize_clone(optimizer, clone, num_clones, regularization_losses, **kwargs)",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 * num_clones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scaled_clone_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_262": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_297": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_380": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_n_396": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_400": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_442": {
                "variable": {
                    "value": "sum_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "var.op.name + '/sum_grads'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_472": {
                "msg": {
                    "value": "Var %s has no gradient",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "config.clone_scope(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_364": {
                "device_name": {
                    "value": "config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_382": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "optimize_clones(clones, optimizer)",
                            "Call"
                        ],
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_405": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "optimize_clones(clones, optimizer)",
                            "Call"
                        ],
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_467": {
                "name": {
                    "value": "var.op.name + ':gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.values",
                            "Attribute"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            },
            "histogram_469": {
                "name": {
                    "value": "var.op.name + ':gradient_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.global_norm([grad_values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_192": {
                "device_name": {
                    "value": "clone_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.clone_device(i)",
                            "Call"
                        ],
                        [
                            "clone_device",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_381": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_388": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_470": {
                "t_list": {
                    "value": "[grad_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "get_variable_scope_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/deployment/model_deploy_test.py": {
        "tensorflow": {
            "Graph_184": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_210": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_236": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_264": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_289": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_331": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_357": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_383": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_410": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_438": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_480": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_565": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_op_77": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_135": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_op_136": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LogisticClassifier",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BatchNormClassifier",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_187": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_206": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_213": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_214": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_232": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_240": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_267": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_268": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_292": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_293": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_334": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_335": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_344": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_347": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_360": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_361": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_370": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_373": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_386": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_387": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_397": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_413": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_414": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_425": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_428": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_441": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_442": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_452": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_455": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_483": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_484": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_491": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_497": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_74": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_133": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_186": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_212": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_238": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_258": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_266": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_291": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_333": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_359": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_385": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_412": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_440": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_482": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Graph_527": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_532": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_546": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_551": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_538": {
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/download_and_convert_data.py": {
        "tensorflow": {
            "DEFINE_string_45": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to convert, one of \"cifar10\", \"flowers\", \"mnist\".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the output TFRecords and temporary files are saved.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/eval_functions.py": {
        "tensorflow": {
            "DEFINE_string_46": {
                "name": {
                    "value": "solution_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/solution.pickle",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the path to the solution of optimal masking variable values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "hessian_pickle_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/hesssian.pickle",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the path to the hessian and gradient pickle file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_48": {
                "name": {
                    "value": "computation_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "percentage of maximum computation cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_49": {
                "name": {
                    "value": "memory_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "percentage of maximum memory cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "timelimit",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The timelimit after which a gurobi call is terminated.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_52": {
                "name": {
                    "value": "K_heuristic",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "heuristics to use in get_mask_variable_value_using_heuristics() in MaskVariableManager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "decomposition_scheme",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "microsoft",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the decomposition scheme to use in my_slim_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_89": {
                "name": {
                    "value": "max_num_batches",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of batches to evaluate by default use all.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_93": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_96": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tensorflow_train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the model was written to or an absolute path to a checkpoint file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_101": {
                "name": {
                    "value": "eval_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tensorflow_eval/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where the results are saved to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_104": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_108": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_111": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_114": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_117": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_123": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to evaluate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_126": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_130": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_135": {
                "name": {
                    "value": "eval_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Eval image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_242": {
                "level": {
                    "value": "tf.logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_284": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_306": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_307": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_310": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_296": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_329": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "names_to_values.items()",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_330": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "IsDirectory_344": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_345": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_349": {
                "msg": {
                    "value": "'Evaluating %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_331": {
                "name": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_316": {
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[labels.get_shape().as_list()[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/eval_functions_multi.py": {
        "tensorflow": {
            "DEFINE_string_49": {
                "name": {
                    "value": "solution_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/solution.pickle",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the path to the solution of optimal masking variable values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "hessian_pickle_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/hesssian.pickle",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the path to the hessian and gradient pickle file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_51": {
                "name": {
                    "value": "computation_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "percentage of maximum computation cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_52": {
                "name": {
                    "value": "memory_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "percentage of maximum memory cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "timelimit",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The timelimit after which a gurobi call is terminated.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "K_heuristic",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "heuristics to use in get_mask_variable_value_using_heuristics() in MaskVariableManager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_66": {
                "name": {
                    "value": "train_feed_dict_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "the path to the feed_dict for the values of the mask variables, the pickle file is dumped from a previous evaluation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "decomposition_scheme",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "tai",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the decomposition scheme to use in my_slim_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_90": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_93": {
                "name": {
                    "value": "max_num_batches",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of batches to evaluate by default use all.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_97": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_100": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tensorflow_train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the model was written to or an absolute path to a checkpoint file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_105": {
                "name": {
                    "value": "eval_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tensorflow_eval/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where the results are saved to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_108": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_112": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_115": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_118": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_121": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_127": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to evaluate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_130": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_134": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_139": {
                "name": {
                    "value": "eval_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Eval image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_282": {
                "level": {
                    "value": "tf.logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_285": {
                "variable": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_325": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_346": {
                "variable": {
                    "value": "images_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "num_gpus",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_347": {
                "variable": {
                    "value": "labels_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "num_gpus",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels_splits[idx])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_581": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_584": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_588": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_averages.variables_to_restore(slim.get_model_variables())",
                            "Call"
                        ],
                        [
                            "slim.get_variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_283": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_513": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tower_loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_514": {
                "variable": {
                    "value": "top_1_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tower_top_1_op_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_515": {
                "variable": {
                    "value": "top_5_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tower_top_5_op_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_518": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "IsDirectory_528": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_529": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_532": {
                "msg": {
                    "value": "'Evaluating %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_386": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_splits[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_388": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tower_logit(images_splits[idx], labels_splits[idx], reuse_variables=True if idx > 0 else None)",
                            "Call"
                        ],
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels_splits[idx])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_391": {
                "variable": {
                    "value": "top_1_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.in_top_k(logits, labels, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_392": {
                "variable": {
                    "value": "top_5_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.in_top_k(logits, labels, 5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_376": {
                "device_name": {
                    "value": "device_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "str"
                        ],
                        [
                            "'/gpu:%d' % idx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConfigProto_581": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_391": {
                "x": {
                    "value": "tf.nn.in_top_k(logits, labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_392": {
                "x": {
                    "value": "tf.nn.in_top_k(logits, labels, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "in_top_k_391": {
                "targets": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tower_logit(images_splits[idx], labels_splits[idx], reuse_variables=True if idx > 0 else None)",
                            "Call"
                        ],
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels_splits[idx])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "in_top_k_392": {
                "targets": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tower_logit(images_splits[idx], labels_splits[idx], reuse_variables=True if idx > 0 else None)",
                            "Call"
                        ],
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels_splits[idx])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/eval_image_classifier.py": {
        "tensorflow": {
            "DEFINE_integer_30": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "max_num_batches",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of batches to evaluate by default use all.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the model was written to or an absolute path to a checkpoint file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "eval_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where the results are saved to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_52": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to evaluate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_74": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "eval_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Eval image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_89": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_130": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_150": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_142": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_163": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "names_to_values.items()",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_164": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "IsDirectory_174": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_175": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_179": {
                "msg": {
                    "value": "'Evaluating %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_165": {
                "name": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "slim_utili/my_slim_learning.py": {
        "tensorflow": {
            "Supervisor_730": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph or ops.get_default_graph()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "is_chief": {
                    "value": "is_chief",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logdir",
                            "Method Argument"
                        ]
                    ]
                },
                "init_op": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_variables.global_variables_initializer()",
                            "Call"
                        ],
                        [
                            "_USE_DEFAULT",
                            "Method Argument"
                        ]
                    ]
                },
                "init_feed_dict": {
                    "value": "init_feed_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "local_init_op": {
                    "value": "local_init_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "control_flow_ops.group(tf_variables.local_variables_initializer(), lookup_ops.tables_initializer())",
                            "Call"
                        ],
                        [
                            "control_flow_ops.group(*[opt.chief_init_op for opt in sync_optimizer])",
                            "Call"
                        ],
                        [
                            "control_flow_ops.group(*[opt.local_step_init_op for opt in sync_optimizer])",
                            "Call"
                        ],
                        [
                            "_USE_DEFAULT",
                            "Method Argument"
                        ]
                    ]
                },
                "ready_for_local_init_op": {
                    "value": "ready_for_local_init_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "control_flow_ops.group(*[opt.ready_for_local_init_op for opt in sync_optimizer])",
                            "Call"
                        ]
                    ]
                },
                "ready_op": {
                    "value": "ready_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_variables.report_uninitialized_variables()",
                            "Call"
                        ],
                        [
                            "_USE_DEFAULT",
                            "Method Argument"
                        ]
                    ]
                },
                "summary_op": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "summary.merge_all()",
                            "Call"
                        ],
                        [
                            "_USE_DEFAULT",
                            "Method Argument"
                        ]
                    ]
                },
                "summary_writer": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "supervisor.Supervisor.USE_DEFAULT",
                            "Attribute"
                        ],
                        [
                            "_USE_DEFAULT",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "_USE_GLOBAL_STEP",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver or tf_saver.Saver()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "save_summaries_secs": {
                    "value": "save_summaries_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "600",
                            "Method Argument"
                        ]
                    ]
                },
                "save_model_secs": {
                    "value": "save_interval_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "600",
                            "Method Argument"
                        ]
                    ]
                },
                "init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RunOptions_495": {
                "variable": {
                    "value": "trace_run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "config_pb2.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_497": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_510": {
                "msg": {
                    "value": "Writing trace to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "trace_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(train_step_kwargs['logdir'], 'tf_trace-%d.json' % np_global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_663": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_666": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_702": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_298": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "IndexedSlices_299": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_ops.clip_by_norm(grad.values, max_norm)",
                            "Call"
                        ],
                        [
                            "grad.values * multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "grad.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_301": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients_to_variables",
                            "variable"
                        ],
                        [
                            "ops.IndexedSlices(tmp, grad.indices, grad.dense_shape)",
                            "Call"
                        ],
                        [
                            "clip_ops.clip_by_norm(grad, max_norm)",
                            "Call"
                        ],
                        [
                            "grads_and_vars",
                            "variable"
                        ],
                        [
                            "ops.IndexedSlices(tmp, grad.indices, grad.dense_shape)",
                            "Call"
                        ],
                        [
                            "grad * multiplier",
                            "BinOp"
                        ],
                        [
                            "grads_and_vars",
                            "variable"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_337": {
                "variable": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_multipliers[key]",
                            "Subscript"
                        ],
                        [
                            "constant_op.constant(multiplier, dtype=grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IndexedSlices_341": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_ops.clip_by_norm(grad.values, max_norm)",
                            "Call"
                        ],
                        [
                            "grad.values * multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "grad.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_370": {
                "msg": {
                    "value": "Var %s has no gradient",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_step_455": {
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "_USE_GLOBAL_STEP",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_519": {
                "msg": {
                    "value": "global step %d: loss = %.4f (%.3f sec/step)",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "np_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([train_op, global_step], options=trace_run_options, feed_dict=train_feed_dict, run_metadata=run_metadata)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([train_op, global_step], options=trace_run_options, feed_dict=train_feed_dict, run_metadata=run_metadata)",
                            "Call"
                        ],
                        [
                            "train_step_fn(sess, train_op, global_step, train_step_kwargs)",
                            "Call"
                        ],
                        [
                            "total_loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_667": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_675": {
                "name": {
                    "value": "init_ops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_677": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "report_uninitialized_variables_680": {
                "variable": {
                    "value": "ready_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_683": {
                "variable": {
                    "value": "local_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf_variables.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "lookup_ops.tables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_696": {
                "variable": {
                    "value": "ready_for_local_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[opt.ready_for_local_init_op for opt in sync_optimizer]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "histogram_365": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.values",
                            "Attribute"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            },
            "scalar_367": {
                "name": {
                    "value": "var.op.name + '/gradient_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "clip_ops.global_norm([grad_values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_423": {
                "name": {
                    "value": "multiply_grads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_428": {
                "name": {
                    "value": "clip_grads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_714": {
                "name": {
                    "value": "train_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "greater_equal_718": {
                "variable": {
                    "value": "should_stop_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "_USE_GLOBAL_STEP",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "number_of_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_720": {
                "variable": {
                    "value": "should_stop_op",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_723": {
                "variable": {
                    "value": "train_step_kwargs[should_log]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.mod(global_step, log_every_n_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_726": {
                "variable": {
                    "value": "train_step_kwargs[should_trace]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.mod(global_step, trace_every_n_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_761": {
                "msg": {
                    "value": "Starting Session.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_770": {
                "msg": {
                    "value": "Starting Queues.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_794": {
                "msg": {
                    "value": "Retrying training!",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_norm_368": {
                "t_list": {
                    "value": "[grad_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "local_variables_initializer_684": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_685": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_688": {
                "control_inputs": {
                    "value": "[local_init_op] if local_init_op is not None else []",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "group_691": {
                "variable": {
                    "value": "local_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[opt.chief_init_op for opt in sync_optimizer]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_694": {
                "variable": {
                    "value": "local_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[opt.local_step_init_op for opt in sync_optimizer]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_787": {
                "msg": {
                    "value": "Finished training! Saving model to disk.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mod_724": {
                "x1": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "_USE_GLOBAL_STEP",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "log_every_n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mod_727": {
                "x1": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "_USE_GLOBAL_STEP",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "trace_every_n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_785": {
                "msg": {
                    "value": "Caught OutOfRangeError. Stopping Training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_779": {
                "msg": {
                    "value": "Stopping Training.",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/alexnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_42": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "myconv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv1_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [5, 5], scope='conv2', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv2_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 384, [3, 3], scope='conv3', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv3_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 384, [3, 3], scope='conv4', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv4_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 256, [3, 3], scope='conv5', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv5_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_53": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_130": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/alexnet_bn_bak.py": {
        "tensorflow": {
            "truncated_normal_initializer_42": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv1_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 5], scope='conv2', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv2_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv3', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv3_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv4', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv4_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 3], scope='conv5', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv5_bn', activation_fn=tf.nn.relu, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_48": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_120": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/alexnet_hybrid_1_rank.py": {
        "tensorflow": {
            "truncated_normal_initializer_47": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_186": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2_out, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv5_out, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "RandomMux(fc6_out_1, fc6_out_2, mux_prob, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_53": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_160": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/alexnet_hybrid_rank.py": {
        "tensorflow": {
            "truncated_normal_initializer_47": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_187": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv5_out, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "RandomMux(fc6_out_1, fc6_out_2, tf.pow(mux_prob, 5))",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_53": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_123": {
                "x": {
                    "value": "mux_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_133": {
                "x": {
                    "value": "mux_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_143": {
                "x": {
                    "value": "mux_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_153": {
                "x": {
                    "value": "mux_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_170": {
                "x": {
                    "value": "mux_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_161": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/alexnet_rank.py": {
        "tensorflow": {
            "truncated_normal_initializer_47": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_186": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2_out, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv5_out, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "RandomMux(fc6_out_1, fc6_out_2, mux_prob, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_53": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_160": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/alexnet_svd_rank.py": {
        "tensorflow": {
            "truncated_normal_initializer_42": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 5], scope='conv2_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 1], scope='conv2_h')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 3], scope='conv3_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 1], scope='conv3_h')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 3], scope='conv4_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 1], scope='conv4_h')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 3], scope='conv5_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 1], scope='conv5_h')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 5], scope='fc6_v', padding='VALID', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 1], scope='fc6_h', padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_48": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_130": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/alexnet_test.py": {
        "tensorflow": {
            "main_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_108": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alexnet.alexnet_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(train_inputs)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alexnet.alexnet_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(train_inputs)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alexnet.alexnet_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(train_inputs)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet_v2(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/cifarnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_28": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "myconv2d1(images, 192, [5, 5], scope='conv1')",
                            "Call"
                        ],
                        [
                            "myconv2d1(net, 160, [1, 1], scope='cccp1')",
                            "Call"
                        ],
                        [
                            "myconv2d1(net, 96, [1, 1], scope='cccp2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout1')",
                            "Call"
                        ],
                        [
                            "myconv2d1(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [1, 1], scope='cccp3')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [1, 1], scope='cccp4')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout2')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [1, 1], scope='cccp5')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, num_classes, [1, 1], scope='cccp6')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [7, 7], 1, scope='pool3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(net, [batch_size, num_classes])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_size, num_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CifarNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "CifarNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "myconv2d1(images, 192, [5, 5], scope='conv1')",
                            "Call"
                        ],
                        [
                            "myconv2d1(net, 160, [1, 1], scope='cccp1')",
                            "Call"
                        ],
                        [
                            "myconv2d1(net, 96, [1, 1], scope='cccp2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout1')",
                            "Call"
                        ],
                        [
                            "myconv2d1(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [1, 1], scope='cccp3')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [1, 1], scope='cccp4')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout2')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [1, 1], scope='cccp5')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, num_classes, [1, 1], scope='cccp6')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [7, 7], 1, scope='pool3')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "slim_utili/nets/cifarnet_bak.py": {
        "tensorflow": {
            "truncated_normal_initializer_27": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "myconv2d(images, 192, [5, 5], scope='conv1')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 160, [1, 1], scope='cccp1')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 96, [1, 1], scope='cccp2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout1')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [1, 1], scope='cccp3')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [1, 1], scope='cccp4')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout2')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, 192, [1, 1], scope='cccp5')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, num_classes, [1, 1], scope='cccp6')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [7, 7], 1, scope='pool3')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CifarNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "CifarNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_108": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/cifarnet_rank.py": {
        "tensorflow": {
            "truncated_normal_initializer_25": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_114": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(images, 192, [5, 5], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 1], scope='cccp1_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 160, [1, 1], scope='cccp1_h')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 1], scope='cccp2_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 96, [1, 1], scope='cccp2_h')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 5], scope='conv2_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 1], scope='conv2_h')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 1], scope='cccp3_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [1, 1], scope='cccp3_h')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 1], scope='cccp4_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [1, 1], scope='cccp4_h')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, K, [1, 3], scope='conv3_v', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [3, 1], scope='conv3_h')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [1, 1], scope='cccp5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], scope='cccp6')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [7, 7], 1, scope='pool3')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CifarNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "CifarNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_139": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_resnet_v2.py": {
        "tensorflow": {
            "concat_45": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block35",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block17",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block8",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_217": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_254": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_325": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Mixed_6a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_resnet_v2_test.py": {
        "tensorflow": {
            "main_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_221": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_240": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_resnet_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_resnet_v2(inputs, num_classes, create_aux_logits=False)",
                            "Call"
                        ],
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ],
                        [
                            "inception.inception_resnet_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_resnet_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_resnet_v2(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_resnet_v2(eval_inputs, num_classes, is_training=False, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_258": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_resnet_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_resnet_v2(inputs, num_classes, create_aux_logits=False)",
                            "Call"
                        ],
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ],
                        [
                            "inception.inception_resnet_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_resnet_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_resnet_v2(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_resnet_v2(eval_inputs, num_classes, is_training=False, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_197": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_199": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_193": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_195": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_utils.py": {
        "tensorflow": {}
    },
    "slim_utili/nets/inception_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_295": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_155": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_209": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_232": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_300": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_307": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_v1_test.py": {
        "tensorflow": {
            "placeholder_152": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_172": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v1(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(eval_inputs, num_classes, reuse=True)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(images, num_classes=num_classes, spatial_squeeze=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_189": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v1(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(eval_inputs, num_classes, reuse=True)",
                            "Call"
                        ],
                        [
                            "inception.inception_v1(images, num_classes=num_classes, spatial_squeeze=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_v2.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_502": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_177": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_234": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_295": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_326": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_357": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_383": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_414": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_445": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_389": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_420": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_509": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_518": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_333": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_392": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_399": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_423": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_430": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_439": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_v2_test.py": {
        "tensorflow": {
            "placeholder_266": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_286": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(eval_inputs, num_classes, reuse=True)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(images, num_classes=num_classes, spatial_squeeze=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_303": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(eval_inputs, num_classes, reuse=True)",
                            "Call"
                        ],
                        [
                            "inception.inception_v2(images, num_classes=num_classes, spatial_squeeze=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_209": {
                "variable": {
                    "value": "transposed_original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_250": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_v3.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV3'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_477": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV3'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_161": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_227": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_256": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_285": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_313": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_364": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_388": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_413": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "concat_374": {
                "variable": {
                    "value": "branch_1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0b_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_381": {
                "variable": {
                    "value": "branch_2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "concat_399": {
                "variable": {
                    "value": "branch_1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_406": {
                "variable": {
                    "value": "branch_2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_513": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_524": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_322": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_349": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_490": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_509": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['Mixed_6e']",
                            "Subscript"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID', scope='AvgPool_1a_5x5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(128), [1, 1], scope='Conv2d_1b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(768), kernel_size, weights_initializer=trunc_normal(0.01), padding='VALID', scope='Conv2d_2a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=trunc_normal(0.001), scope='Conv2d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(aux_logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_v3_test.py": {
        "tensorflow": {
            "placeholder_233": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_253": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v3(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ],
                        [
                            "inception.inception_v3(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(eval_inputs, num_classes, is_training=False, reuse=True)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(images, num_classes=num_classes, spatial_squeeze=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_271": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v3(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ],
                        [
                            "inception.inception_v3(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(eval_inputs, num_classes, is_training=False, reuse=True)",
                            "Call"
                        ],
                        [
                            "inception.inception_v3(images, num_classes=num_classes, spatial_squeeze=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_v4.py": {
        "tensorflow": {
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionA",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_52": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionA",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_72": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionB",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionB",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_118": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionC",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_131": {
                "variable": {
                    "value": "branch_1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, 256, [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, 256, [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "branch_2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, 256, [1, 3], scope='Conv2d_0d_1x3'), slim.conv2d(branch_2, 256, [3, 1], scope='Conv2d_0e_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_144": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_221": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Mixed_3a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Mixed_4a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "Mixed_5a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_318": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_306": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/inception_v4_test.py": {
        "tensorflow": {
            "main_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_149": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_151": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_191": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v4(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(inputs, num_classes, create_aux_logits=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(eval_inputs, num_classes, is_training=False, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_209": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception.inception_v4(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(inputs, num_classes, create_aux_logits=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ],
                        [
                            "inception.inception_v4(eval_inputs, num_classes, is_training=False, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_145": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_147": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/lenet.py": {
        "tensorflow": {
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LeNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LeNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_91": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/mobilenet_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_440": {
                "variable": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_347": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'MobilenetV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_374": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "myconv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/mobilenet_v1.working.py": {
        "tensorflow": {
            "truncated_normal_initializer_436": {
                "variable": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'MobilenetV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'MobilenetV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_354": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_370": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "myconv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/mobilenet_v1_test.py": {
        "tensorflow": {}
    },
    "slim_utili/nets/nasnet/nasnet.py": {
        "tensorflow": {
            "identity_222": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, num_stem_filters, [3, 3], stride=2, scope='conv0', padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv0_bn')",
                            "Call"
                        ],
                        [
                            "stem_cell(net, scope='cell_stem_{}'.format(cell_num), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=cell_num)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, num_stem_filters, 3, scope='l1_stem_3x3')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='l1_stem_bn')",
                            "Call"
                        ],
                        [
                            "stem()",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "nasnet_utils.global_avg_pool(net)",
                            "Call"
                        ],
                        [
                            "reduction_cell(net, scope='reduction_cell_{}'.format(reduction_indices.index(cell_num)), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, hparams.dense_dropout_keep_prob, scope='dropout')",
                            "Call"
                        ],
                        [
                            "normal_cell(net, scope='cell_{}'.format(cell_num), filter_scaling=filter_scaling, stride=stride, prev_layer=prev_layer, cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_292": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_337": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_387": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_502": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, num_stem_filters, [3, 3], stride=2, scope='conv0', padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv0_bn')",
                            "Call"
                        ],
                        [
                            "stem_cell(net, scope='cell_stem_{}'.format(cell_num), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=cell_num)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, num_stem_filters, 3, scope='l1_stem_3x3')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='l1_stem_bn')",
                            "Call"
                        ],
                        [
                            "stem()",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "nasnet_utils.global_avg_pool(net)",
                            "Call"
                        ],
                        [
                            "reduction_cell(net, scope='reduction_cell_{}'.format(reduction_indices.index(cell_num)), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, hparams.dense_dropout_keep_prob, scope='dropout')",
                            "Call"
                        ],
                        [
                            "normal_cell(net, scope='cell_{}'.format(cell_num), filter_scaling=filter_scaling, stride=stride, prev_layer=prev_layer, cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_512": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_228": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 128, [1, 1], scope='proj')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 768, shape, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(aux_logits, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_237": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 128, [1, 1], scope='proj')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 768, shape, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(aux_logits, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_238": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 128, [1, 1], scope='proj')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 768, shape, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(aux_logits, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_gpu_available_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_288": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_333": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_383": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_495": {
                "variable": {
                    "value": "aux_net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, num_stem_filters, [3, 3], stride=2, scope='conv0', padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv0_bn')",
                            "Call"
                        ],
                        [
                            "stem_cell(net, scope='cell_stem_{}'.format(cell_num), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=cell_num)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, num_stem_filters, 3, scope='l1_stem_3x3')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='l1_stem_bn')",
                            "Call"
                        ],
                        [
                            "stem()",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "nasnet_utils.global_avg_pool(net)",
                            "Call"
                        ],
                        [
                            "reduction_cell(net, scope='reduction_cell_{}'.format(reduction_indices.index(cell_num)), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, hparams.dense_dropout_keep_prob, scope='dropout')",
                            "Call"
                        ],
                        [
                            "normal_cell(net, scope='cell_{}'.format(cell_num), filter_scaling=filter_scaling, stride=stride, prev_layer=prev_layer, cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_501": {
                "name_or_scope": {
                    "value": "final_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "aux_logits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/nasnet/nasnet_test.py": {
        "tensorflow": {
            "main_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_252": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_254": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_262": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_282": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nasnet.build_nasnet_cifar(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "nasnet.build_nasnet_mobile(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "nasnet.build_nasnet_large(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "nasnet.build_nasnet_mobile(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "nasnet.build_nasnet_mobile(eval_inputs, num_classes, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_155": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_191": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_233": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_246": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_249": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/nasnet/nasnet_utils.py": {
        "tensorflow": {
            "avg_pool_102": {
                "variable": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_118": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(net, pad_arr)[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(net, pad_arr)[:, :, 1:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.avg_pool(path2, [1, 1, 1, 1], stride_spec, 'VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(path2, int(output_filters / 2), 1, scope='path2_conv')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_123": {
                "variable": {
                    "value": "final_path",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[path1, path2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_187": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_136": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_176": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_288": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_292": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "split_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_398": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states_to_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[h for (h, is_used) in zip(net, used_hiddenstates) if not is_used]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_81": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_271": {
                "variable": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "factorized_reduction(prev_layer, curr_num_filters, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(prev_layer, curr_num_filters, 1, scope='prev_1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(prev_layer, scope='prev_bn')",
                            "Call"
                        ],
                        [
                            "self._reduce_prev_layer(prev_layer, net)",
                            "Call"
                        ],
                        [
                            "prev_layer",
                            "Method Argument"
                        ],
                        [
                            "prev_layer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_414": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_419": {
                "variable": {
                    "value": "current_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "current_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_step / drop_path_burn_in_steps",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(1.0, current_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_111": {
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, 1], [0, 1]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_115": {
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, 1], [0, 1]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_132": {
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_137": {
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_275": {
                "variable": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "factorized_reduction(prev_layer, curr_num_filters, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(prev_layer, curr_num_filters, 1, scope='prev_1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(prev_layer, scope='prev_bn')",
                            "Call"
                        ],
                        [
                            "self._reduce_prev_layer(prev_layer, net)",
                            "Call"
                        ],
                        [
                            "prev_layer",
                            "Method Argument"
                        ],
                        [
                            "prev_layer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "cell_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_356": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_410": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_411": {
                "name": {
                    "value": "layer_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "layer_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self._cell_num + 1) / float(num_cells)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_420": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_421": {
                "name": {
                    "value": "current_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "current_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_step / drop_path_burn_in_steps",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(1.0, current_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_424": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_425": {
                "name": {
                    "value": "drop_path_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "drop_path_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._drop_path_keep_prob",
                            "Attribute"
                        ],
                        [
                            "1 - layer_ratio * (1 - drop_path_keep_prob)",
                            "BinOp"
                        ],
                        [
                            "1 - current_ratio * (1 - drop_path_keep_prob)",
                            "BinOp"
                        ],
                        [
                            "drop_path_keep_prob",
                            "Method Argument"
                        ],
                        [
                            "drop_path_keep_prob",
                            "Method Argument"
                        ],
                        [
                            "drop_path_keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "'comb_iter_{}'.format(iteration)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_389": {
                "name_or_scope": {
                    "value": "'reduction_{}'.format(idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_327": {
                "name_or_scope": {
                    "value": "right",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "combine",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/nasnet/nasnet_utils_test.py": {
        "tensorflow": {
            "placeholder_54": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 10, 20, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/nets_factory.py": {
        "tensorflow": {}
    },
    "slim_utili/nets/nets_factory_test.py": {
        "tensorflow": {
            "main_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_57": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "CifarNet/conv1",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/overfeat.py": {
        "tensorflow": {
            "truncated_normal_initializer_37": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'overfeat'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "overfeat",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 512, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_99": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/overfeat_test.py": {
        "tensorflow": {
            "main_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_108": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "overfeat.overfeat(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(train_inputs)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "overfeat.overfeat(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(train_inputs)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "overfeat.overfeat(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(train_inputs)",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "overfeat.overfeat(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/resnet_utils.py": {
        "tensorflow": {
            "pad_119": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/resnet_v1.py": {
        "tensorflow": {
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_122": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, depth_bottleneck, [1, 1], stride=1, scope='conv1')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(residual, depth_bottleneck, 3, stride, rate=rate, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(residual, depth, [1, 1], stride=1, activation_fn=None, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(residual, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu6_123": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_219": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/resnet_v1_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_small'",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_371": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_223": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/resnet_v2.py": {
        "tensorflow": {
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_209": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_214": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/resnet_v2_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_small'",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_371": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_223": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/squeezenet-master/eval_squeezenet.py": {
        "tensorflow": {
            "set_verbosity_12": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_34": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "args.reader_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * args.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squeezenet.inference(images, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_51": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/squeezenet-master/squeezenet.py": {
        "tensorflow": {
            "concat_35": {
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[e1x1, e3x3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "fire",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "expand",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "squeezenet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squeeze(inputs, squeeze_depth)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(images, 96, [7, 7], stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool1')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire2')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire3')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool4')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire5')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire6')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire7')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire8')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool8')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire9')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=is_training, scope='drop9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], stride=1, scope='conv10')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [13, 13], stride=1, scope='avgpool10')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(images, 96, [2, 2], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='maxpool1')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire2')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire3')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='maxpool4')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire5')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire6')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire7')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire8')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='maxpool8')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire9')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [4, 4], scope='avgpool10')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='conv10')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "squeezenet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squeeze(inputs, squeeze_depth)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(images, 96, [7, 7], stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool1')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire2')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire3')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool4')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire5')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire6')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire7')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire8')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool8')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire9')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=is_training, scope='drop9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], stride=1, scope='conv10')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [13, 13], stride=1, scope='avgpool10')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(images, 96, [2, 2], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='maxpool1')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire2')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire3')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='maxpool4')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire5')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire6')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire7')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire8')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='maxpool8')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire9')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [4, 4], scope='avgpool10')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='conv10')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/squeezenet-master/train_squeezenet.py": {
        "tensorflow": {
            "set_verbosity_25": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_76": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_41": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=args.batch_size, num_threads=args.preprocessing_threads, capacity=5 * args.batch_size)",
                            "Call"
                        ],
                        [
                            "slim.one_hot_encoding(labels, 10)",
                            "Call"
                        ],
                        [
                            "batch_queue.dequeue()",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_88": {
                "variable": {
                    "value": "variables_to_train",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_96": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_30": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_53": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_63": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "args.preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * args.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_73": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_78": {
                "name": {
                    "value": "synchronized_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_80": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "args.learning_rate_decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "args.learning_rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "exponential_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(args.learning_rate, global_step, args.learning_rate_decay_steps, args.learning_rate_decay, staircase=True, name='exponential_decay_learning_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_100": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_79": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_113": {
                "key": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_115": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zero_fraction_106": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "slim_utili/nets/squeezenet.py": {
        "tensorflow": {
            "concat_55": {
                "values": {
                    "value": "[e1x1, e3x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'squeezenet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "fire",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "expand",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "squeezenet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squeeze(inputs, squeeze_depth)",
                            "Call"
                        ],
                        [
                            "myconv2d(images, 64, [3, 3], stride=2, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool1')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire2')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool3')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire4')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool5')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire6')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire7')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire8')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire9')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=0.5, is_training=is_training, scope='drop9')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, num_classes, [1, 1], stride=1, padding='VALID', scope='conv10')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [13, 13], stride=1, padding='VALID', scope='avgpool10')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/squeezenet_bn.py": {
        "tensorflow": {
            "concat_56": {
                "values": {
                    "value": "[e1x1, e3x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'squeezenet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "fire",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "expand",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "squeezenet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squeeze(inputs, squeeze_depth)",
                            "Call"
                        ],
                        [
                            "myconv2d(images, 64, [3, 3], stride=2, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool1')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire2')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 16, 64, scope='fire3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool3')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire4')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 32, 128, scope='fire5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='maxpool5')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire6')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 48, 192, scope='fire7')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire8')",
                            "Call"
                        ],
                        [
                            "fire_module(net, 64, 256, scope='fire9')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=0.5, is_training=is_training, scope='drop9')",
                            "Call"
                        ],
                        [
                            "myconv2d(net, num_classes, [1, 1], stride=1, padding='VALID', scope='conv10')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [13, 13], stride=1, padding='VALID', scope='avgpool10')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/vgg.py": {
        "tensorflow": {
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_a",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_19",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, myconv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, myconv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, myconv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, myconv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, myconv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_212": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, myconv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, myconv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, myconv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, myconv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, myconv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_279": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, myconv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, myconv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, myconv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, myconv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, myconv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/nets/vgg_test.py": {
        "tensorflow": {
            "main_455": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_119": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.vgg_a(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.vgg_a(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_142": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.vgg_a(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_263": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.vgg_a(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_285": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.vgg_a(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_286": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.vgg_a(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_418": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.vgg_a(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_440": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.vgg_a(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_441": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg.vgg_a(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_a(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_16(inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs, num_classes, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(train_inputs)",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(eval_inputs, is_training=False, spatial_squeeze=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "vgg.vgg_19(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/preprocessing/alexnet_preprocessing.py": {
        "tensorflow": {
            "image_11": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "per_image_standardization_12": {
                "image": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_11": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/preprocessing/cifarnet_preprocessing.py": {
        "tensorflow": {
            "to_float_51": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_crop_55": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[output_height, output_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_59": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_65": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_67": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_86": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "image_48": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_53": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_61": {
                "name": {
                    "value": "distorted_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "per_image_standardization_70": {
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_84": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_92": {
                "name": {
                    "value": "resized_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(resized_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "per_image_standardization_95": {
                "image": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "input": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/preprocessing/inception_preprocessing.py": {
        "tensorflow": {
            "sample_distorted_bounding_box_141": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "bbox",
                            "Method Argument"
                        ],
                        [
                            "bbox",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.75",
                            "Method Argument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_152": {
                "variable": {
                    "value": "cropped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "bbox_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "bbox_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_193": {
                "variable": {
                    "value": "image_with_box",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "bbox",
                            "Method Argument"
                        ],
                        [
                            "bbox",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "draw_bounding_boxes_201": {
                "variable": {
                    "value": "image_with_distorted_box",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "distorted_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_bounding_box_crop(image, bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_222": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_bounding_box_crop(image, bbox)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_232": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_bounding_box_crop(image, bbox)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_233": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_bounding_box_crop(image, bbox)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "subtract_273": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_274": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_40": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case) for case in range(num_cases)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_96": {
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_184": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_186": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_190": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_195": {
                "name": {
                    "value": "image_with_bounding_boxes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_203": {
                "name": {
                    "value": "images_with_distorted_bounding_box",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_distorted_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), distorted_bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_218": {
                "name": {
                    "value": "cropped_resized_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_230": {
                "name": {
                    "value": "final_distorted_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_259": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_261": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "central_crop_265": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "central_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.875",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_269": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_270": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_272": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_66": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_67": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_69": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_70": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_brightness_73": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_74": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_75": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_76": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_193": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_202": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_bounding_box_crop(image, bbox)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_231": {
                "input": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_bounding_box_crop(image, bbox)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_saturation_78": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_79": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_80": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_81": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_83": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_84": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_85": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_86": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_88": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_89": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_90": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_91": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_41": {
                "x": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/preprocessing/lenet_preprocessing.py": {
        "tensorflow": {
            "to_float_39": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "subtract_42": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "div_43": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim_utili/preprocessing/preprocessing_factory.py": {
        "tensorflow": {}
    },
    "slim_utili/preprocessing/squeezenet_preprocessing.py": {
        "tensorflow": {
            "shape_69": {
                "variable": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Assert_71": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(image), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 3.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_77": {
                "variable": {
                    "value": "size_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(original_shape[0], crop_height), tf.greater_equal(original_shape[1], crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_83": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([offset_height, offset_width, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_131": {
                "variable": {
                    "value": "crop_size_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(image_height, crop_height), tf.greater_equal(image_width, crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_229": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_255": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_257": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_258": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_259": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_261": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_264": {
                "variable": {
                    "value": "new_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_265": {
                "variable": {
                    "value": "new_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_280": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_282": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_286": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_287": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_289": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_322": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_323": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_342": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_75": {
                "variable": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crop_height, crop_width, original_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_88": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.stack([offset_height, offset_width, 0]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_120": {
                "variable": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_121": {
                "variable": {
                    "value": "rank_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(image_rank, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong rank for tensor  %s [expected] [actual]', image_list[i].name, 3, image_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_128": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_147": {
                "variable": {
                    "value": "height_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(height, image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong height for tensor %s [expected][actual]', image.name, height, image_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_151": {
                "variable": {
                    "value": "width_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(width, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong width for tensor %s [expected][actual]', image.name, width, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "max_offset_height",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_height - crop_height + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "max_offset_width",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_width - crop_width + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_236": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=2, num_or_size_splits=num_channels, value=image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_72": {
                "x": {
                    "value": "tf.rank(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_74": {
                "control_inputs": {
                    "value": "[rank_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_78": {
                "x": {
                    "value": "tf.greater_equal(original_shape[0], crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(original_shape[1], crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_83": {
                "values": {
                    "value": "[offset_height, offset_width, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_87": {
                "control_inputs": {
                    "value": "[size_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_127": {
                "control_inputs": {
                    "value": "[rank_assertions[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_132": {
                "x": {
                    "value": "tf.greater_equal(image_height, crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(image_width, crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_143": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_162": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_164": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "greater_261": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_72": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_79": {
                "x": {
                    "value": "original_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_height",
                            "Method Argument"
                        ],
                        [
                            "crop_height",
                            "Method Argument"
                        ],
                        [
                            "crop_height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_80": {
                "x": {
                    "value": "original_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_width",
                            "Method Argument"
                        ],
                        [
                            "crop_width",
                            "Method Argument"
                        ],
                        [
                            "crop_width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_122": {
                "x": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(image_list[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_133": {
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_height",
                            "Method Argument"
                        ],
                        [
                            "crop_height",
                            "Method Argument"
                        ],
                        [
                            "crop_height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_134": {
                "x": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_width",
                            "Method Argument"
                        ],
                        [
                            "crop_width",
                            "Method Argument"
                        ],
                        [
                            "crop_width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_142": {
                "control_inputs": {
                    "value": "[rank_assertions[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_148": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_152": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_189": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_190": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slim_utili/preprocessing/vgg_preprocessing.py": {
        "tensorflow": {
            "shape_69": {
                "variable": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Assert_71": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(image), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 3.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_77": {
                "variable": {
                    "value": "size_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(original_shape[0], crop_height), tf.greater_equal(original_shape[1], crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_83": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([offset_height, offset_width, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_131": {
                "variable": {
                    "value": "crop_size_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(image_height, crop_height), tf.greater_equal(image_width, crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_227": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_249": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_251": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_252": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_253": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_255": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_258": {
                "variable": {
                    "value": "new_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_259": {
                "variable": {
                    "value": "new_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_274": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ],
                        [
                            "smallest_side",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_276": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_280": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_281": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_283": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_316": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_317": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_336": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_75": {
                "variable": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crop_height, crop_width, original_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_88": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.stack([offset_height, offset_width, 0]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_120": {
                "variable": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_121": {
                "variable": {
                    "value": "rank_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(image_rank, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong rank for tensor  %s [expected] [actual]', image_list[i].name, 3, image_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_128": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_147": {
                "variable": {
                    "value": "height_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(height, image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong height for tensor %s [expected][actual]', image.name, height, image_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_151": {
                "variable": {
                    "value": "width_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(width, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong width for tensor %s [expected][actual]', image.name, width, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "max_offset_height",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_height - crop_height + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "max_offset_width",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_width - crop_width + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_230": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=2, num_or_size_splits=num_channels, value=image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_72": {
                "x": {
                    "value": "tf.rank(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_74": {
                "control_inputs": {
                    "value": "[rank_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_78": {
                "x": {
                    "value": "tf.greater_equal(original_shape[0], crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(original_shape[1], crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_83": {
                "values": {
                    "value": "[offset_height, offset_width, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_87": {
                "control_inputs": {
                    "value": "[size_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_127": {
                "control_inputs": {
                    "value": "[rank_assertions[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_132": {
                "x": {
                    "value": "tf.greater_equal(image_height, crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(image_width, crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_143": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_162": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_164": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "greater_255": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_72": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_79": {
                "x": {
                    "value": "original_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_height",
                            "Method Argument"
                        ],
                        [
                            "crop_height",
                            "Method Argument"
                        ],
                        [
                            "crop_height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_80": {
                "x": {
                    "value": "original_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_width",
                            "Method Argument"
                        ],
                        [
                            "crop_width",
                            "Method Argument"
                        ],
                        [
                            "crop_width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_122": {
                "x": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(image_list[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_133": {
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_height",
                            "Method Argument"
                        ],
                        [
                            "crop_height",
                            "Method Argument"
                        ],
                        [
                            "crop_height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_134": {
                "x": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_width",
                            "Method Argument"
                        ],
                        [
                            "crop_width",
                            "Method Argument"
                        ],
                        [
                            "crop_width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_142": {
                "control_inputs": {
                    "value": "[rank_assertions[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_148": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_152": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_189": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_190": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slim_utili/train_functions.py": {
        "tensorflow": {
            "DEFINE_string_55": {
                "name": {
                    "value": "init_op_dict_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/init_op_dict.pickle",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "path used by assign_init_op_dict() function to save the initial dict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "trainable_exclude_scopes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes to filter the set of variables to be excluded from train.By default, None would exclude any variable from training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_60": {
                "name": {
                    "value": "solution_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "the path to the solution of optimal masking variable values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_61": {
                "name": {
                    "value": "computation_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "percentage of maximum computation cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_62": {
                "name": {
                    "value": "memory_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "percentage of maximum memory cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "K_heuristic",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "heuristics to use in get_mask_variable_value_using_heuristics() in MaskVariableManager",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_73": {
                "name": {
                    "value": "train_feed_dict_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "the path to the feed_dict for the values of the mask variables, the pickle file is dumped from a previous evaluation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_75": {
                "name": {
                    "value": "decomposition_scheme",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "tai",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the decomposition scheme to use in my_slim_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_82": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_85": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where checkpoints and event logs are written to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_89": {
                "name": {
                    "value": "num_clones",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of model clones to deploy.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_95": {
                "name": {
                    "value": "worker_replicas",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of worker replicas.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_97": {
                "name": {
                    "value": "num_ps_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parameter servers. If the value is 0, then the parameters are handled locally by the worker.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_102": {
                "name": {
                    "value": "num_readers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parallel readers that read data from the dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_106": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_110": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_114": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved, in seconds.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_118": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved, in seconds.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_122": {
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_129": {
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4e-05",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The weight decay on the model weights.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_132": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rmsprop",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the optimizer, one of \"adadelta\", \"adagrad\", \"adam\",\"ftrl\", \"momentum\", \"sgd\" or \"rmsprop\".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_137": {
                "name": {
                    "value": "adadelta_rho",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay rate for adadelta.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_141": {
                "name": {
                    "value": "adagrad_initial_accumulator_value",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the AdaGrad accumulators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_145": {
                "name": {
                    "value": "adam_beta1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 1st moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_149": {
                "name": {
                    "value": "adam_beta2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_153": {
                "name": {
                    "value": "opt_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_155": {
                "name": {
                    "value": "ftrl_learning_rate_power",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate power.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_158": {
                "name": {
                    "value": "ftrl_initial_accumulator_value",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the FTRL accumulators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_162": {
                "name": {
                    "value": "ftrl_l1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l1 regularization strength.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_165": {
                "name": {
                    "value": "ftrl_l2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l2 regularization strength.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_168": {
                "name": {
                    "value": "momentum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum for the MomentumOptimizer and RMSPropOptimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_172": {
                "name": {
                    "value": "rmsprop_momentum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Momentum.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_174": {
                "name": {
                    "value": "rmsprop_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay term for RMSProp.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_180": {
                "name": {
                    "value": "learning_rate_decay_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "exponential",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Specifies how the learning rate is decayed. One of \"fixed\", \"exponential\", or \"polynomial\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_186": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_188": {
                "name": {
                    "value": "end_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimal end learning rate used by a polynomial decay learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_192": {
                "name": {
                    "value": "label_smoothing",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The amount of label smoothing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_195": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.94",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_198": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs after which learning rate decays.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_202": {
                "name": {
                    "value": "sync_replicas",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether or not to synchronize the replicas during training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_206": {
                "name": {
                    "value": "replicas_to_aggregate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The Number of gradients to collect before updating params.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_210": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_219": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_222": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_225": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_228": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_237": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_240": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_244": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_247": {
                "name": {
                    "value": "train_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Train image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_250": {
                "name": {
                    "value": "max_number_of_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_257": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to a checkpoint from which to fine-tune.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_261": {
                "name": {
                    "value": "checkpoint_exclude_scopes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes of variables to exclude when restoring from a checkpoint.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_266": {
                "name": {
                    "value": "trainable_scopes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes to filter the set of variables to train.By default, None would train all the variables.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_493": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "rho": {
                    "value": "FLAGS.adadelta_rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_640": {
                "msg": {
                    "value": "------Fine-tuning---------",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_722": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_817": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_882": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "merge_892": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_895": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_898": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "write_version": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exponential_decay_459": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch / FLAGS.batch_size * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "exponential_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_498": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.adagrad_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_543": {
                "name": {
                    "value": "training/Learning Rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_659": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_667": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes",
                            "variable"
                        ]
                    ]
                }
            },
            "trainable_variables_672": {
                "variable": {
                    "value": "variables_to_train",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_723": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_736": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_778": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_827": {
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_839": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SyncReplicasOptimizer_855": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.AdadeltaOptimizer(learning_rate, rho=FLAGS.adadelta_rho, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.AdagradOptimizer(learning_rate, initial_accumulator_value=FLAGS.adagrad_initial_accumulator_value)",
                            "Call"
                        ],
                        [
                            "tf.train.AdamOptimizer(learning_rate, beta1=FLAGS.adam_beta1, beta2=FLAGS.adam_beta2, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.FtrlOptimizer(learning_rate, learning_rate_power=FLAGS.ftrl_learning_rate_power, initial_accumulator_value=FLAGS.ftrl_initial_accumulator_value, l1_regularization_strength=FLAGS.ftrl_l1, l2_regularization_strength=FLAGS.ftrl_l2)",
                            "Call"
                        ],
                        [
                            "tf.train.MomentumOptimizer(learning_rate, momentum=FLAGS.momentum, name='Momentum')",
                            "Call"
                        ],
                        [
                            "tf.train.RMSPropOptimizer(learning_rate, decay=FLAGS.rmsprop_decay, momentum=FLAGS.rmsprop_momentum, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.GradientDescentOptimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "YFOptimizer()",
                            "Call"
                        ],
                        [
                            "YFOptimizer(learning_rate=learning_rate, momentum=FLAGS.momentum)",
                            "Call"
                        ],
                        [
                            "_configure_optimizer(learning_rate=FLAGS.learning_rate if FLAGS.optimizer == 'yellowfin' else learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.train.SyncReplicasOptimizer(opt=optimizer, replicas_to_aggregate=FLAGS.replicas_to_aggregate, variable_averages=variable_averages, variables_to_average=moving_average_variables, replica_id=tf.constant(FLAGS.task, tf.int32, shape=()), total_num_replicas=FLAGS.worker_replicas)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "FLAGS.replicas_to_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variable_averages": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ExponentialMovingAverage(FLAGS.moving_average_decay, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "variables_to_average": {
                    "value": "moving_average_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "replica_id": {
                    "value": "tf.constant(FLAGS.task, tf.int32, shape=())",
                    "type": "Call",
                    "possible_values": []
                },
                "total_num_replicas": {
                    "value": "FLAGS.worker_replicas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_884": {
                "variable": {
                    "value": "train_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_deploy.optimize_clones(clones, optimizer, var_list=variables_to_train)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_466": {
                "value": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fixed_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_502": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_542": {
                "name": {
                    "value": "variable.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_568": {
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_735": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_764": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_805": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "slim.one_hot_encoding(labels, dataset.num_classes - FLAGS.labels_offset)",
                            "Call"
                        ],
                        [
                            "batch_queue.dequeue()",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "FLAGS.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_811": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_847": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_875": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_deploy.optimize_clones(clones, optimizer, var_list=variables_to_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_883": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_888": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_468": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch / FLAGS.batch_size * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "FLAGS.end_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "polynomial_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FtrlOptimizer_508": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "learning_rate_power": {
                    "value": "FLAGS.ftrl_learning_rate_power",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.ftrl_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l1_regularization_strength": {
                    "value": "FLAGS.ftrl_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l2_regularization_strength": {
                    "value": "FLAGS.ftrl_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_794": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_802": {
                "logits": {
                    "value": "end_points['AuxLogits']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "clones[0].outputs",
                            "Attribute"
                        ],
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "slim.one_hot_encoding(labels, dataset.num_classes - FLAGS.labels_offset)",
                            "Call"
                        ],
                        [
                            "batch_queue.dequeue()",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "FLAGS.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "scope": {
                    "value": "aux_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_828": {
                "name": {
                    "value": "'losses/%s' % loss.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, first_clone_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_850": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_515": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Momentum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_860": {
                "value": {
                    "value": "FLAGS.task",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_520": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "decay": {
                    "value": "FLAGS.rmsprop_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.rmsprop_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_526": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slim_utili/train_image_classifier.py": {
        "tensorflow": {
            "DEFINE_string_30": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where checkpoints and event logs are written to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "num_clones",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of model clones to deploy.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "worker_replicas",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of worker replicas.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "num_ps_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parameter servers. If the value is 0, then the parameters are handled locally by the worker.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "num_readers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parallel readers that read data from the dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_58": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved, in seconds.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved, in seconds.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_77": {
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4e-05",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The weight decay on the model weights.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_80": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rmsprop",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the optimizer, one of \"adadelta\", \"adagrad\", \"adam\",\"ftrl\", \"momentum\", \"sgd\" or \"rmsprop\".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_85": {
                "name": {
                    "value": "adadelta_rho",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay rate for adadelta.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_89": {
                "name": {
                    "value": "adagrad_initial_accumulator_value",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the AdaGrad accumulators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_93": {
                "name": {
                    "value": "adam_beta1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 1st moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_97": {
                "name": {
                    "value": "adam_beta2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_101": {
                "name": {
                    "value": "opt_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_103": {
                "name": {
                    "value": "ftrl_learning_rate_power",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate power.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_106": {
                "name": {
                    "value": "ftrl_initial_accumulator_value",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the FTRL accumulators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_110": {
                "name": {
                    "value": "ftrl_l1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l1 regularization strength.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_113": {
                "name": {
                    "value": "ftrl_l2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l2 regularization strength.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_116": {
                "name": {
                    "value": "momentum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum for the MomentumOptimizer and RMSPropOptimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_120": {
                "name": {
                    "value": "rmsprop_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay term for RMSProp.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_126": {
                "name": {
                    "value": "learning_rate_decay_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "exponential",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Specifies how the learning rate is decayed. One of \"fixed\", \"exponential\", or \"polynomial\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_132": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_134": {
                "name": {
                    "value": "end_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimal end learning rate used by a polynomial decay learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_138": {
                "name": {
                    "value": "label_smoothing",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The amount of label smoothing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_141": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.94",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_144": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs after which learning rate decays.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_148": {
                "name": {
                    "value": "sync_replicas",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether or not to synchronize the replicas during training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_152": {
                "name": {
                    "value": "replicas_to_aggregate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The Number of gradients to collect before updating params.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_156": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_165": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_168": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_171": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_174": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_180": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_183": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_187": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_190": {
                "name": {
                    "value": "train_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Train image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_193": {
                "name": {
                    "value": "max_number_of_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_200": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to a checkpoint from which to fine-tune.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_204": {
                "name": {
                    "value": "checkpoint_exclude_scopes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes of variables to exclude when restoring from a checkpoint.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_209": {
                "name": {
                    "value": "trainable_scopes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes to filter the set of variables to train.By default, None would train all the variables.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_274": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "rho": {
                    "value": "FLAGS.adadelta_rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_326": {
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_348": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_349": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_353": {
                "msg": {
                    "value": "'Fine-tuning from %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_374": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes",
                            "variable"
                        ]
                    ]
                }
            },
            "set_verbosity_383": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_476": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_542": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "merge_552": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_240": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch / FLAGS.batch_size * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "exponential_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_279": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.adagrad_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_327": {
                "msg": {
                    "value": "'Ignoring --checkpoint_path because a checkpoint already exists in %s' % FLAGS.train_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_438": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_487": {
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_499": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SyncReplicasOptimizer_515": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.AdadeltaOptimizer(learning_rate, rho=FLAGS.adadelta_rho, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.AdagradOptimizer(learning_rate, initial_accumulator_value=FLAGS.adagrad_initial_accumulator_value)",
                            "Call"
                        ],
                        [
                            "tf.train.AdamOptimizer(learning_rate, beta1=FLAGS.adam_beta1, beta2=FLAGS.adam_beta2, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.FtrlOptimizer(learning_rate, learning_rate_power=FLAGS.ftrl_learning_rate_power, initial_accumulator_value=FLAGS.ftrl_initial_accumulator_value, l1_regularization_strength=FLAGS.ftrl_l1, l2_regularization_strength=FLAGS.ftrl_l2)",
                            "Call"
                        ],
                        [
                            "tf.train.MomentumOptimizer(learning_rate, momentum=FLAGS.momentum, name='Momentum')",
                            "Call"
                        ],
                        [
                            "tf.train.RMSPropOptimizer(learning_rate, decay=FLAGS.rmsprop_decay, momentum=FLAGS.momentum, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.GradientDescentOptimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "_configure_optimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.train.SyncReplicasOptimizer(opt=optimizer, replicas_to_aggregate=FLAGS.replicas_to_aggregate, variable_averages=variable_averages, variables_to_average=moving_average_variables, replica_id=tf.constant(FLAGS.task, tf.int32, shape=()), total_num_replicas=FLAGS.worker_replicas)",
                            "Call"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "FLAGS.replicas_to_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variable_averages": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ExponentialMovingAverage(FLAGS.moving_average_decay, global_step)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "variables_to_average": {
                    "value": "moving_average_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "replica_id": {
                    "value": "tf.constant(FLAGS.task, tf.int32, shape=())",
                    "type": "Call",
                    "possible_values": []
                },
                "total_num_replicas": {
                    "value": "FLAGS.worker_replicas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_544": {
                "variable": {
                    "value": "train_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_deploy.optimize_clones(clones, optimizer, var_list=variables_to_train)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_247": {
                "value": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fixed_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_283": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_396": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_425": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_464": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "slim.one_hot_encoding(labels, dataset.num_classes - FLAGS.labels_offset)",
                            "Call"
                        ],
                        [
                            "batch_queue.dequeue()",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "FLAGS.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_470": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_507": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_535": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_deploy.optimize_clones(clones, optimizer, var_list=variables_to_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_543": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_548": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_249": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch / FLAGS.batch_size * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "FLAGS.end_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "polynomial_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FtrlOptimizer_289": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "learning_rate_power": {
                    "value": "FLAGS.ftrl_learning_rate_power",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.ftrl_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l1_regularization_strength": {
                    "value": "FLAGS.ftrl_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l2_regularization_strength": {
                    "value": "FLAGS.ftrl_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_453": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_461": {
                "logits": {
                    "value": "end_points['AuxLogits']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "clones[0].outputs",
                            "Attribute"
                        ],
                        [
                            "network_fn(images)",
                            "Call"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.batch([image, label], batch_size=FLAGS.batch_size, num_threads=FLAGS.num_preprocessing_threads, capacity=5 * FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "slim.one_hot_encoding(labels, dataset.num_classes - FLAGS.labels_offset)",
                            "Call"
                        ],
                        [
                            "batch_queue.dequeue()",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "FLAGS.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "scope": {
                    "value": "aux_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_482": {
                "name": {
                    "value": "'activations/' + end_point",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_483": {
                "name": {
                    "value": "'sparsity/' + end_point",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_488": {
                "name": {
                    "value": "'losses/%s' % loss.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, first_clone_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_492": {
                "name": {
                    "value": "variable.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_510": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_296": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Momentum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zero_fraction_484": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_520": {
                "value": {
                    "value": "FLAGS.task",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_301": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "decay": {
                    "value": "FLAGS.rmsprop_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_307": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slim_utili/yellowfin.py": {
        "tensorflow": {
            "Variable_80": {
                "variable": {
                    "value": "self._lr_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "YF_lr",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "self._mu_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "YF_mu",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "self.lr_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "YF_lr_factor",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_95": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr_var * self.lr_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self._mu_var + delta_mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "use_locking",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'YellowFin'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "use_nesterov": {
                    "value": "use_nesterov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "greater_106": {
                "variable": {
                    "value": "self._do_tune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self._adapt_grad_clip_thresh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "LARGE_FLOAT_VAL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000000000000000.0",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_129": {
                "variable": {
                    "value": "self._adapt_grad_clip_target_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "LARGE_FLOAT_VAL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000000000000000.0",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_136": {
                "variable": {
                    "value": "self._curv_win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros([self._curv_win_width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "curv_win",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scatter_update_143": {
                "variable": {
                    "value": "self._curv_win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._curv_win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._global_step % self._curv_win_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "updates": {
                    "value": "self._grad_norm_squared + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_147": {
                "variable": {
                    "value": "valid_window",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._curv_win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "tf.constant([0])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.expand_dims(tf.minimum(tf.constant(self._curv_win_width), self._global_step + 1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_201": {
                "variable": {
                    "value": "self._grad_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(EPS, dtype=self._grad_norm_squared_avg.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._grad_norm_squared_avg - tf.add_n([tf.reduce_sum(val) for val in self._grad_avg_squared])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_212": {
                "variable": {
                    "value": "self._grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._grad_norm_squared",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_239": {
                "variable": {
                    "value": "non_zero_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.count_nonzero(g) for g in self._grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_240": {
                "variable": {
                    "value": "all_entry_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.size(g) for g in self._grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_249": {
                "variable": {
                    "value": "self._moving_averager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self._beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zero_debias": {
                    "value": "self._zero_debias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_290": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.0 - tf.sqrt(self._mu)) ** 2 / (self._h_min + EPS)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(lr, lr * (tf.to_float(self._global_step) + 1.0) / 10.0 / tf.to_float(tf.constant(self._curv_win_width)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lr * (tf.to_float(self._global_step) + 1.0) / 10.0 / tf.to_float(tf.constant(self._curv_win_width))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_320": {
                "variable": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(self._h_max + EPS) / (self._h_min + EPS)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_321": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "root ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "((tf.sqrt(dr) - 1) / (tf.sqrt(dr) + 1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_327": {
                "variable": {
                    "value": "self._mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cond(self._do_tune, lambda : self.get_mu_tensor(), lambda : self._mu_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_345": {
                "variable": {
                    "value": "assign_hyper_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assign_hyper_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "self._clip_thresh_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "clip_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "YF_clip_thresh",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_153": {
                "variable": {
                    "value": "self._h_min_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_min(valid_window) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_155": {
                "variable": {
                    "value": "self._h_min_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self._curv_win, tf.constant([0]), tf.expand_dims(tf.minimum(tf.constant(self._curv_win_width), self._global_step + 1), dim=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_157": {
                "variable": {
                    "value": "self._h_max_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(valid_window) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_159": {
                "variable": {
                    "value": "self._h_max_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "valid_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self._curv_win, tf.constant([0]), tf.expand_dims(tf.minimum(tf.constant(self._curv_win_width), self._global_step + 1), dim=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_226": {
                "variable": {
                    "value": "self._dist_to_opt_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._moving_averager.average(self._dist_to_opt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_275": {
                "variable": {
                    "value": "self._grad_norm_squared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self._grad_norm_squared",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_276": {
                "variable": {
                    "value": "self._grad_norm_squared_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self._grad_norm_squared_avg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_286": {
                "*inputs": {
                    "value": "*before_apply_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "identity_331": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cond(self._do_tune, lambda : self.get_lr_tensor(), lambda : self._lr_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_357": {
                "variable": {
                    "value": "(self._grads, self._grads_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "self._grads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self._clip_thresh_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_362": {
                "variable": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self._do_tune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.sqrt(self._stat_protect_fac * self._adapt_grad_clip_thresh ** 2)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.to_float(tf.constant(LARGE_FLOAT_VAL))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_365": {
                "variable": {
                    "value": "(self._grads, self._grads_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "self._grads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(self._do_tune, lambda : tf.sqrt(self._stat_protect_fac * self._adapt_grad_clip_thresh ** 2), lambda : tf.to_float(tf.constant(LARGE_FLOAT_VAL)))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(tf.global_norm(self._grads), self._adapt_grad_clip_thresh), lambda : self._adapt_grad_clip_target_val, lambda : tf.to_float(tf.constant(LARGE_FLOAT_VAL)))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_390": {
                "variable": {
                    "value": "self._increment_global_step_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_394": {
                "variable": {
                    "value": "self._adapt_grad_clip_thresh_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._adapt_grad_clip_thresh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sqrt(self._h_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_396": {
                "variable": {
                    "value": "self._adapt_grad_clip_target_val_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._adapt_grad_clip_target_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sqrt(self._h_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_400": {
                "*inputs": {
                    "value": "before_apply_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.before_apply()",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "update_hyper_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.update_hyper_param()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_106": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_148": {
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_148": {
                "input": {
                    "value": "tf.minimum(tf.constant(self._curv_win_width), self._global_step + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_162": {
                "control_inputs": {
                    "value": "[self._h_min_t, self._h_max_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_197": {
                "control_inputs": {
                    "value": "[avg_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_202": {
                "value": {
                    "value": "EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._grad_norm_squared_avg.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_215": {
                "control_inputs": {
                    "value": "[avg_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_225": {
                "control_inputs": {
                    "value": "[avg_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_241": {
                "x": {
                    "value": "non_zero_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n([tf.count_nonzero(g) for g in self._grads])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._grads[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_242": {
                "x": {
                    "value": "all_entry_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n([tf.size(g) for g in self._grads])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._grads[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_244": {
                "control_inputs": {
                    "value": "[avg_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_263": {
                "input_tensor": {
                    "value": "grad_squared",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_272": {
                "control_inputs": {
                    "value": "[avg_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_279": {
                "control_inputs": {
                    "value": "[avg_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_313": {
                "x": {
                    "value": "w3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-tf.sqrt(p ** 2 + 4.0 / 27.0 * p ** 3) - p) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_313": {
                "x": {
                    "value": "tf.abs(w3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_327": {
                "pred": {
                    "value": "self._do_tune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.get_mu_tensor()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._mu_var",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "control_dependencies_330": {
                "control_inputs": {
                    "value": "[self._mu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_335": {
                "control_inputs": {
                    "value": "[self._mu, self._lr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "before_apply",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "update_hyper",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "apply_updates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_389": {
                "control_inputs": {
                    "value": "[apply_grad_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_149": {
                "x": {
                    "value": "tf.constant(self._curv_win_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_165": {
                "control_inputs": {
                    "value": "[avg_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_167": {
                "variable": {
                    "value": "self._h_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.identity(self._moving_averager.average(self._h_min_t))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_171": {
                "variable": {
                    "value": "self._h_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._moving_averager.average(self._h_min_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_173": {
                "variable": {
                    "value": "self._h_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.identity(self._moving_averager.average(self._h_max_t))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_177": {
                "variable": {
                    "value": "self._h_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._moving_averager.average(self._h_max_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_200": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_n_204": {
                "inputs": {
                    "value": "[tf.reduce_sum(val) for val in self._grad_avg_squared]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "count_nonzero_239": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self._tvars, self._grads)",
                            "Call"
                        ],
                        [
                            "zip(self._tvars, self._grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_240": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self._tvars, self._grads)",
                            "Call"
                        ],
                        [
                            "zip(self._tvars, self._grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "colocate_with_260": {
                "op": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self._tvars, self._grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_290": {
                "x": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_313": {
                "x": {
                    "value": "w3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-tf.sqrt(p ** 2 + 4.0 / 27.0 * p ** 3) - p) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cond_331": {
                "pred": {
                    "value": "self._do_tune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.get_lr_tensor()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._lr_var",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "control_dependencies_371": {
                "control_inputs": {
                    "value": "[before_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_375": {
                "control_inputs": {
                    "value": "[update_hyper_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_379": {
                "variable": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(tf.global_norm(self._grads), self._adapt_grad_clip_thresh)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self._adapt_grad_clip_target_val",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.to_float(tf.constant(LARGE_FLOAT_VAL))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_383": {
                "variable": {
                    "value": "(self._grads, self._grads_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "self._grads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(self._do_tune, lambda : tf.sqrt(self._stat_protect_fac * self._adapt_grad_clip_thresh ** 2), lambda : tf.to_float(tf.constant(LARGE_FLOAT_VAL)))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(tf.global_norm(self._grads), self._adapt_grad_clip_thresh), lambda : self._adapt_grad_clip_target_val, lambda : tf.to_float(tf.constant(LARGE_FLOAT_VAL)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_394": {
                "x": {
                    "value": "self._h_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_396": {
                "x": {
                    "value": "self._h_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_149": {
                "value": {
                    "value": "self._curv_win_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_153": {
                "input_tensor": {
                    "value": "valid_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self._curv_win, tf.constant([0]), tf.expand_dims(tf.minimum(tf.constant(self._curv_win_width), self._global_step + 1), dim=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_157": {
                "input_tensor": {
                    "value": "valid_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self._curv_win, tf.constant([0]), tf.expand_dims(tf.minimum(tf.constant(self._curv_win_width), self._global_step + 1), dim=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_190": {
                "tensor": {
                    "value": "tf.unsorted_segment_sum(g.values, g.indices, g.dense_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "t.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_229": {
                "x": {
                    "value": "self._sparsity_avg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_261": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self._tvars, self._grads)",
                            "Call"
                        ],
                        [
                            "zip(self._tvars, self._grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_289": {
                "x": {
                    "value": "self._mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_290": {
                "value": {
                    "value": "self._curv_win_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_312": {
                "x": {
                    "value": "p ** 2 + 4.0 / 27.0 * p ** 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_337": {
                "ref": {
                    "value": "self._mu_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_338": {
                "ref": {
                    "value": "self._lr_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_342": {
                "control_inputs": {
                    "value": "[self._mu, self._lr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_363": {
                "x": {
                    "value": "self._stat_protect_fac * self._adapt_grad_clip_thresh ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_364": {
                "x": {
                    "value": "tf.constant(LARGE_FLOAT_VAL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_168": {
                "input": {
                    "value": "self._moving_averager.average(self._h_min_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_174": {
                "input": {
                    "value": "self._moving_averager.average(self._h_max_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_190": {
                "data": {
                    "value": "g.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "g.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "g.dense_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_204": {
                "input_tensor": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_322": {
                "x": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum((self._h_max + EPS) / (self._h_min + EPS), 1.0 + EPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_343": {
                "ref": {
                    "value": "self._mu_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_344": {
                "ref": {
                    "value": "self._lr_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_364": {
                "value": {
                    "value": "LARGE_FLOAT_VAL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000000000000000.0",
                            "float"
                        ]
                    ]
                }
            },
            "greater_379": {
                "x": {
                    "value": "tf.global_norm(self._grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._adapt_grad_clip_thresh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_379": {
                "t_list": {
                    "value": "self._grads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_382": {
                "x": {
                    "value": "tf.constant(LARGE_FLOAT_VAL)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_382": {
                "value": {
                    "value": "LARGE_FLOAT_VAL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000000000000000.0",
                            "float"
                        ]
                    ]
                }
            }
        }
    }
}