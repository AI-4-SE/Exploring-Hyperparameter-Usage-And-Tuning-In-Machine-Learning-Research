{
    "experiment_utils/sim_policy.py": {
        "tensorflow": {
            "Session_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning_to_adapt/dynamics/core/layers.py": {
        "tensorflow": {
            "get_default_session_78": {
                "variable": {
                    "value": "param_values",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_78": {
                "variable": {
                    "value": "param_values",
                    "type": "Name",
                    "possible_values": []
                },
                "main": {
                    "value": "self._params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_219": {
                "variable": {
                    "value": "current_scope",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_220": {
                "variable": {
                    "value": "trainable_policy_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "current_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_default_graph().get_name_scope()",
                            "Call"
                        ],
                        [
                            "tf.get_default_graph().get_name_scope()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_101": {
                "main": {
                    "value": "self._assign_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "feed_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict(zip(self._assign_phs, policy_params.values()))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_112": {
                "main": {
                    "value": "tf.variables_initializer(self.get_params().values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "assign_placeholder",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_95": {
                "variable": {
                    "value": "assign_op",
                    "type": "Name",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_params().values()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_placeholder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=var.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_112": {
                "var_list": {
                    "value": "self.get_params().values()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_160": {
                "variable": {
                    "value": "current_scope",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_161": {
                "variable": {
                    "value": "trainable_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "current_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_default_graph().get_name_scope()",
                            "Call"
                        ],
                        [
                            "tf.get_default_graph().get_name_scope()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "learning_to_adapt/dynamics/core/utils.py": {
        "tensorflow": {
            "dense_133": {
                "variable": {
                    "value": "output_var",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_nonlinearity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "input_var",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_dim, hidden_dim, n_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_60": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_61": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "np.prod(output_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_nonlinearity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "output_var",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,) + output_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "input_var",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_119": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_129": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "input_var",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_221": {
                "variable": {
                    "value": "(outputs, next_state_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(cell)",
                            "Call"
                        ],
                        [
                            "cell[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=input_dim, name='input')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=input_dim, name='input')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=input_dim, name='input')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "state_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple(state_var)",
                            "Call"
                        ],
                        [
                            "state_var[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_transpose_50": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv_t_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_115": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_131": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_213": {
                "variable": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": []
                },
                "cells": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(cell)",
                            "Call"
                        ],
                        [
                            "cell[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dense_230": {
                "variable": {
                    "value": "output_var",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_nonlinearity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_278": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_normalization_117": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_281": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, [-1, hidden_dim, hidden_dim, n_channels])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(x, filters=filter, kernel_size=kernel_size, strides=stride, name='conv_t_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, np.prod(output_dim), name='output', activation=output_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=False)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_196": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'cell_state_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_state_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMCell_194": {
                "units": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_202": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_state_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_198": {
                "c": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, hidden_size), name='cell_state_%d' % idx)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, hidden_size), name='hidden_state_%d' % idx)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, hidden_size), name='hidden_state_%d' % idx)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, hidden_size), name='hidden_state_%d' % idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRUCell_200": {
                "units": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_207": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_state_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RNNCell_205": {
                "trainable": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "learning_to_adapt/dynamics/meta_mlp_dynamics.py": {
        "tensorflow": {
            "split_96": {
                "variable": {
                    "value": "nn_input_per_task",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.nn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.meta_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_97": {
                "variable": {
                    "value": "delta_per_task",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.delta_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.meta_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_session_179": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_343": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_412": {
                "variable": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "[params_var[key] for key in update_param_keys]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs_space_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.act_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, action_space_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.delta_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs_space_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "self.nn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.obs_ph, self.act_ph]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.delta_ph - self.delta_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_89": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_90": {
                "variable": {
                    "value": "self.adaptation_sym",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.inner_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "self.pre_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pre_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_139": {
                "variable": {
                    "value": "self.post_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "post_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_147": {
                "variable": {
                    "value": "nn_input_per_task",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.nn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.meta_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_session_298": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_426": {
                "variable": {
                    "value": "placeholders[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "key + '_ph'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "pre_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pre_delta_per_task[idx] - pre_delta_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "post_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(post_delta_per_task[idx] - post_delta_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "name + '_ph_graph'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_22": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "square_88": {
                "x": {
                    "value": "self.delta_ph - self.delta_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "name + '/pre_model_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "name + '/post_model_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_416": {
                "x": {
                    "value": "self.inner_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "gradients[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_99": {
                "value": {
                    "value": "nn_input",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_100": {
                "value": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "obs_next - obs",
                            "BinOp"
                        ],
                        [
                            "np.array(self._predict(obs, act))",
                            "Call"
                        ],
                        [
                            "denormalize(delta, self.normalization['delta'][0], self.normalization['delta'][1])",
                            "Call"
                        ],
                        [
                            "np.array(self._predict(obs, act))",
                            "Call"
                        ],
                        [
                            "sess.run(self.post_update_delta[:self._num_adapted_models], feed_dict=feed_dict)",
                            "Call"
                        ],
                        [
                            "np.concatenate(delta, axis=0)",
                            "Call"
                        ],
                        [
                            "self.f_delta_pred(obs, act)",
                            "Call"
                        ],
                        [
                            "obs_next - obs",
                            "BinOp"
                        ],
                        [
                            "obs_next - obs",
                            "BinOp"
                        ],
                        [
                            "obs_next - obs",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_118": {
                "x": {
                    "value": "pre_delta_per_task[idx] - pre_delta_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_133": {
                "x": {
                    "value": "post_delta_per_task[idx] - post_delta_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "'task_%i' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "learning_to_adapt/dynamics/mlp_dynamics.py": {
        "tensorflow": {
            "get_default_session_104": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_230": {
                "variable": {
                    "value": "self.obs_dataset_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_231": {
                "variable": {
                    "value": "self.act_dataset_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, act.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_232": {
                "variable": {
                    "value": "self.delta_dataset_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, delta.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs_space_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.act_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, action_space_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.delta_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs_space_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "self.nn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.obs_ph, self.act_ph]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.delta_ph - self.delta_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_22": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "ff_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_82": {
                "x": {
                    "value": "self.delta_ph - self.delta_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "learning_to_adapt/dynamics/rnn_dynamics.py": {
        "tensorflow": {
            "get_default_session_113": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_261": {
                "variable": {
                    "value": "self.obs_dataset_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, obs.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_262": {
                "variable": {
                    "value": "self.act_dataset_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, act.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_263": {
                "variable": {
                    "value": "self.delta_dataset_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, delta.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_default_session_274": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, obs_space_dims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_ph",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.act_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, action_space_dims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "act_ph",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.delta_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, obs_space_dims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "delta_ph",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "self.nn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.obs_ph, self.act_ph]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.delta_pred - self.delta_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_91": {
                "variable": {
                    "value": "self._gradients_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(rnn.get_params().values())",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_290": {
                "variable": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": []
                },
                "c": {
                    "value": "hidden_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([state.c] * batch_size)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "hidden_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([state.h] * batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "rnn_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_88": {
                "x": {
                    "value": "self.delta_pred - self.delta_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "shape": {
                    "value": "param.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_282": {
                "variable": {
                    "value": "_hidden",
                    "type": "Name",
                    "possible_values": []
                },
                "c": {
                    "value": "_hidden_c",
                    "type": "Name",
                    "possible_values": []
                },
                "h": {
                    "value": "_hidden_h",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "learning_to_adapt/logger/logger.py": {
        "tensorflow": {
            "as_bytes_165": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "learning_to_adapt/policies/rnn_mpc_controller.py": {
        "tensorflow": {}
    },
    "learning_to_adapt/trainers/mb_trainer.py": {
        "tensorflow": {
            "Session_47": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning_to_adapt/utils/networks/mlp.py": {
        "tensorflow": {
            "zeros_initializer_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "input_var",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_53": {
                "variable": {
                    "value": "output_var",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_nonlinearity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_156": {
                "variable": {
                    "value": "input_var",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_197": {
                "variable": {
                    "value": "(outputs, next_state_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(cell)",
                            "Call"
                        ],
                        [
                            "cell[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=input_dim, name='input')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=input_dim, name='input')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "state_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple(state_var)",
                            "Call"
                        ],
                        [
                            "state_var[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_203": {
                "variable": {
                    "value": "output_var",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_nonlinearity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dense_44": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ],
                        [
                            "tf.zeros_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_189": {
                "variable": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": []
                },
                "cells": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(cell)",
                            "Call"
                        ],
                        [
                            "cell[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_104": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, hidden_size, name='hidden_%d' % idx, activation=hidden_nonlinearity, kernel_initializer=w_init, bias_initializer=b_init, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "input_var",
                            "Name"
                        ],
                        [
                            "tf.matmul(x, param)",
                            "Call"
                        ],
                        [
                            "tf.add(x, param)",
                            "Call"
                        ],
                        [
                            "hidden_nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "output_nonlinearity(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'cell_state_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_state_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMCell_170": {
                "units": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_state_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_174": {
                "c": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, hidden_size), name='cell_state_%d' % idx)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, hidden_size), name='hidden_state_%d' % idx)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, hidden_size), name='hidden_state_%d' % idx)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, hidden_size), name='hidden_state_%d' % idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRUCell_176": {
                "units": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_state_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RNNCell_181": {
                "trainable": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "learning_to_adapt/utils/tensor_utils.py": {
        "tensorflow": {
            "get_default_session_8": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning_to_adapt/utils/utils.py": {
        "tensorflow": {
            "get_default_session_9": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_209": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seed % 4294967294",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}