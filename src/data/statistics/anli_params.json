{
    "src/modeling/dummy_modeling_xlnet.py": {
        "tensorflow": {
            "list_variables_129": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_variable_133": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_199": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_200": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_201": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_202": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_203": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_206": {
                "variable": {
                    "value": "self.r_s_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_207": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_208": {
                "variable": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_225": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_239": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_258": {
                "variable": {
                    "value": "ac",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_261": {
                "variable": {
                    "value": "bd",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_289": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnij,jbnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_299": {
                "variable": {
                    "value": "attn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('bnij,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask, output_attentions=output_attentions)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_447": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_448": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_449": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_471": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_634": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_635": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, config.d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_636": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[XLNetLayer(config) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_637": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_669": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_670": {
                "variable": {
                    "value": "mask_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_671": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_672": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask_pad, mask_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_694": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_695": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_705": {
                "variable": {
                    "value": "freq_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_986": {
                "variable": {
                    "value": "self.lm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_997": {
                "variable": {
                    "value": "dummy_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_998": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_1002": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, sequence_length, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1008": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1146": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1242": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1341": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_1448": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_268": {
                "variable": {
                    "value": "ef",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_269": {
                "variable": {
                    "value": "ef",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "seg_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_330": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_333": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_340": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_362": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_411": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_412": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_413": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_416": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tril_674": {
                "variable": {
                    "value": "mask_lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_675": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[:, :qlen] + mask_lo, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_718": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_719": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-beg",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-end",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_732": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_734": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_889": {
                "variable": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1127": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1314": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1430": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1540": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1678": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1697": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "start_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1699": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1703": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1711": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "end_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_1713": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_1719": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_225": {
                "start": {
                    "value": "klen",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_239": {
                "start": {
                    "value": "klen",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_366": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_381": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask, output_attentions=output_attentions)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask, output_attentions=output_attentions)",
                            "Call"
                        ],
                        [
                            "torch.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_406": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_706": {
                "input": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "exponent": {
                    "value": "freq_seq / self.d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_839": {
                "variable": {
                    "value": "mems_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data_mask.shape[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_840": {
                "variable": {
                    "value": "data_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_852": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([qlen, mlen]).to(attn_mask), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_882": {
                "variable": {
                    "value": "mem_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_883": {
                "variable": {
                    "value": "cat_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_1221": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1224": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1319": {
                "variable": {
                    "value": "active_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1686": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_286": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "head_mask",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[None] * self.n_layer",
                            "BinOp"
                        ],
                        [
                            "head_mask.unsqueeze(0).unsqueeze(0).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "head_mask.expand(self.n_layer, -1, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "head_mask.to(dtype=next(self.parameters()).dtype)",
                            "Call"
                        ],
                        [
                            "head_mask.unsqueeze(1).unsqueeze(1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_292": {
                "equation": {
                    "value": "bnij->ijbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_688": {
                "tensors": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_695": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_695": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_850": {
                "n": {
                    "value": "qlen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_1320": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_276": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_278": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_852": {
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/flint/data_utils/batchbuilder.py": {
        "torch": {}
    },
    "src/flint/data_utils/fields.py": {
        "torch": {
            "tensor_23": {
                "data": {
                    "value": "batched_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_38": {
                "obj": {
                    "value": "values[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/flint/torch_util.py": {
        "torch": {
            "pad_packed_sequence_161": {
                "variable": {
                    "value": "(unpacked_seq, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_seq",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pack_padded_sequence(s_inputs, lengths_list)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(s_inputs, lengths_list, batch_first=batch_first)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_257": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[inputs]",
                            "List"
                        ],
                        [
                            "torch.cat(inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat([inputs[:, 1:], Variable(inputs.data.new(batch_size, 1).zero_())], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([inputs[:, 1:], Variable(inputs.data.new(batch_size, 1).zero_())], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_399": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ordered_out_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "s_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s_inputs_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_118": {
                "variable": {
                    "value": "packed_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(s_inputs_list, 1)",
                            "Call"
                        ],
                        [
                            "torch.stack(s_inputs_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_150": {
                "variable": {
                    "value": "s_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s_inputs_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_151": {
                "variable": {
                    "value": "packed_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(s_inputs_list, 1)",
                            "Call"
                        ],
                        [
                            "torch.stack(s_inputs_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_234": {
                "variable": {
                    "value": "packed_sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "packed_sequence_mems",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_list_mems",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_473": {
                "variable": {
                    "value": "packed_sequence_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_list_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_496": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "[seq, pad_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_86": {
                "tensors": {
                    "value": "batch_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_87": {
                "tensors": {
                    "value": "batch_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "s_inputs_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "s_inputs_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "output_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[net(chuck) for chuck in torch.chunk(inputs, chuck, dim=0)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_265": {
                "tensors": {
                    "value": "batch_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_311": {
                "tensors": {
                    "value": "b_seq_max_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_320": {
                "tensors": {
                    "value": "b_seq_max_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_340": {
                "tensors": {
                    "value": "b_seq_avg_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_349": {
                "tensors": {
                    "value": "b_seq_avg_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_418": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[:, 1:], Variable(inputs.data.new(batch_size, 1).zero_())]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_488": {
                "variable": {
                    "value": "softed_b_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_score.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_488": {
                "variable": {
                    "value": "softed_b_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_490": {
                "variable": {
                    "value": "weighted_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_mems * softed_b_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "state_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_287": {
                "input": {
                    "value": "packed_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pack_sequence_for_linear(label, l)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "chuck",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "state_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_247": {
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[inputs]",
                            "List"
                        ],
                        [
                            "torch.cat(inputs)",
                            "Call"
                        ],
                        [
                            "torch.cat([inputs[:, 1:], Variable(inputs.data.new(batch_size, 1).zero_())], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([inputs[:, 1:], Variable(inputs.data.new(batch_size, 1).zero_())], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "chuck",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[:, 1:], Variable(inputs.data.new(batch_size, 1).zero_())]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/hg_api/interactive.py": {
        "torch": {
            "Tensor_16": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_18": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/hg_api/interactive_eval.py": {
        "torch": {
            "Tensor_16": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_17": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_17": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_18": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_26": {
                "variable": {
                    "value": "predicted_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_probability",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.softmax(outputs[0], dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "predicted_probability.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_25": {
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/res_encoder.py": {
        "torch": {
            "Embedding_32": {
                "variable": {
                    "value": "self.Embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "v_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embd_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_35": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embd_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "h_size[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_38": {
                "variable": {
                    "value": "self.lstm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embd_dim + h_size[0] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "h_size[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_41": {
                "variable": {
                    "value": "self.lstm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embd_dim + h_size[0] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "h_size[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.mlp_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_size[2] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.mlp_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "batch_l_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "s1_layer2_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding_1, s1_layer1_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "s1_layer3_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding_1, s1_layer1_out + s1_layer2_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s1_layer3_maxout]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_131": {
                "variable": {
                    "value": "self.Embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "v_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embd_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.mlp_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embd_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.mlp_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_d",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "batch_l_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s1_layer3_maxout]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.mlp_1, nn.ReLU(), nn.Dropout(dropout_r), self.sm]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.mlp_1, nn.ReLU(), nn.Dropout(dropout_r), self.sm]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.mlp_1, nn.ReLU(), nn.Dropout(dropout_r), self.mlp_2, nn.ReLU(), nn.Dropout(dropout_r), self.sm]",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_118": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_121": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.mlp_1, nn.ReLU(), nn.Dropout(dropout_r), self.mlp_2, nn.ReLU(), nn.Dropout(dropout_r), self.sm]",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_183": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_186": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "p": {
                    "value": "dropout_r",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "p": {
                    "value": "dropout_r",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "p": {
                    "value": "dropout_r",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "p": {
                    "value": "dropout_r",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_143": {
                "p": {
                    "value": "dropout_r",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "p": {
                    "value": "dropout_r",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/nli/evaluation.py": {
        "torch": {
            "load_78": {
                "f": {
                    "value": "model_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.model_checkpoint_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_device_124": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/nli/inference_debug.py": {
        "torch": {
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "model_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.PRO_ROOT / 'saved_models/06-29-23:09:03_albert-xxlarge|snli+mnli+fnli+r1*10+r2*20+r3*10|nli/checkpoints/e(0)|i(16000)|snli_dev#(0.9246)|mnli_m_dev#(0.8948)|mnli_mm_dev#(0.8932)|anli_r1_dev#(0.733)|anli_r1_test#(0.711)|anli_r2_dev#(0.571)|anli_r2_test#(0.57)|anli_r3_dev#(0.5817)|anli_r3_test#(0.5375)/model.pt'",
                            "BinOp"
                        ],
                        [
                            "model_checkpoint_path",
                            "Name"
                        ]
                    ]
                }
            },
            "set_device_145": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_66": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/nli/inspection_tools.py": {
        "torch": {
            "norm_19": {
                "input": {
                    "value": "attributions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attributions.sum(dim=-1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "attributions / torch.norm(attributions)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nli/training.py": {
        "torch": {
            "SequentialSampler_245": {
                "variable": {
                    "value": "d_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "d_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(d_list, data_transformer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_246": {
                "variable": {
                    "value": "d_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "d_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(d_list, data_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_per_gpu_eval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.per_gpu_eval_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "d_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(d_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "BaseBatchBuilder(batching_schema)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_193": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_584": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_class_item['sequence_classification'].from_pretrained(model_name, cache_dir=str(config.PRO_ROOT / 'trans_cache'), num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SequentialSampler_646": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(training_list, data_transformer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_652": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(training_list, data_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_per_gpu_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.per_gpu_train_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_dataset, args.world_size, args.global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "BaseBatchBuilder(batching_schema)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_548": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_649": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(training_list, data_transformer)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "args.global_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_863": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_571": {
                "f": {
                    "value": "str(Path(args.resume_path) / 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_572": {
                "f": {
                    "value": "str(Path(args.resume_path) / 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_573": {
                "f": {
                    "value": "str(Path(args.resume_path) / 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_797": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_798": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_799": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_571": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_572": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_573": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__704": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__706": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_744": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_745": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_746": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_881": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/nli/training_extra.py": {
        "torch": {
            "SequentialSampler_268": {
                "variable": {
                    "value": "d_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "d_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(d_list, data_transformer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "d_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "d_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(d_list, data_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_per_gpu_eval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.per_gpu_eval_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "d_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(d_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "BaseBatchBuilder(batching_schema)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_216": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_580": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if not any((nd in n for nd in no_decay))], 'weight_decay': args.weight_decay}, {'params': [p for (n, p) in model.named_parameters() if any((nd in n for nd in no_decay))], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_591": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ResEncoder(v_size=embedding.weight.size(0), embd_dim=embedding.weight.size(1))",
                            "Call"
                        ],
                        [
                            "BagOfWords(v_size=embedding.weight.size(0), embd_dim=embedding.weight.size(1))",
                            "Call"
                        ],
                        [
                            "model_class_item['sequence_classification'].from_pretrained(model_name, cache_dir=str(config.PRO_ROOT / 'trans_cache'), num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SequentialSampler_643": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(training_list, data_transformer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_649": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(training_list, data_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_per_gpu_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.per_gpu_train_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_dataset, args.world_size, args.global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "BaseBatchBuilder(batching_schema)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_562": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_646": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NLIDataset(training_list, data_transformer)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "args.global_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_849": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_786": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_787": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_788": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__698": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__700": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_738": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_739": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_740": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_867": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}