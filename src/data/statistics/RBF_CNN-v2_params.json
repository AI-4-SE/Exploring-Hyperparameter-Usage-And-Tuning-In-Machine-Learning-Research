{
    "cifar10/rbf_training.py": {
        "tensorflow": {
            "Session_5": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, _s, _s, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "tf_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "tf_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([w, h, c, nb_filter], mean=0.5, stddev=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "tf_covs",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([nb_filter], mean=0.5, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_43": {
                "variable": {
                    "value": "tf_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(3, 3, ch, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, _s, _s, ch])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "tf_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([w, h, c, nb_filter], mean=0.5, stddev=0.2))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_45": {
                "variable": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, _s, _s, ch])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [batch_size, _s, _s, ch])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf_x, tf_x, name=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tensor2, tf_ones, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "tf_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((3, 3, ch, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_47": {
                "variable": {
                    "value": "tensor3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([w, h, c, nb_filter], mean=0.5, stddev=0.2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([w, h, c, nb_filter], mean=0.5, stddev=0.2))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "variable": {
                    "value": "tensor3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf_mean, tf_mean, name=None)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor3, [0, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_56": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "tf_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_59": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "tf.reduce_max(out, axis=[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_53": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(tf_covs) + 1e-25) - tf_covs * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_50": {
                "x": {
                    "value": "tf_covs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([nb_filter], mean=0.5, stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar10/tf_agumentation.py": {
        "tensorflow": {
            "warning_1031": {
                "msg": {
                    "value": "Expected input to be images (as Numpy array) following the data format convention \" + self.data_format + \" (channels on axis  + str(self.channel_axis) + ), i.e. expected either 1, 3 or 4 channels on axis  + str(self.channel_axis) + . However, it was passed an array with shape  + str(x.shape) +  ( + str(x.shape[self.channel_axis]) +  channels).",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "warning_1230": {
                "msg": {
                    "value": "NumpyArrayIterator is set to use the data format convention \" + data_format + \" (channels on axis  + str(channels_axis) + ), i.e. expected either 1, 3 or 4 channels on axis  + str(channels_axis) + . However, it was passed an array with shape  + str(self.x.shape) +  ( + str(self.x.shape[channels_axis]) +  channels).",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "warning_683": {
                "msg": {
                    "value": "This ImageDataGenerator specifies `zca_whitening`, which overrides setting of `featurewise_center`.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_688": {
                "msg": {
                    "value": "This ImageDataGenerator specifies `zca_whitening` which overrides setting of`featurewise_std_normalization`.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_695": {
                "msg": {
                    "value": "This ImageDataGenerator specifies `featurewise_std_normalization`, which overrides setting of `featurewise_center`.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_702": {
                "msg": {
                    "value": "This ImageDataGenerator specifies `samplewise_std_normalization`, which overrides setting of `samplewise_center`.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_869": {
                "msg": {
                    "value": "\"This ImageDataGenerator specifies `featurewise_center`, but it hasn't been fit on any training data. Fit it first by calling `.fit(numpy_data)`.\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_877": {
                "msg": {
                    "value": "\"This ImageDataGenerator specifies `featurewise_std_normalization`, but it hasn't been fit on any training data. Fit it first by calling `.fit(numpy_data)`.\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_887": {
                "msg": {
                    "value": "\"This ImageDataGenerator specifies `zca_whitening`, but it hasn't been fit on any training data. Fit it first by calling `.fit(numpy_data)`.\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_1312": {
                "msg": {
                    "value": "\"Using '.tiff' files with multiple bands will cause distortion. Please verify your output.\"",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/train_rCNN+.py": {
        "tensorflow": {
            "ones_37": {
                "variable": {
                    "value": "tf_inp_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, _shape - 2, _shape - 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "tf_ones_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(3, 3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_transpose_39": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_inp_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((1, _shape - 2, _shape - 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "tf_ones_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((3, 3, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[1, _shape, _shape, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_40": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "out * 25",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_51": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_transpose_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(layerDir + 'mean3x3.npy')",
                            "Call"
                        ],
                        [
                            "means.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(tf_x)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(3, 0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "tf_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(3, 3, ch, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_62": {
                "variable": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(layerDir + 'mean3x3.npy')",
                            "Call"
                        ],
                        [
                            "means.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_63": {
                "variable": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "variable": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf_x, tf_x, name=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tensor2, tf_ones, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "tf_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((3, 3, ch, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_65": {
                "variable": {
                    "value": "tensor3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(layerDir + 'mean3x3.npy')",
                            "Call"
                        ],
                        [
                            "means.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(layerDir + 'mean3x3.npy')",
                            "Call"
                        ],
                        [
                            "means.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "tensor3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(means, means, name=None)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor3, [0, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_255": {
                "variable": {
                    "value": "ceLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_259": {
                "variable": {
                    "value": "smoothLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "uni_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(correct) * 0.01",
                            "BinOp"
                        ]
                    ]
                },
                "logits": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_random_seed_268": {
                "seed": {
                    "value": "6789",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_50": {
                "input": {
                    "value": "tf.reduce_sum(out, [3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_258": {
                "input": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_68": {
                "x": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/train_rCNN.py": {
        "tensorflow": {
            "ones_37": {
                "variable": {
                    "value": "tf_inp_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, _shape - 2, _shape - 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "tf_ones_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(3, 3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_transpose_39": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_inp_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((1, _shape - 2, _shape - 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "tf_ones_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((3, 3, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[1, _shape, _shape, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_40": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "out * 25",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_51": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_transpose_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(layerDir + 'mean3x3.npy')",
                            "Call"
                        ],
                        [
                            "means.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(tf_x)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(3, 0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "tf_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(3, 3, ch, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_62": {
                "variable": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(layerDir + 'mean3x3.npy')",
                            "Call"
                        ],
                        [
                            "means.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_63": {
                "variable": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "variable": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf_x, tf_x, name=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tensor2, tf_ones, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "tf_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((3, 3, ch, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_65": {
                "variable": {
                    "value": "tensor3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(layerDir + 'mean3x3.npy')",
                            "Call"
                        ],
                        [
                            "means.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(layerDir + 'mean3x3.npy')",
                            "Call"
                        ],
                        [
                            "means.astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "tensor3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(means, means, name=None)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor3, [0, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_241": {
                "variable": {
                    "value": "ceLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_245": {
                "variable": {
                    "value": "smoothLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "uni_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(correct) * 0.01",
                            "BinOp"
                        ]
                    ]
                },
                "logits": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_random_seed_254": {
                "seed": {
                    "value": "6789",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_50": {
                "input": {
                    "value": "tf.reduce_sum(out, [3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_244": {
                "input": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(2.0, out * 25)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out) + 1e-10",
                            "BinOp"
                        ],
                        [
                            "out / tf.expand_dims(tf.reduce_sum(out, [3]), axis=-1)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_transpose(out, means, output_shape=input_shape, strides=(1, 1, 1, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, (1, 2, 3, 0))",
                            "Call"
                        ],
                        [
                            "out / tf_divider",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(out, (3, 0, 1, 2))",
                            "Call"
                        ],
                        [
                            "2 * tensor1 - tensor2 - tensor3",
                            "BinOp"
                        ],
                        [
                            "out / (2 * tf.exp(covs) + 1e-25) - covs * 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_68": {
                "x": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}