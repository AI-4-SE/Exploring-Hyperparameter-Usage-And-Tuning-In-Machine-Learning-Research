{
    "baselines.py": {
        "torch": {
            "interpolate_406": {
                "variable": {
                    "value": "x_downsampled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.interpolate(data, ds_img_size, mode='bilinear', align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "original_img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(data.size()[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_409": {
                "variable": {
                    "value": "x_upsampled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.synthetic_upsample_size, args.synthetic_upsample_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_120": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_210": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_213": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_705": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "BWtoRGB()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_712": {
                "variable": {
                    "value": "proj",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm1d(self.latent_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_763": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.restore",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_122": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout2d_143": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout2d_208": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_407": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "ds_img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple((int(i) for i in np.asarray(original_img_size) // args.downsample_scale))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_620": {
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiBatchModule(loader.output_size, checkpoint=args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model.half() if args.half is True else model",
                            "IfExp"
                        ],
                        [
                            "model.cuda() if args.cuda is True else model",
                            "IfExp"
                        ],
                        [
                            "nn.DataParallel(model) if args.ngpu > 1 else model",
                            "IfExp"
                        ],
                        [
                            "torch.load(args.restore)",
                            "Call"
                        ],
                        [
                            "nn.Sequential(BWtoRGB(), nn.Upsample(size=[224, 224], mode='bilinear', align_corners=True), model_map[args.baseline](num_classes=self.latent_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "[x, x, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "chan_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if len(x.shape) == 4 else 2",
                            "IfExp"
                        ]
                    ]
                }
            },
            "SGD_317": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "memory_allocated_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_519": {
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_585": {
                "variable": {
                    "value": "patches_fold_H",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patches_fold_H, img[:, :, -patch_H:].permute(0, 1, 3, 2).unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_592": {
                "variable": {
                    "value": "patches_fold_HW",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patches_fold_HW, patches_fold_H[:, :, :, -patch_W:, :].permute(0, 1, 2, 4, 3).unsqueeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_707": {
                "size": {
                    "value": "[224, 224]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_713": {
                "num_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_714": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_715": {
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_716": {
                "num_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_717": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_718": {
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_523": {
                "tensors": {
                    "value": "[F.interpolate(img[:, i, :, :, :], (32, 32), mode='bilinear', align_corners=True) for i in range(img.shape[1])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "detect_anomaly_463": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_470": {
                "input": {
                    "value": "loss_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(data_to_infer)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_475": {
                "input": {
                    "value": "loss_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(data_to_infer)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__493": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_523": {
                "input": {
                    "value": "img[:, i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "interpolate_285": {
                "variable": {
                    "value": "x_downsampled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.interpolate(data, ds_img_size, mode='bilinear', align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "original_img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(data.size()[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_288": {
                "variable": {
                    "value": "x_upsampled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.synthetic_upsample_size, args.synthetic_upsample_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_170": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_172": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_286": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "ds_img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple((int(i) for i in np.asarray(original_img_size) // args.downsample_scale))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_526": {
                "variable": {
                    "value": "gen_map[samples{}_imgs.format(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_193": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "memory_allocated_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_443": {
                "input": {
                    "value": "torchvision.transforms.ToTensor()(x).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.synthetic_upsample_size, args.synthetic_upsample_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_443": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_352": {
                "input": {
                    "value": "output_map['preds']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_value__371": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/image_state_projector.py": {
        "torch": {
            "DataParallel_33": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_34": {
                "variable": {
                    "value": "self.state_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.state_proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "state_projector",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._get_dense(name='state_proj')(state_input_size, state_output_size, normalization_str=self.config['dense_normalization'], activation_fn=str_to_activ_module(self.config['activation']))",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state, conv_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/localized_spatial_transformer.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "crops",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pool_tabulated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pool(crop_lambdas, theta_np, override=override)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_129": {
                "variable": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(base_grid[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_131": {
                "variable": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(base_grid[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_191": {
                "variable": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "base_grid_x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_194": {
                "variable": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "base_grid_y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "bmm_204": {
                "variable": {
                    "value": "grad_x_small",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(base_grid_x)",
                            "Call"
                        ],
                        [
                            "grad_x.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(base_grid[1]), 1 - torch.abs(theta[:, 2].unsqueeze(1) - base_grid[1])).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_205": {
                "variable": {
                    "value": "grad_y_small",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(base_grid[0]), 1 - torch.abs(theta[:, 1].unsqueeze(1) - base_grid[0])).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(base_grid_y)",
                            "Call"
                        ],
                        [
                            "grad_y.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_235": {
                "variable": {
                    "value": "grad_y_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_y_final",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_grid * (crops * grad_y_upsampled)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_y_final, (1, 2, 3)).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_235": {
                "variable": {
                    "value": "grad_y_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_236": {
                "variable": {
                    "value": "grad_x_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_x_final",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_grid * (crops * grad_x_upsampled)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_x_final, (1, 2, 3)).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_236": {
                "variable": {
                    "value": "grad_x_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_237": {
                "variable": {
                    "value": "grad_s_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_x_final",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_grid * (crops * grad_x_upsampled)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_x_final, (1, 2, 3)).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_240": {
                "variable": {
                    "value": "grad_theta",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad_s_final, grad_x_final, grad_y_final]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_268": {
                "input": {
                    "value": "clamp_map[self.config['reparam_type']](theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_125": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "linspace_126": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_177": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "input": {
                    "value": "base_grid[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "input": {
                    "value": "base_grid[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_130": {
                "input": {
                    "value": "theta[:, 1].unsqueeze(1) - base_grid[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_132": {
                "input": {
                    "value": "theta[:, 2].unsqueeze(1) - base_grid[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_177": {
                "input": {
                    "value": "tensor[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/localized_spatial_transformer2.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "crops",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pool_tabulated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pool(crop_lambdas, theta_np, override=override)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "grid_concat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_grid[0].unsqueeze(2), base_grid[1].unsqueeze(2), torch.ones_like(base_grid[1]).unsqueeze(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_141": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([base_grid[0].unsqueeze(2), base_grid[1].unsqueeze(2), torch.ones_like(base_grid[1]).unsqueeze(2)], 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "theta_inv.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_143": {
                "variable": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(grid[:, :, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(grid[:, :, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_194": {
                "variable": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_197": {
                "variable": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_207": {
                "variable": {
                    "value": "grad_x_small",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(grid[:, :, 0])",
                            "Call"
                        ],
                        [
                            "grad_x.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(grid[:, :, 1]), 1 - torch.abs(theta[:, 2].unsqueeze(1) - grid[:, :, 1])).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_207": {
                "variable": {
                    "value": "grad_x_small",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_208": {
                "variable": {
                    "value": "grad_y_small",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(grid[:, :, 0]), 1 - torch.abs(theta[:, 1].unsqueeze(1) - grid[:, :, 0])).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(grid[:, :, 1])",
                            "Call"
                        ],
                        [
                            "grad_y.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_208": {
                "variable": {
                    "value": "grad_y_small",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_237": {
                "variable": {
                    "value": "grad_y_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_y_final",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_grid * (crops * grad_y_upsampled)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_y_final, (1, 2, 3)).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_237": {
                "variable": {
                    "value": "grad_y_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_238": {
                "variable": {
                    "value": "grad_x_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_x_final",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_grid * (crops * grad_x_upsampled)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_x_final, (1, 2, 3)).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_238": {
                "variable": {
                    "value": "grad_x_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_239": {
                "variable": {
                    "value": "grad_s_final",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_x_final",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_grid * (crops * grad_x_upsampled)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_x_final, (1, 2, 3)).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_242": {
                "variable": {
                    "value": "grad_theta",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad_s_final, grad_x_final, grad_y_final]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_254": {
                "variable": {
                    "value": "p_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "p_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(LocalizedSpatialTransformerFn.ng_ones([1, 1]).type_as(z_where).expand(n, 1), -z_where[:, 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_281": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_where[:, 0:1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(LocalizedSpatialTransformerFn.ng_zeros([1, 1]).type_as(z_where).expand(n, 1), z_where)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_306": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((LocalizedSpatialTransformerFn.ng_ones([1, 1]).type_as(z_where).expand(n, 1), -z_where[:, 1:]), 1)",
                            "Call"
                        ],
                        [
                            "out / scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat((LocalizedSpatialTransformerFn.ng_zeros([1, 1]).type_as(z_where).expand(n, 1), z_where), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(out, 1, ix)",
                            "Call"
                        ],
                        [
                            "out.view(n, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "ix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(expansion_indices)",
                            "Call"
                        ],
                        [
                            "ix.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_361": {
                "input": {
                    "value": "clamp_map[self.config['reparam_type']](theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_127": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "linspace_128": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "abs_281": {
                "input": {
                    "value": "z_where[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_283": {
                "input": {
                    "value": "scale == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "unsqueeze_333": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_137": {
                "input": {
                    "value": "base_grid[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_137": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_143": {
                "input": {
                    "value": "grid[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "input": {
                    "value": "grid[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_144": {
                "input": {
                    "value": "theta[:, 1].unsqueeze(1) - grid[:, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_146": {
                "input": {
                    "value": "theta[:, 2].unsqueeze(1) - grid[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_333": {
                "input": {
                    "value": "tensor[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/localized_spatial_transformer3.py": {
        "torch": {
            "affine_grid_21": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LocalizedSpatialTransformerFn.expand_z_where(LocalizedSpatialTransformerFn.z_where_inv(theta, clip_scale=max_scale))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size(window_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "top_left",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid[:, 0, 0, 0].unsqueeze(1), grid[:, 0, 0, 1].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "bottom_right",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid[:, -1, -1, 0].unsqueeze(1), grid[:, -1, -1, 1].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "crops",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pool_tabulated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pool(crop_lambdas, top_left, bottom_right, override=override)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_115": {
                "variable": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_123": {
                "variable": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(base_grid[:, :, :, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_125": {
                "variable": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(base_grid[:, :, :, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_130": {
                "variable": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(grid[:, :, :, 0])",
                            "Call"
                        ],
                        [
                            "torch.bmm(grad_x, m_y).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "grad_grid * (crops * grad_x)",
                            "BinOp"
                        ],
                        [
                            "grad_x.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(base_grid[:, :, :, 1]), 1 - torch.abs(grid[:, :, :, 1] - base_grid[:, :, :, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_132": {
                "variable": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(grid[:, :, :, 1])",
                            "Call"
                        ],
                        [
                            "torch.bmm(grad_y, m_x).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "grad_grid * (crops * grad_y)",
                            "BinOp"
                        ],
                        [
                            "grad_y.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(base_grid[:, :, :, 0]), 1 - torch.abs(grid[:, :, :, 0] - base_grid[:, :, :, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_132": {
                "variable": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "final_grads",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad_x.unsqueeze(-1), grad_y.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_154": {
                "variable": {
                    "value": "p_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "p_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(LocalizedSpatialTransformerFn.ng_ones([1, 1]).type_as(z_where).expand(n, 1), -z_where[:, 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_181": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_where[:, 0:1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(LocalizedSpatialTransformerFn.ng_zeros([1, 1]).type_as(z_where).expand(n, 1), z_where)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_206": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((LocalizedSpatialTransformerFn.ng_ones([1, 1]).type_as(z_where).expand(n, 1), -z_where[:, 1:]), 1)",
                            "Call"
                        ],
                        [
                            "out / scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat((LocalizedSpatialTransformerFn.ng_zeros([1, 1]).type_as(z_where).expand(n, 1), z_where), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(out, 1, ix)",
                            "Call"
                        ],
                        [
                            "out.view(n, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "ix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(expansion_indices)",
                            "Call"
                        ],
                        [
                            "ix.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_261": {
                "input": {
                    "value": "clamp_map[self.config['reparam_type']](theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "[gx.unsqueeze(-1), gy.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_110": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "input": {
                    "value": "base_grid[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_125": {
                "input": {
                    "value": "base_grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_181": {
                "input": {
                    "value": "z_where[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "scale == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "unsqueeze_233": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_124": {
                "input": {
                    "value": "grid[:, :, :, 0] - base_grid[:, :, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_126": {
                "input": {
                    "value": "grid[:, :, :, 1] - base_grid[:, :, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_111": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "pad_233": {
                "input": {
                    "value": "tensor[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/localized_spatial_transformer4.py": {
        "torch": {
            "affine_grid_24": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LocalizedSpatialTransformerFn.expand_z_where(LocalizedSpatialTransformerFn.z_where_inv(theta, clip_scale=max_scale))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size(window_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "top_left",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid[:, 0, 0, 0].unsqueeze(1), grid[:, 0, 0, 1].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "bottom_right",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid[:, -1, -1, 0].unsqueeze(1), grid[:, -1, -1, 1].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "crops",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pool_tabulated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pool(crop_lambdas, top_left_np, bottom_right_np, override=override)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_165": {
                "variable": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(base_grid[:, :, :, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_167": {
                "variable": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(base_grid[:, :, :, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_172": {
                "variable": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(grid[:, :, :, 0])",
                            "Call"
                        ],
                        [
                            "torch.bmm(grad_x, m_y).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "LocalizedSpatialTransformerFn._crop_resize(grad_x, top_left, bottom_right, W, H)",
                            "Call"
                        ],
                        [
                            "grad_grid * (crops * grad_x)",
                            "BinOp"
                        ],
                        [
                            "grad_x.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "m_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(base_grid[:, :, :, 1]), 1 - torch.abs(grid[:, :, :, 1] - base_grid[:, :, :, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_172": {
                "variable": {
                    "value": "grad_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_173": {
                "variable": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "m_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(base_grid[:, :, :, 0]), 1 - torch.abs(grid[:, :, :, 0] - base_grid[:, :, :, 0]))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(grid[:, :, :, 1])",
                            "Call"
                        ],
                        [
                            "torch.bmm(m_x, grad_y).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "LocalizedSpatialTransformerFn._crop_resize(grad_y, top_left, bottom_right, W, H)",
                            "Call"
                        ],
                        [
                            "grad_grid * (crops * grad_y)",
                            "BinOp"
                        ],
                        [
                            "grad_y.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_173": {
                "variable": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "final_grads",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad_x.unsqueeze(-1), grad_y.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "p_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "p_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(LocalizedSpatialTransformerFn.ng_ones([1, 1]).type_as(z_where).expand(n, 1), -z_where[:, 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_227": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_where[:, 0:1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(LocalizedSpatialTransformerFn.ng_zeros([1, 1]).type_as(z_where).expand(n, 1), z_where)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_252": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((LocalizedSpatialTransformerFn.ng_ones([1, 1]).type_as(z_where).expand(n, 1), -z_where[:, 1:]), 1)",
                            "Call"
                        ],
                        [
                            "out / scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat((LocalizedSpatialTransformerFn.ng_zeros([1, 1]).type_as(z_where).expand(n, 1), z_where), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(out, 1, ix)",
                            "Call"
                        ],
                        [
                            "out.view(n, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "ix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(expansion_indices)",
                            "Call"
                        ],
                        [
                            "ix.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_119": {
                "variable": {
                    "value": "base_grid[i, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "nw_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(scale(nw[0].item(), 0, W - 1, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "se_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(scale(se[0].item(), 0, W - 1, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "linspace_120": {
                "variable": {
                    "value": "base_grid[i, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "nw_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(scale(nw[1].item(), 0, H - 1, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "se_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(scale(se[1].item(), 0, H - 1, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "[F.interpolate(mv.unsqueeze(0), size=(W, H), mode='bilinear') for mv in matrix]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_307": {
                "input": {
                    "value": "clamp_map[self.config['reparam_type']](theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[gx.unsqueeze(-1), gy.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_165": {
                "input": {
                    "value": "base_grid[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_167": {
                "input": {
                    "value": "base_grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_227": {
                "input": {
                    "value": "z_where[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_229": {
                "input": {
                    "value": "scale == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "unsqueeze_279": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "input": {
                    "value": "mv.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(W, H)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_166": {
                "input": {
                    "value": "grid[:, :, :, 0] - base_grid[:, :, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_168": {
                "input": {
                    "value": "grid[:, :, :, 1] - base_grid[:, :, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_279": {
                "input": {
                    "value": "tensor[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/numerical_diff_autograd.py": {
        "torch": {
            "interpolate_102": {
                "variable": {
                    "value": "fs_m_h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fs_m_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crops[:, :, cw_b + delta:cw_e - delta, ch_b + delta:ch_e - delta]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(fs_m_h, size=(window_size, window_size), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(window_size, window_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_103": {
                "variable": {
                    "value": "fs_p_h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fs_p_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crops[:, :, cw_b - delta:cw_e + delta, ch_b - delta:ch_e + delta]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(fs_p_h, size=(window_size, window_size), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(window_size, window_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dfs.unsqueeze(1), dfx.unsqueeze(1), dfy.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[NumDiffAutoGradFn._numerical_grads(crops_perturbed, window_size, k + 1).unsqueeze(0) for k in range(0, delta)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([NumDiffAutoGradFn._numerical_grads(crops_perturbed, window_size, k + 1).unsqueeze(0) for k in range(0, delta)], 0)",
                            "Call"
                        ],
                        [
                            "torch.mean(z_grad, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(grad_output.unsqueeze(1), z_grad)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(torch.mean(z_grad, -1), -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([NumDiffAutoGradFn._numerical_grads(crops_perturbed, window_size, k + 1).unsqueeze(0) for k in range(0, delta)], 0)",
                            "Call"
                        ],
                        [
                            "torch.mean(z_grad, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(grad_output.unsqueeze(1), z_grad)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(torch.mean(z_grad, -1), -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_137": {
                "input": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([NumDiffAutoGradFn._numerical_grads(crops_perturbed, window_size, k + 1).unsqueeze(0) for k in range(0, delta)], 0)",
                            "Call"
                        ],
                        [
                            "torch.mean(z_grad, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(grad_output.unsqueeze(1), z_grad)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(torch.mean(z_grad, -1), -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/numerical_diff_autograd_v2.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "dfx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.conv2d(crops[:, i, :, :].unsqueeze(1), weight=sobel_x, stride=1, padding=1) for i in range(crops.size(1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "dfy",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.conv2d(crops[:, i, :, :].unsqueeze(1), weight=sobel_y, stride=1, padding=1) for i in range(crops.size(1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_66": {
                "variable": {
                    "value": "fs_m_h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fs_m_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crops[:, :, cw_b + delta:cw_e - delta, ch_b + delta:ch_e - delta]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(fs_m_h, size=(window_size, window_size), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(window_size, window_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_68": {
                "variable": {
                    "value": "fs_p_h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fs_p_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crops[:, :, cw_b - delta:cw_e + delta, ch_b - delta:ch_e + delta]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(fs_p_h, size=(window_size, window_size), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(window_size, window_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dfs.unsqueeze(1), dfx.unsqueeze(1), dfy.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[NumDiffAutoGradFn._numerical_grads(crops_perturbed, sobel_x, sobel_y, window_size, k + 1).unsqueeze(0) for k in range(0, delta)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_98": {
                "variable": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([NumDiffAutoGradFn._numerical_grads(crops_perturbed, sobel_x, sobel_y, window_size, k + 1).unsqueeze(0) for k in range(0, delta)], 0)",
                            "Call"
                        ],
                        [
                            "torch.mean(z_grad, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(grad_output.unsqueeze(1), z_grad)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(torch.mean(z_grad, -1), -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([NumDiffAutoGradFn._numerical_grads(crops_perturbed, sobel_x, sobel_y, window_size, k + 1).unsqueeze(0) for k in range(0, delta)], 0)",
                            "Call"
                        ],
                        [
                            "torch.mean(z_grad, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(grad_output.unsqueeze(1), z_grad)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(torch.mean(z_grad, -1), -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_100": {
                "input": {
                    "value": "z_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([NumDiffAutoGradFn._numerical_grads(crops_perturbed, sobel_x, sobel_y, window_size, k + 1).unsqueeze(0) for k in range(0, delta)], 0)",
                            "Call"
                        ],
                        [
                            "torch.mean(z_grad, 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(grad_output.unsqueeze(1), z_grad)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.mean(torch.mean(z_grad, -1), -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "input": {
                    "value": "crops[:, i, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "sobel_x",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "input": {
                    "value": "crops[:, i, :, :].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "sobel_y",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/numerical_diff_module.py": {
        "torch": {
            "from_numpy_21": {
                "variable": {
                    "value": "self.sobel_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_21": {
                "variable": {
                    "value": "self.sobel_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "self.sobel_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_23": {
                "variable": {
                    "value": "self.sobel_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/pool.py": {
        "torch": {
            "ModuleList_177": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_178": {
                "variable": {
                    "value": "self.project_to_class_models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.project_to_class_models",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_184": {
                "variable": {
                    "value": "base_model",
                    "type": "Name",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_size, input_size), nn.Linear(input_size, input_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "linear",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, self.output_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_48": {
                "variable": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.squeeze(target)",
                            "Call"
                        ],
                        [
                            "target == i",
                            "Compare"
                        ],
                        [
                            "target.type(long_type(args.cuda))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target)",
                            "Call"
                        ],
                        [
                            "target == i",
                            "Compare"
                        ],
                        [
                            "target.type(long_type(args.cuda))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_195": {
                "variable": {
                    "value": "base_model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "base_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.ModuleList([nn.Linear(input_size, input_size), nn.Linear(input_size, input_size)])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(base_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_196": {
                "variable": {
                    "value": "linear",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "linear",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Sequential(nn.Linear(input_size, self.output_size))",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(linear)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_250": {
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.squeeze(target)",
                            "Call"
                        ],
                        [
                            "target == i",
                            "Compare"
                        ],
                        [
                            "target.type(long_type(args.cuda))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target)",
                            "Call"
                        ],
                        [
                            "target == i",
                            "Compare"
                        ],
                        [
                            "target.type(long_type(args.cuda))",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_260": {
                "modules": {
                    "value": "single_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "vector_to_parameters_265": {
                "vec": {
                    "value": "nn.utils.parameters_to_vector(single_model.parameters()) * 0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parameters": {
                    "value": "single_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.squeeze(target)",
                            "Call"
                        ],
                        [
                            "target == i",
                            "Compare"
                        ],
                        [
                            "target.type(long_type(args.cuda))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target)",
                            "Call"
                        ],
                        [
                            "target == i",
                            "Compare"
                        ],
                        [
                            "target.type(long_type(args.cuda))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_191": {
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.prod(self.input_shape))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('.models', self.get_name() + '.th')",
                            "Call"
                        ],
                        [
                            "os.path.join('.models', self.get_name() + '.th')",
                            "Call"
                        ]
                    ]
                }
            },
            "parameters_to_vector_272": {
                "variable": {
                    "value": "single_model_single_layer_params",
                    "type": "Name",
                    "possible_values": []
                },
                "parameters": {
                    "value": "single_model[j].parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parameters_to_vector_273": {
                "variable": {
                    "value": "layer_params",
                    "type": "Name",
                    "possible_values": []
                },
                "parameters": {
                    "value": "layer.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.prod(self.input_shape))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.prod(self.input_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_186": {
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.prod(self.input_shape))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.prod(self.input_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "parameters_to_vector_265": {
                "parameters": {
                    "value": "single_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vector_to_parameters_275": {
                "vec": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "single_model_single_layer_params + single_soft_cat[j, i] * layer_params",
                            "BinOp"
                        ]
                    ]
                },
                "parameters": {
                    "value": "single_model[j].parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_210": {
                "f": {
                    "value": "model_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('.models', self.get_name() + '.th')",
                            "Call"
                        ],
                        [
                            "os.path.join('.models', self.get_name() + '.th')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/relational_network.py": {
        "torch": {
            "mean_64": {
                "variable": {
                    "value": "rn_buffer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(rn_buffer, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.img_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "builder_fn(input_size, self.hidden_size, normalization_str=self.config['normalization'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "build_dense_encoder(self.hidden_size * 2, self.hidden_size, normalization_str='batchnorm')",
                    "type": null,
                    "possible_values": []
                }
            },
            "SELU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "rn_buffer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.rn(torch.cat([img_r, img_l], -1)).unsqueeze(0) for img_r in conv_output for img_l in conv_output]",
                            "ListComp"
                        ],
                        [
                            "torch.mean(torch.cat(rn_buffer, 0), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SELU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[img_r, img_l]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/saccade.py": {
        "torch": {
            "DataParallel_64": {
                "variable": {
                    "value": "self.spatial_transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.spatial_transformer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "variable": {
                    "value": "act_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_fn(input=output_map['preds'], target=labels, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.sum(pred_loss, -1) if len(pred_loss.shape) > 1 else pred_loss",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mean_182": {
                "variable": {
                    "value": "vae_loss_map[act_loss_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "act_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(pred_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_183": {
                "variable": {
                    "value": "vae_loss_map[pred_loss_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_fn(input=output_map['preds'], target=labels, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.sum(pred_loss, -1) if len(pred_loss.shape) > 1 else pred_loss",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mean_184": {
                "variable": {
                    "value": "vae_loss_map[loss_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "vae_loss_map['loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_129": {
                "variable": {
                    "value": "imgs_map[softcrop{}_imgs.format(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "crop",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "crop_resize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_131": {
                "variable": {
                    "value": "imgs_map[decoded{}_imgs.format(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vae.nll_activation(decoded)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "decode_resize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_139": {
                "variable": {
                    "value": "imgs_map[hardcrop{}_imgs.format(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "crop_true",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "crop_resize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_141": {
                "variable": {
                    "value": "imgs_map[inlay{}_imgs.format(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inlay",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "decode_resize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_204": {
                "input": {
                    "value": "clamp_map[self.config['reparam_type']](z)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "*args": {
                    "value": "self._get_dense('posterior_to_st_proj')(self.vae.reparameterizer.output_size, 3, normalization_str=self.config['dense_normalization'], activation_fn=str_to_activ_module(self.config['activation']))",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "self",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('.models', self.get_name() + '.th')",
                            "Call"
                        ],
                        [
                            "os.path.join('.models', self.get_name() + '.th')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_100": {
                "obj": {
                    "value": "self",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(model_filename)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('.models', self.get_name() + '.th')",
                            "Call"
                        ],
                        [
                            "os.path.join('.models', self.get_name() + '.th')",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_107": {
                "variable": {
                    "value": "return_map[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "resize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(128",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(np.array([[1.0, 0.0, 0.0]]), (batch_size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "return_map[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "original_full_img",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "resize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(128",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_165": {
                "input": {
                    "value": "pred_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_fn(input=output_map['preds'], target=labels, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.sum(pred_loss, -1) if len(pred_loss.shape) > 1 else pred_loss",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_276": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vae.memory.get_state()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_308": {
                "tensors": {
                    "value": "x_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "zeros((batch_size, self.config['latent_size']), cuda=x_related.is_cuda, dtype=get_dtype(x_related)).requires_grad_()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x_preds, -1) if self.config['concat_prediction_size'] > 0 else x_preds",
                            "IfExp"
                        ],
                        [
                            "x_preds + state_proj[:, 0:-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/spatial_transformer.py": {
        "torch": {
            "ones_29": {
                "variable": {
                    "value": "p_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "p_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SpatialTransformer.ng_zeros([1, 1]).type_as(z_where).expand(n, 1), z_where)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_56": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((SpatialTransformer.ng_zeros([1, 1]).type_as(z_where).expand(n, 1), z_where), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(out, 1, ix)",
                            "Call"
                        ],
                        [
                            "out.view(n, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat((SpatialTransformer.ng_ones([1, 1]).type_as(z_where).expand(n, 1), -z_where[:, 1:]), 1)",
                            "Call"
                        ],
                        [
                            "out / scale",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(windows.view(n, 1, window_size, window_size), grid)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(images_trunc.view(n, *image_size), grid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "ix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(expansion_indices)",
                            "Call"
                        ],
                        [
                            "ix.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SpatialTransformer.ng_ones([1, 1]).type_as(z_where).expand(n, 1), -z_where[:, 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_72": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_where[:, 0:1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_89": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SpatialTransformer.expand_z_where(z_where)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((n, 1, image_size, image_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_90": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "windows.view(n, 1, window_size, window_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((n, 1, image_size, image_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta_inv_trunc, torch.Size((n, chans, window_size, window_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "affine_grid_116": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta_inv_trunc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "theta_inv.half()",
                            "Call"
                        ],
                        [
                            "theta_inv",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((n, chans, window_size, window_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_117": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "images_trunc.view(n, *image_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((n, 1, image_size, image_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta_inv_trunc, torch.Size((n, chans, window_size, window_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_72": {
                "input": {
                    "value": "z_where[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "scale == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/adamnormgrad.py": {
        "torch": {
            "norm_53": {
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad / (torch.norm(grad, 2) + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "grad.add(group['weight_decay'], p.data)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/adamw.py": {
        "torch": {
            "zeros_like_56": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}