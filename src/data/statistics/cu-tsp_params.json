{
    "data/cuprotein/doAllGenerateData.py": {
        "sklearn": {}
    },
    "model_4/model_4_2.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "reconstruction/eval.py": {
        "sklearn": {
            "MDS_42": {
                "variable": {
                    "value": "mds",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(seed=3)",
                            "Call"
                        ]
                    ]
                },
                "dissimilarity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_185": {
                "variable": {
                    "value": "distance_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "chain_a",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chain_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(chain_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_200": {
                "variable": {
                    "value": "chain_b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chain_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(chain_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_193": {
                "variable": {
                    "value": "distance_matrix[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(row.expand_as(chain_b) - chain_b) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_195": {
                "input": {
                    "value": "distance_matrix + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_187": {
                "*size": {
                    "value": "chain_a.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "chain_b.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_203": {
                "input": {
                    "value": "distance_matrix_a - distance_matrix_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reconstruction/reconstruction.py": {
        "sklearn": {
            "MDS_20": {
                "variable": {
                    "value": "mds",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(seed=3)",
                            "Call"
                        ]
                    ]
                },
                "dissimilarity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteintf/dataset_readers/datasets/sampled_single_seq_dataset.py": {
        "tensorflow": {}
    },
    "model_1/proteintf/dataset_readers/datasets/single_seq_dataset.py": {
        "tensorflow": {}
    },
    "model_1/proteintf/dataset_readers/datasets/utils.py": {
        "tensorflow": {
            "TensorShape_10": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_15": {
                "dims": {
                    "value": "[None, position_emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_21": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_25": {
                "dims": {
                    "value": "[None, msas_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_33": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_36": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteintf/models/model.py": {
        "tensorflow": {
            "Input_29": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(window_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_70": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[mask] + inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedder(inputs)",
                            "Call"
                        ],
                        [
                            "encoder(x, mask)",
                            "Call"
                        ],
                        [
                            "feedforward(x)",
                            "Call"
                        ],
                        [
                            "[decoder_model(x) for decoder_model in decoders]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Input_33": {
                "shape": {
                    "value": "(window_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_names",
                            "Name"
                        ],
                        [
                            "target_names",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_35": {
                "shape": {
                    "value": "(window_size, msas_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_names",
                            "Name"
                        ],
                        [
                            "target_names",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_40": {
                "shape": {
                    "value": "(window_size, position_emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "position_emb",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteintf/modules/callback.py": {
        "tensorflow": {}
    },
    "model_1/proteintf/modules/decoder.py": {
        "tensorflow": {
            "add_40": {
                "x": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_22": {
                "units": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['input_dim']",
                            "Subscript"
                        ],
                        [
                            "params['input_dim']",
                            "Subscript"
                        ],
                        [
                            "params['input_dim']",
                            "Subscript"
                        ],
                        [
                            "output_dim",
                            "Name"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "(input_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Lambda_23": {
                "function": {
                    "value": "lambda inp: tf.matmul(inp[0], inp[1], transpose_b=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_37": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Lambda_39": {
                "function": {
                    "value": "lambda inp: tf.expand_dims(tf.squeeze(inp, axis=-1), axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_53": {
                "function": {
                    "value": "lambda inp: tf.matmul(inp[0], inp[1], transpose_b=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_73": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Lambda_74": {
                "function": {
                    "value": "lambda inp: tf.squeeze(inp, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ],
                        [
                            "params.get('name', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_23": {
                "a": {
                    "value": "inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "inp[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_39": {
                "input": {
                    "value": "tf.squeeze(inp, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "a": {
                    "value": "inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "inp[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteintf/modules/embedders/embedder.py": {
        "tensorflow": {
            "Embedding_21": {
                "input_dim": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['vocab_size']",
                            "Subscript"
                        ],
                        [
                            "vocab_size + 1",
                            "BinOp"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['emb_dim']",
                            "Subscript"
                        ],
                        [
                            "project_dim",
                            "Name"
                        ]
                    ]
                },
                "mask_zero": {
                    "value": "mask_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "embeddings_initializer": {
                    "value": "glorot_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_39": {
                "function": {
                    "value": "lambda inp: tf.one_hot(inp, depth)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dense_50": {
                "units": {
                    "value": "params['output_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(params['input_dim'],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_27": {
                "units": {
                    "value": "project_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['project_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "(emb_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_49": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_59": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_39": {
                "indices": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['vocab_size']",
                            "Subscript"
                        ],
                        [
                            "depth + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model_1/proteintf/modules/embedders/protein_embedder.py": {
        "tensorflow": {
            "concatenate_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x + [inp]",
                            "BinOp"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "layers.concatenate(x)",
                            "Call"
                        ],
                        [
                            "layers.add(x)",
                            "Call"
                        ],
                        [
                            "layers.Dense(project_dim, input_shape=(emb_dim,))(x)",
                            "Call"
                        ],
                        [
                            "layers.average(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_55": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('dropout', 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x + [inp]",
                            "BinOp"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "layers.concatenate(x)",
                            "Call"
                        ],
                        [
                            "layers.add(x)",
                            "Call"
                        ],
                        [
                            "layers.Dense(project_dim, input_shape=(emb_dim,))(x)",
                            "Call"
                        ],
                        [
                            "layers.average(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_54": {
                "units": {
                    "value": "project_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('project_dim', None)",
                            "Call"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "(emb_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "average_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x + [inp]",
                            "BinOp"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "layers.concatenate(x)",
                            "Call"
                        ],
                        [
                            "layers.add(x)",
                            "Call"
                        ],
                        [
                            "layers.Dense(project_dim, input_shape=(emb_dim,))(x)",
                            "Call"
                        ],
                        [
                            "layers.average(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_1/proteintf/modules/encoder.py": {
        "tensorflow": {
            "multiply_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Lambda_41": {
                "function": {
                    "value": "lambda inp: tf.cast(tf.expand_dims(inp, axis=-1), tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Masking_45": {
                "mask_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Bidirectional_56": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "layer": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(f'layers.{RNN}')(hid_dim, dropout=dropout, return_sequences=True)",
                            "Call"
                        ],
                        [
                            "eval(f'layers.{RNN}')(hid_dim, return_sequences=True)",
                            "Call"
                        ],
                        [
                            "layers.Bidirectional(layer, input_shape=(None, dim))",
                            "Call"
                        ]
                    ]
                },
                "input_shape": {
                    "value": "(None, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Lambda_95": {
                "function": {
                    "value": "lambda inp: tf.cast(tf.expand_dims(inp, axis=-1), tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Masking_99": {
                "mask_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(None, input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Lambda_91": {
                "function": {
                    "value": "lambda inp: tf.ones_like(inp[:, :, 0])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_42": {
                "x": {
                    "value": "tf.expand_dims(inp, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNormalization_49": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "tf.expand_dims(inp, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_91": {
                "input": {
                    "value": "inp[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteintf/modules/feedforward.py": {
        "tensorflow": {
            "add_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_30": {
                "units": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(in_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_31": {
                "activation": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('dropout', 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_29": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteintf/modules/loss.py": {
        "tensorflow": {
            "cast_30": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_26": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_31": {
                "x": {
                    "value": "tf.reduce_sum(diff ** 2 * m) / tf.reduce_sum(m)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_33": {
                "x": {
                    "value": "tf.reduce_mean(diff ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_56": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "input_tensor": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "input_tensor": {
                    "value": "tf.abs(diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_93": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred - y_true",
                            "BinOp"
                        ],
                        [
                            "diff * target_stats['std']",
                            "BinOp"
                        ],
                        [
                            "y_pred - y_true",
                            "BinOp"
                        ],
                        [
                            "y_pred - y_true",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_28": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "m * m_tril",
                            "BinOp"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(m, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(m, m, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(m, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_91": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred - y_true",
                            "BinOp"
                        ],
                        [
                            "diff * target_stats['std']",
                            "BinOp"
                        ],
                        [
                            "y_pred - y_true",
                            "BinOp"
                        ],
                        [
                            "y_pred - y_true",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model_1/proteintf/modules/transformer/attention_layer.py": {
        "tensorflow": {
            "Dense_24": {
                "variable": {
                    "value": "self.q_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "variable": {
                    "value": "self.k_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_26": {
                "variable": {
                    "value": "self.v_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_28": {
                "variable": {
                    "value": "self.output_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q)",
                            "Call"
                        ],
                        [
                            "q * depth ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_dense_layer(y)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['k'], k], axis=1)",
                            "Call"
                        ],
                        [
                            "self.split_heads(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_109": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - self.attention_dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_dense_layer(y)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['v'], v], axis=1)",
                            "Call"
                        ],
                        [
                            "self.split_heads(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.num_heads, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['k'], k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['v'], v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_111": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - self.attention_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - self.attention_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_40": {
                "name": {
                    "value": "split_heads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_51": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_60": {
                "name": {
                    "value": "combine_heads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_41": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_1/proteintf/modules/transformer/encoder_stack.py": {
        "tensorflow": {
            "BatchNormalization_35": {
                "variable": {
                    "value": "self.output_normalization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "'layer_%d' % n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteintf/modules/transformer/feedforward_network.py": {
        "tensorflow": {
            "Dense_20": {
                "variable": {
                    "value": "self.filter_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filter_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "variable": {
                    "value": "self.output_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_60": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.relu_dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - self.relu_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_41": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "pad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if not self.allow_pad else padding",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_48": {
                "variable": {
                    "value": "nonpad_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(pad_mask < 1e-09)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonpad_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(pad_mask < 1e-09))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.relu_dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_66": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "nonpad_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(pad_mask < 1e-09))",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.relu_dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * length, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.relu_dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "remove_padding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "re_add_padding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_48": {
                "condition": {
                    "value": "pad_mask < 1e-09",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteintf/modules/transformer/utils.py": {
        "tensorflow": {
            "expand_dims_37": {
                "variable": {
                    "value": "attention_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(attention_bias, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNormalization_54": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_18": {
                "name": {
                    "value": "padding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_19": {
                "x": {
                    "value": "tf.equal(x, padding_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_34": {
                "name": {
                    "value": "attention_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_65": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.layer(y, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.postprocess_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.postprocess_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_19": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "padding_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_38": {
                "input": {
                    "value": "attention_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding * _NEG_INF",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attention_bias, axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteintf/utils/helpers.py": {
        "tensorflow": {
            "set_random_seed_45": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_2/model_2_1.py": {
        "tensorflow": {
            "Tokenizer_97": {
                "variable": {
                    "value": "tokenizer_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tokenizer_99": {
                "variable": {
                    "value": "tokenizer_encoder_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequences_104": {
                "variable": {
                    "value": "train_input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder.texts_to_sequences(train_input_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(train_input_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequences_106": {
                "variable": {
                    "value": "train_q8s_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_q8s_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder_q8s.texts_to_sequences(train_q8s_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(train_q8s_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_189": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TimeDistributed(Dense(3, activation='tanh'))(mid)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "torsion_angles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_192": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TimeDistributed(Dense(3))(mid)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "coordinates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_196": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Input(shape=(None,)), Input(shape=(None,)), Input(shape=(None, 21))]",
                            "List"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[angles, coords]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_199": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PiecewiseConstantDecay_215": {
                "variable": {
                    "value": "learning_rate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "lr_decay_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_iter * 20.0]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "lr_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.001, 0.0005]",
                            "List"
                        ]
                    ]
                }
            },
            "RMSprop_216": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.PiecewiseConstantDecay(lr_decay_iters, lr_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Checkpoint_224": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.RMSprop(learning_rate=learning_rate_fn)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Model(inputs, [angles, coords])",
                            "Call"
                        ]
                    ]
                }
            },
            "Mean_235": {
                "variable": {
                    "value": "train_rmsd_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_236": {
                "variable": {
                    "value": "train_rmsd_dist_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_237": {
                "variable": {
                    "value": "train_rmsd_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_238": {
                "variable": {
                    "value": "train_rmsd_all",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_305": {
                "variable": {
                    "value": "val_rmsd_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_306": {
                "variable": {
                    "value": "val_rmsd_dist_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_307": {
                "variable": {
                    "value": "val_rmsd_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_308": {
                "variable": {
                    "value": "val_rmsd_all",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_225": {
                "checkpoint_dir": {
                    "value": "checkpoint_directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir",
                            "Name"
                        ]
                    ]
                }
            },
            "convert_to_tensor_244": {
                "variable": {
                    "value": "batch_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_245": {
                "variable": {
                    "value": "batch_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_q8s[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_246": {
                "variable": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_seqlen[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_247": {
                "variable": {
                    "value": "batch_dcalphas",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_train_dist_matrix[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_248": {
                "variable": {
                    "value": "batch_pssm",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_pssm[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_281": {
                "variable": {
                    "value": "(grads, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss_main, model.trainable_variables)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_312": {
                "variable": {
                    "value": "batch_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_313": {
                "variable": {
                    "value": "batch_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_q8s[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_314": {
                "variable": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_seqlen[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_315": {
                "variable": {
                    "value": "batch_dcalphas",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_val_dist_matrix[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_316": {
                "variable": {
                    "value": "batch_pssm",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_pssm[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_377": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Model(inputs, [angles, coords])",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/home/yg2541/logs/{}'.format(model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "CuDNNGRU_182": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CuDNNGRU_183": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CuDNNGRU_184": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_257": {
                "variable": {
                    "value": "loss_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_phi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle2(phi_scaled, y_train_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle2(phi_scaled, y_val_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_258": {
                "variable": {
                    "value": "loss_psi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_psi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle2(psi_scaled, y_train_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle2(psi_scaled, y_val_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_263": {
                "variable": {
                    "value": "loss_drmsd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen, width)",
                            "Call"
                        ],
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_265": {
                "variable": {
                    "value": "loss_drmsd_full",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_267": {
                "variable": {
                    "value": "batch_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(X_train_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(X_val_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_268": {
                "variable": {
                    "value": "sq_batch_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen * batch_seqlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_269": {
                "variable": {
                    "value": "dist_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen * (batch_seqlen - 1) - tf.maximum(batch_seqlen - width, 0) * tf.maximum(batch_seqlen - width - 1, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_271": {
                "variable": {
                    "value": "loss_phi_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_phi / batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_272": {
                "variable": {
                    "value": "loss_psi_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_psi / batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_274": {
                "variable": {
                    "value": "loss_drmsd_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_drmsd_full / sq_batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_276": {
                "variable": {
                    "value": "loss_root",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (2 * batch_numbers + sq_batch_numbers) * (loss_phi + loss_psi) + 1 / (2 * batch_numbers + sq_batch_numbers) * loss_drmsd_full",
                            "BinOp"
                        ],
                        [
                            "1 / (2 * batch_numbers + sq_batch_numbers) * (loss_phi + loss_psi) + 1 / (2 * batch_numbers + sq_batch_numbers) * loss_drmsd",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_324": {
                "variable": {
                    "value": "loss_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_phi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle2(phi_scaled, y_train_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle2(phi_scaled, y_val_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_325": {
                "variable": {
                    "value": "loss_psi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_psi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle2(psi_scaled, y_train_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle2(psi_scaled, y_val_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_329": {
                "variable": {
                    "value": "loss_drmsd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen, width)",
                            "Call"
                        ],
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_331": {
                "variable": {
                    "value": "batch_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(X_train_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(X_val_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_332": {
                "variable": {
                    "value": "sq_batch_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen * batch_seqlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_334": {
                "variable": {
                    "value": "loss_phi_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_phi / batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_335": {
                "variable": {
                    "value": "loss_psi_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_psi / batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_336": {
                "variable": {
                    "value": "loss_drmsd_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_drmsd / sq_batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_338": {
                "variable": {
                    "value": "loss_root",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (2 * batch_numbers + sq_batch_numbers) * (loss_phi + loss_psi) + 1 / (2 * batch_numbers + sq_batch_numbers) * loss_drmsd_full",
                            "BinOp"
                        ],
                        [
                            "1 / (2 * batch_numbers + sq_batch_numbers) * (loss_phi + loss_psi) + 1 / (2 * batch_numbers + sq_batch_numbers) * loss_drmsd",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GradientTape_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_353": {
                "x": {
                    "value": "plot_rmds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_drmsd_batch[:8].numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_269": {
                "x": {
                    "value": "batch_seqlen - width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model_2/model_2_1_prediction.py": {
        "tensorflow": {}
    },
    "model_2/model_2_2.py": {
        "tensorflow": {
            "Tokenizer_105": {
                "variable": {
                    "value": "tokenizer_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tokenizer_107": {
                "variable": {
                    "value": "tokenizer_encoder_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequences_112": {
                "variable": {
                    "value": "train_input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder.texts_to_sequences(train_input_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(train_input_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequences_114": {
                "variable": {
                    "value": "train_q8s_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_q8s_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder_q8s.texts_to_sequences(train_q8s_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(train_q8s_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_208": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TimeDistributed(Dense(3, activation='tanh'))(mid)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "torsion_angles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_211": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TimeDistributed(Dense(3))(mid)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "coordinates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_215": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Input(shape=(None,)), Input(shape=(None,)), Input(shape=(None, 21)), Input(shape=(None, maxlen_seq)), Input(shape=(None, maxlen_seq))]",
                            "List"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[angles, coords]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_218": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PiecewiseConstantDecay_237": {
                "variable": {
                    "value": "learning_rate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "lr_decay_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_iter * 20.0]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "lr_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.001, 0.0005]",
                            "List"
                        ]
                    ]
                }
            },
            "RMSprop_238": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.PiecewiseConstantDecay(lr_decay_iters, lr_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Checkpoint_246": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.RMSprop(learning_rate=learning_rate_fn)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Model(inputs, [angles, coords])",
                            "Call"
                        ]
                    ]
                }
            },
            "Mean_257": {
                "variable": {
                    "value": "train_rmsd_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_258": {
                "variable": {
                    "value": "train_rmsd_dist_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_259": {
                "variable": {
                    "value": "train_rmsd_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_260": {
                "variable": {
                    "value": "train_rmsd_all",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_330": {
                "variable": {
                    "value": "val_rmsd_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_331": {
                "variable": {
                    "value": "val_rmsd_dist_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_332": {
                "variable": {
                    "value": "val_rmsd_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_333": {
                "variable": {
                    "value": "val_rmsd_all",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_247": {
                "checkpoint_dir": {
                    "value": "checkpoint_directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir",
                            "Name"
                        ]
                    ]
                }
            },
            "convert_to_tensor_266": {
                "variable": {
                    "value": "batch_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_267": {
                "variable": {
                    "value": "batch_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_q8s[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_268": {
                "variable": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_seqlen[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_269": {
                "variable": {
                    "value": "batch_dcalphas",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_train_dist_matrix[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_270": {
                "variable": {
                    "value": "batch_pssm",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_pssm[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_271": {
                "variable": {
                    "value": "batch_msa_oh",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_msa_oh[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_272": {
                "variable": {
                    "value": "batch_msa_eb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_msa_eb[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_306": {
                "variable": {
                    "value": "(grads, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss_main, model.trainable_variables)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_337": {
                "variable": {
                    "value": "batch_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_338": {
                "variable": {
                    "value": "batch_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_q8s[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_339": {
                "variable": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_seqlen[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_340": {
                "variable": {
                    "value": "batch_dcalphas",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_val_dist_matrix[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_341": {
                "variable": {
                    "value": "batch_pssm",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_pssm[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_342": {
                "variable": {
                    "value": "batch_msa_oh",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_msa_oh[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_343": {
                "variable": {
                    "value": "batch_msa_eb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_msa_eb[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_404": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Model(inputs, [angles, coords])",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./', 'logs/{}'.format(model_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "CuDNNGRU_201": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CuDNNGRU_202": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CuDNNGRU_203": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_282": {
                "variable": {
                    "value": "loss_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_phi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle2(phi_scaled, y_train_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle2(phi_scaled, y_val_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_283": {
                "variable": {
                    "value": "loss_psi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_psi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle2(psi_scaled, y_train_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle2(psi_scaled, y_val_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_288": {
                "variable": {
                    "value": "loss_drmsd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen, width)",
                            "Call"
                        ],
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_290": {
                "variable": {
                    "value": "loss_drmsd_full",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_292": {
                "variable": {
                    "value": "batch_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(X_train_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(X_val_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_293": {
                "variable": {
                    "value": "sq_batch_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen * batch_seqlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_294": {
                "variable": {
                    "value": "dist_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen * (batch_seqlen - 1) - tf.maximum(batch_seqlen - width, 0) * tf.maximum(batch_seqlen - width - 1, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_296": {
                "variable": {
                    "value": "loss_phi_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_phi / batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_297": {
                "variable": {
                    "value": "loss_psi_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_psi / batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_299": {
                "variable": {
                    "value": "loss_drmsd_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_drmsd_full / sq_batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_301": {
                "variable": {
                    "value": "loss_root",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (2 * batch_numbers + sq_batch_numbers) * (loss_phi + loss_psi) + 1 / (2 * batch_numbers + sq_batch_numbers) * loss_drmsd_full",
                            "BinOp"
                        ],
                        [
                            "1 / (2 * batch_numbers + sq_batch_numbers) * (loss_phi + loss_psi) + 1 / (2 * batch_numbers + sq_batch_numbers) * loss_drmsd",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_351": {
                "variable": {
                    "value": "loss_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_phi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle2(phi_scaled, y_train_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle2(phi_scaled, y_val_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_352": {
                "variable": {
                    "value": "loss_psi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_psi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle2(psi_scaled, y_train_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle2(psi_scaled, y_val_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_356": {
                "variable": {
                    "value": "loss_drmsd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen, width)",
                            "Call"
                        ],
                        [
                            "drmsd_dist_matrix2(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_358": {
                "variable": {
                    "value": "batch_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(X_train_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(X_val_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_359": {
                "variable": {
                    "value": "sq_batch_numbers",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_seqlen * batch_seqlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_361": {
                "variable": {
                    "value": "loss_phi_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_phi / batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_362": {
                "variable": {
                    "value": "loss_psi_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_psi / batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_363": {
                "variable": {
                    "value": "loss_drmsd_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_drmsd / sq_batch_numbers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_365": {
                "variable": {
                    "value": "loss_root",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (2 * batch_numbers + sq_batch_numbers) * (loss_phi + loss_psi) + 1 / (2 * batch_numbers + sq_batch_numbers) * loss_drmsd_full",
                            "BinOp"
                        ],
                        [
                            "1 / (2 * batch_numbers + sq_batch_numbers) * (loss_phi + loss_psi) + 1 / (2 * batch_numbers + sq_batch_numbers) * loss_drmsd",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GradientTape_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_380": {
                "x": {
                    "value": "plot_rmds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_drmsd_batch[:8].numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_294": {
                "x": {
                    "value": "batch_seqlen - width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model_2/model_2_2_prediction.py": {
        "tensorflow": {
            "pad_sequences_65": {
                "variable": {
                    "value": "test_input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder.texts_to_sequences(test_input_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(test_input_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "384",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequences_67": {
                "variable": {
                    "value": "test_q8s_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_q8s_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder_q8s.texts_to_sequences(test_q8s_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(test_q8s_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "384",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_89": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder.texts_to_sequences(test_input_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(test_input_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_90": {
                "variable": {
                    "value": "X_test_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_q8s_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder_q8s.texts_to_sequences(test_q8s_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(test_q8s_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_91": {
                "variable": {
                    "value": "X_test_pssm",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pssms_test_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(pssms_test), maxlen_seq, pssms_dim], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_92": {
                "variable": {
                    "value": "X_test_oh",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "msacovonehot_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(msacovonehot_test), maxlen_seq, maxlen_seq), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "msacovonehot_pad / 10000",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_93": {
                "variable": {
                    "value": "X_test_eb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "msacovembedding_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(msacovembedding_test), maxlen_seq, maxlen_seq), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "msacovembedding_pad / 260000",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "imported",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logs/{}'.format(model_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_3/model_utils.py": {
        "tensorflow": {
            "RandomUniform_100": {
                "variable": {
                    "value": "alphabet_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.pi",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "alphabet",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alphabet",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "alphabet_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphabet_initializer(shape=[alphabet_size, NUM_DIHEDRALS], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "torsion_angles",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "torsion_angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean_angle(probs, alphabet)",
                            "Call"
                        ],
                        [
                            "tf.transpose(torsion_angles, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "alphabet_mixtures_to_torsion_angles(probs, self.alphabet)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_129": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_to_coordinate(points, num_fragments=6, parallel_iterations=4)",
                            "Call"
                        ],
                        [
                            "coordinates[1::NUM_DIHEDRALS]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(coordinates, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "torsion_angles_to_coordinates(torsion_angles)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_218": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.square(rmsd_batch), seqlen_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_219": {
                "variable": {
                    "value": "rmsd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm / tf.reduce_sum(seqlen_batch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_141": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(u, name='u')",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(u, name='u')",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_146": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_l2_norm(diffs, reduction_indices=[3], name=scope)",
                            "Call"
                        ],
                        [
                            "tf.transpose(norms, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "reduce_l2_norm(diffs, reduction_indices=[1, 2], weights=weights, name=scope)",
                            "Call"
                        ],
                        [
                            "reduce_l2_norm(diffs, reduction_indices=[1], weights=weights, name=scope)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_160": {
                "variable": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mat1, name='mat1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mat1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_161": {
                "variable": {
                    "value": "mat2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mat2, name='mat2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mat2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_162": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=mat1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=angles1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_182": {
                "variable": {
                    "value": "angles1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "angles1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles1, name='angles1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "angles1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_183": {
                "variable": {
                    "value": "angles2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "angles2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles2, name='angles2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "angles2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_184": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=mat1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=angles1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_159": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_181": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_218": {
                "x": {
                    "value": "tf.square(rmsd_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "seqlen_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_144": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(u, name='u')",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_188": {
                "x": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_218": {
                "x": {
                    "value": "rmsd_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_219": {
                "input_tensor": {
                    "value": "seqlen_batch",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_3/model_utils_TF-version-0227.py": {
        "tensorflow": {
            "RandomUniform_99": {
                "variable": {
                    "value": "alphabet_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.pi",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "alphabet",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alphabet",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "alphabet_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphabet_initializer(shape=[alphabet_size, NUM_DIHEDRALS], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "torsion_angles",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "torsion_angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean_angle(probs, alphabet)",
                            "Call"
                        ],
                        [
                            "tf.transpose(torsion_angles, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "alphabet_mixtures_to_torsion_angles(probs, self.alphabet)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_to_coordinate(points, num_fragments=6, parallel_iterations=4)",
                            "Call"
                        ],
                        [
                            "coordinates[1::NUM_DIHEDRALS]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(coordinates, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "torsion_angles_to_coordinates(torsion_angles)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_217": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.square(rmsd_batch), seqlen_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_218": {
                "variable": {
                    "value": "rmsd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm / tf.reduce_sum(seqlen_batch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_140": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(u, name='u')",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(u, name='u')",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_l2_norm(diffs, reduction_indices=[3], name=scope)",
                            "Call"
                        ],
                        [
                            "tf.transpose(norms, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "reduce_l2_norm(diffs, reduction_indices=[1, 2], weights=weights, name=scope)",
                            "Call"
                        ],
                        [
                            "reduce_l2_norm(diffs, reduction_indices=[1], weights=weights, name=scope)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_159": {
                "variable": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mat1, name='mat1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mat1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_160": {
                "variable": {
                    "value": "mat2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mat2, name='mat2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mat2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_161": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=mat1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=angles1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_181": {
                "variable": {
                    "value": "angles1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "angles1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles1, name='angles1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "angles1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_182": {
                "variable": {
                    "value": "angles2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "angles2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles2, name='angles2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "angles2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_183": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=mat1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=angles1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_139": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_158": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_180": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_217": {
                "x": {
                    "value": "tf.square(rmsd_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "seqlen_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_143": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(u, name='u')",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_187": {
                "x": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_217": {
                "x": {
                    "value": "rmsd_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_218": {
                "input_tensor": {
                    "value": "seqlen_batch",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_3/model_utils_TF-version-0302.py": {
        "tensorflow": {
            "RandomUniform_99": {
                "variable": {
                    "value": "alphabet_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.pi",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "alphabet",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alphabet",
                    "type": "str",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "alphabet_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphabet_initializer(shape=[alphabet_size, NUM_DIHEDRALS], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "torsion_angles",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "torsion_angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean_angle(probs, alphabet)",
                            "Call"
                        ],
                        [
                            "tf.transpose(torsion_angles, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "alphabet_mixtures_to_torsion_angles(probs, self.alphabet)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_to_coordinate(points, num_fragments=6, parallel_iterations=4)",
                            "Call"
                        ],
                        [
                            "coordinates[1::NUM_DIHEDRALS]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(coordinates, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "torsion_angles_to_coordinates(torsion_angles)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_217": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.square(rmsd_batch), seqlen_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_218": {
                "variable": {
                    "value": "rmsd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm / tf.reduce_sum(seqlen_batch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_140": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(u, name='u')",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(u, name='u')",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_l2_norm(diffs, reduction_indices=[3], name=scope)",
                            "Call"
                        ],
                        [
                            "tf.transpose(norms, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "reduce_l2_norm(diffs, reduction_indices=[1, 2], weights=weights, name=scope)",
                            "Call"
                        ],
                        [
                            "reduce_l2_norm(diffs, reduction_indices=[1], weights=weights, name=scope)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_159": {
                "variable": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mat1, name='mat1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mat1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_160": {
                "variable": {
                    "value": "mat2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mat2, name='mat2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mat2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_161": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=mat1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=angles1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_181": {
                "variable": {
                    "value": "angles1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "angles1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles1, name='angles1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "angles1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_182": {
                "variable": {
                    "value": "angles2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "angles2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(angles2, name='angles2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "angles2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_183": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=mat1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=angles1.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights, name='weights')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_139": {
                "name": {
                    "value": "pairwise_distance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_158": {
                "name": {
                    "value": "dRMSD",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_180": {
                "name": {
                    "value": "RMSD_torsion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_217": {
                "x": {
                    "value": "tf.square(rmsd_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "seqlen_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_143": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(u, name='u')",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_187": {
                "x": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_217": {
                "x": {
                    "value": "rmsd_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_218": {
                "input_tensor": {
                    "value": "seqlen_batch",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_3/test_prediction_my.py": {
        "tensorflow": {
            "pad_sequences_41": {
                "variable": {
                    "value": "test_input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder.texts_to_sequences(test_input_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(test_input_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "384",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequences_43": {
                "variable": {
                    "value": "test_q8s_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "test_q8s_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder_q8s.texts_to_sequences(test_q8s_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(test_q8s_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "384",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_51": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder.texts_to_sequences(test_input_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(test_input_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_52": {
                "variable": {
                    "value": "X_test_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test_q8s_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder_q8s.texts_to_sequences(test_q8s_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(test_q8s_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_53": {
                "variable": {
                    "value": "X_test_msa",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "msas_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(msas), maxlen_seq, msa_dim], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "imported",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.argv[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "model_3/train_unet_my.py": {
        "tensorflow": {
            "Tokenizer_97": {
                "variable": {
                    "value": "tokenizer_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tokenizer_99": {
                "variable": {
                    "value": "tokenizer_encoder_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequences_104": {
                "variable": {
                    "value": "train_input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder.texts_to_sequences(train_input_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(train_input_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "384",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequences_106": {
                "variable": {
                    "value": "train_q8s_data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "train_q8s_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer_encoder_q8s.texts_to_sequences(train_q8s_grams)",
                            "Call"
                        ],
                        [
                            "sequence.pad_sequences(train_q8s_data, maxlen=maxlen_seq, padding='post', truncating='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "384",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_207": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv_UNet(merged_input, droprate=0.4)",
                            "Call"
                        ],
                        [
                            "TimeDistributed(Dense(2, activation='tanh'))(y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "torsion_angles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_217": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Input(shape=(None,)), Input(shape=(None,)), Input(shape=(None, 21))]",
                            "List"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[angles, metric]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "PiecewiseConstantDecay_244": {
                "variable": {
                    "value": "learning_rate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "lr_decay_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_iter * 5.0, n_iter * 8.0]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "lr_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0001, 5e-05, 2e-05]",
                            "List"
                        ]
                    ]
                }
            },
            "RMSprop_245": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.PiecewiseConstantDecay(lr_decay_iters, lr_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_247": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_261": {
                "variable": {
                    "value": "train_rmsd_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_262": {
                "variable": {
                    "value": "train_rmsd_dist_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_263": {
                "variable": {
                    "value": "train_rmsd_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_264": {
                "variable": {
                    "value": "train_rmsd_all",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_326": {
                "variable": {
                    "value": "val_rmsd_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_327": {
                "variable": {
                    "value": "val_rmsd_dist_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_328": {
                "variable": {
                    "value": "val_rmsd_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_329": {
                "variable": {
                    "value": "val_rmsd_all",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_270": {
                "variable": {
                    "value": "batch_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_271": {
                "variable": {
                    "value": "batch_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_q8s[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_272": {
                "variable": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_seqlen[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_273": {
                "variable": {
                    "value": "batch_dcalphas",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_train_dist_matrix[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_274": {
                "variable": {
                    "value": "batch_msa",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_train_msa[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_304": {
                "variable": {
                    "value": "(grads, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss_all, model.trainable_variables)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_333": {
                "variable": {
                    "value": "batch_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_334": {
                "variable": {
                    "value": "batch_q8s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_q8s[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_335": {
                "variable": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_seqlen[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_336": {
                "variable": {
                    "value": "batch_dcalphas",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_val_dist_matrix[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_337": {
                "variable": {
                    "value": "batch_msa",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_val_msa[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_390": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Model(inputs, [angles, metric])",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "log_dir + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_285": {
                "variable": {
                    "value": "loss_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_phi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle(phi_scaled, y_train_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle(phi_scaled, y_val_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_286": {
                "variable": {
                    "value": "loss_psi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_psi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle(psi_scaled, y_train_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle(psi_scaled, y_val_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_291": {
                "variable": {
                    "value": "loss_drmsd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drmsd_dist_matrix(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ],
                        [
                            "drmsd_dist_matrix(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_292": {
                "variable": {
                    "value": "loss_drmsd_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch / tf.sqrt(batch_seqlen)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_347": {
                "variable": {
                    "value": "loss_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_phi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle(phi_scaled, y_train_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle(phi_scaled, y_val_phis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_348": {
                "variable": {
                    "value": "loss_psi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_psi_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmsd_torsion_angle(psi_scaled, y_train_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ],
                        [
                            "rmsd_torsion_angle(psi_scaled, y_val_psis[idx_batch], batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_354": {
                "variable": {
                    "value": "loss_drmsd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drmsd_dist_matrix(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ],
                        [
                            "drmsd_dist_matrix(dist_matrix, batch_dcalphas, batch_seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_355": {
                "variable": {
                    "value": "loss_drmsd_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_drmsd_batch / tf.sqrt(batch_seqlen)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_292": {
                "x": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(X_train_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(X_val_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_355": {
                "x": {
                    "value": "batch_seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(X_train_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(X_val_seqlen[idx_batch], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_4/core.py": {
        "tensorflow": {
            "squeeze_253": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_255": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A * A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_257": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxsize / 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(A * A, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r, [-1, 1])",
                            "Call"
                        ],
                        [
                            "np.arange(m)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_259": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r - 2 * tf.matmul(A, tf.transpose(A)) + tf.transpose(r)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sqrt(D)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(D, tf.zeros_like(D[0]), name=None)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(D, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [1, dim, dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_261": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r - 2 * tf.matmul(A, tf.transpose(A)) + tf.transpose(r)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sqrt(D)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(D, tf.zeros_like(D[0]), name=None)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(D, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [1, dim, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r - 2 * tf.matmul(A, tf.transpose(A)) + tf.transpose(r)",
                            "BinOp"
                        ],
                        [
                            "tf.math.sqrt(D)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(D, tf.zeros_like(D[0]), name=None)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(D, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(D, [1, dim, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, dim, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_265": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_267": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_268": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_271": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_a - mask_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask_a - mask_b, dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [dim, dim])",
                            "Call"
                        ],
                        [
                            "r[:, None] < r",
                            "Compare"
                        ]
                    ]
                },
                "shape": {
                    "value": "[dim, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_273": {
                "variable": {
                    "value": "upper_triangular_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(y_true)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask_a - mask_b, dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [dim, dim])",
                            "Call"
                        ],
                        [
                            "r[:, None] < r",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_274": {
                "variable": {
                    "value": "upper_triangular_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask_a - mask_b, dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [dim, dim])",
                            "Call"
                        ],
                        [
                            "r[:, None] < r",
                            "Compare"
                        ]
                    ]
                }
            },
            "divide_275": {
                "variable": {
                    "value": "Divided_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upper_triangular_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(y_true, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper_triangular_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(y_pred, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_276": {
                "variable": {
                    "value": "logged",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Divided_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(upper_triangular_true, upper_triangular_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_277": {
                "variable": {
                    "value": "logged_square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(Divided_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_278": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logged_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.square(logged)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_254": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_258": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_260": {
                "input": {
                    "value": "D[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_266": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_258": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(A)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(A)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model_4/core_old.py": {
        "tensorflow": {}
    },
    "model_4/eval_log.py": {
        "tensorflow": {
            "ConfigProto_25": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_4/load_eval_model.py": {
        "tensorflow": {}
    },
    "model_4/load_eval_rnn.py": {
        "tensorflow": {}
    },
    "model_4/model_4_1.py": {
        "tensorflow": {}
    },
    "model_4/model_4_3.py": {
        "tensorflow": {}
    },
    "model_4/train_rnn_coords.py": {
        "tensorflow": {}
    },
    "model_4/train_rnn_coords_dcalpha.py": {
        "tensorflow": {}
    },
    "model_4/train_rnn_torsion.py": {
        "tensorflow": {}
    },
    "model_4/train_rnn_torsion_dcalpha.py": {
        "tensorflow": {}
    },
    "model_gan/cgan_data_loader.py": {
        "tensorflow": {
            "Tokenizer_59": {
                "variable": {
                    "value": "tokenizer",
                    "type": "variable",
                    "possible_values": []
                },
                "char_level": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_categorical_62": {
                "variable": {
                    "value": "s_frags",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "int_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.texts_to_sequences(s_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer2.texts_to_sequences(ss_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer.texts_to_sequences(s_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer2.texts_to_sequences(ss_frags)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tokenizer_65": {
                "variable": {
                    "value": "tokenizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "char_level": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_categorical_68": {
                "variable": {
                    "value": "ss_frags",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "int_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.texts_to_sequences(s_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer2.texts_to_sequences(ss_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer.texts_to_sequences(s_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer2.texts_to_sequences(ss_frags)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tokenizer_132": {
                "variable": {
                    "value": "tokenizer",
                    "type": "variable",
                    "possible_values": []
                },
                "char_level": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_categorical_135": {
                "variable": {
                    "value": "s_frags",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "int_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.texts_to_sequences(s_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer2.texts_to_sequences(ss_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer.texts_to_sequences(s_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer2.texts_to_sequences(ss_frags)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tokenizer_138": {
                "variable": {
                    "value": "tokenizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "char_level": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_categorical_141": {
                "variable": {
                    "value": "ss_frags",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "int_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.texts_to_sequences(s_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer2.texts_to_sequences(ss_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer.texts_to_sequences(s_frags)",
                            "Call"
                        ],
                        [
                            "tokenizer2.texts_to_sequences(ss_frags)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_gan/cgan_model.py": {
        "tensorflow": {
            "Input_10": {
                "variable": {
                    "value": "in_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 51, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_16": {
                "variable": {
                    "value": "in_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_38": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "[in_noise, in_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Conv2DTranspose(1, (4, 4), strides=(2, 2), padding='same', use_bias=False, activation='tanh')(gen)",
                            "Call"
                        ],
                        [
                            "layers.Dense(1, activation='sigmoid')(flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.65",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Input_49": {
                "variable": {
                    "value": "in_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 51, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_55": {
                "variable": {
                    "value": "in_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 128, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_82": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[in_matrix, in_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_100": {
                "variable": {
                    "value": "gen_output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gen_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_model.output",
                            "Attribute"
                        ],
                        [
                            "tf.clip_by_value(gen_output, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.math.divide(tf.math.add(gen_output, tf.transpose(gen_output, perm=[0, 2, 1, 3])), 2)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_103": {
                "variable": {
                    "value": "gen_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.add(gen_output, tf.transpose(gen_output, perm=[0, 2, 1, 3]))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Model_108": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "[gen_noise, gen_label]",
                    "type": "List",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "gan_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model([gen_output, gen_label])",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_12": {
                "units": {
                    "value": "4 * 4 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Reshape_13": {
                "target_shape": {
                    "value": "(4, 4, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "units": {
                    "value": "4 * 4 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Reshape_18": {
                "target_shape": {
                    "value": "(4, 4, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Concatenate_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2DTranspose_21": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2DTranspose_25": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2DTranspose_29": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2DTranspose_33": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2DTranspose_37": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_52": {
                "units": {
                    "value": "128 * 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Reshape_53": {
                "target_shape": {
                    "value": "(128, 128, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Concatenate_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_60": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_64": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_69": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_74": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_76": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_79": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_81": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_103": {
                "x": {
                    "value": "gen_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_model.output",
                            "Attribute"
                        ],
                        [
                            "tf.clip_by_value(gen_output, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.math.divide(tf.math.add(gen_output, tf.transpose(gen_output, perm=[0, 2, 1, 3])), 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(gen_output, perm=[0, 2, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "a": {
                    "value": "gen_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_model.output",
                            "Attribute"
                        ],
                        [
                            "tf.clip_by_value(gen_output, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.math.divide(tf.math.add(gen_output, tf.transpose(gen_output, perm=[0, 2, 1, 3])), 2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model_gan/cgan_test.py": {
        "tensorflow": {
            "load_model_27": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "generator_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normal_31": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 100]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteinpt/models/protein_model.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.pssm_embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_pssm",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "aa_embedder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "triu_82": {
                "variable": {
                    "value": "mask_triu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(mask[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "mask_triu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_91": {
                "input": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((mask * (x - target)) ** 2).sum() / mask.sum()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_85": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs['psi'], inputs['phi']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_82": {
                "input": {
                    "value": "mask[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteinpt/modules/cnn_encoder.py": {
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_43": {
                "output_size": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "cks",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "cp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "pks",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "ps",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteinpt/modules/decoders.py": {
        "torch": {
            "Linear_7": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteinpt/modules/feedforward_with_res_n_ln.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self._layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm(dim) for dim in [input_dim] + hidden_dims[:-1]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_26": {
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteinpt/modules/gru_with_res_n_ln.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.gru_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PytorchSeq2SeqWrapper(nn.modules.GRU(input_size=input_size, hidden_size=hidden_size, num_layers=1, bias=bias, batch_first=True, dropout=0.0, bidirectional=bidirectional)) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm(dim) for dim in [self.input_size] + [self.output_size] * (num_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_32": {
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_38": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_1/proteinpt/modules/msa_encoder.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_int('output_dim')",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_17": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_int('output_dim')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_1/proteinpt/utils/predictor.py": {
        "torch": {
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}