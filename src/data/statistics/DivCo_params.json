{
    "DivCo-BicycleGAN/data/__init__.py": {
        "torch": {}
    },
    "DivCo-BicycleGAN/data/base_dataset.py": {
        "torch": {}
    },
    "DivCo-BicycleGAN/data/image_folder.py": {
        "torch": {}
    },
    "DivCo-BicycleGAN/models/base_model.py": {
        "torch": {
            "device_35": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_189": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "str(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "net.module.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_157": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DivCo-BicycleGAN/models/divco2_model.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "self.perceptualnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg16.features.children())[:23]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query, pos] + negs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_50": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_51": {
                "variable": {
                    "value": "self.criterionZ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "self.fake_data_encoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.real_A_encoded, self.fake_B_encoded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "self.real_data_encoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.real_A_encoded, self.real_B_encoded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "self.fake_data_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.real_A_encoded, self.fake_B_random[:half_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "self.real_data_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.real_A_random, self.real_B_random]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "self.optimizer_E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netE.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "self.optimizer_D2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_103": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_246": {
                "input": {
                    "value": "feat_q",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feat_k.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "*size": {
                    "value": "out.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feat_q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_201": {
                "input": {
                    "value": "1 + self.logvar - self.mu.pow(2) - self.logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_101": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_241": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu2[i:self.mu2.shape[0]:self.half_size]",
                            "Subscript"
                        ],
                        [
                            "mu / torch.norm(mu, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_170": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-BicycleGAN/models/divco_model.py": {
        "torch": {
            "cat_124": {
                "variable": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query, pos] + negs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_49": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_50": {
                "variable": {
                    "value": "self.criterionZ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_51": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "self.fake_data_encoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.real_A_encoded, self.fake_B_encoded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "self.real_data_encoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.real_A_encoded, self.real_B_encoded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "self.fake_data_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.real_A_encoded, self.fake_B_random[:half_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "self.real_data_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.real_A_random, self.real_B_random]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "self.optimizer_E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netE.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "self.optimizer_D2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_81": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_223": {
                "input": {
                    "value": "feat_q",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feat_k.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "out.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feat_q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_178": {
                "input": {
                    "value": "1 + self.logvar - self.mu.pow(2) - self.logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_79": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_218": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu2[i:self.mu2.shape[0]:self.half_size]",
                            "Subscript"
                        ],
                        [
                            "mu / torch.norm(mu, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-BicycleGAN/models/networks.py": {
        "torch": {
            "DataParallel_56": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "G_Unet_add_input(input_nc, output_nc, nz, 7, ngf, norm_layer=norm_layer, nl_layer=nl_layer, use_dropout=use_dropout, upsample=upsample)",
                            "Call"
                        ],
                        [
                            "G_Unet_add_input(input_nc, output_nc, nz, 8, ngf, norm_layer=norm_layer, nl_layer=nl_layer, use_dropout=use_dropout, upsample=upsample)",
                            "Call"
                        ],
                        [
                            "G_Unet_add_all(input_nc, output_nc, nz, 7, ngf, norm_layer=norm_layer, nl_layer=nl_layer, use_dropout=use_dropout, upsample=upsample)",
                            "Call"
                        ],
                        [
                            "G_Unet_add_all(input_nc, output_nc, nz, 8, ngf, norm_layer=norm_layer, nl_layer=nl_layer, use_dropout=use_dropout, upsample=upsample)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "D_NLayers(input_nc, ndf, n_layers=2, norm_layer=norm_layer, nl_layer=nl_layer)",
                            "Call"
                        ],
                        [
                            "D_NLayers(input_nc, ndf, n_layers=3, norm_layer=norm_layer, nl_layer=nl_layer)",
                            "Call"
                        ],
                        [
                            "D_NLayersMulti(input_nc=input_nc, ndf=ndf, n_layers=2, norm_layer=norm_layer, num_D=num_Ds)",
                            "Call"
                        ],
                        [
                            "D_NLayersMulti(input_nc=input_nc, ndf=ndf, n_layers=3, norm_layer=norm_layer, num_D=num_Ds)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "E_ResNet(input_nc, output_nc, ndf, n_blocks=4, norm_layer=norm_layer, nl_layer=nl_layer, vaeLike=vaeLike)",
                            "Call"
                        ],
                        [
                            "E_ResNet(input_nc, output_nc, ndf, n_blocks=5, norm_layer=norm_layer, nl_layer=nl_layer, vaeLike=vaeLike)",
                            "Call"
                        ],
                        [
                            "E_NLayers(input_nc, output_nc, ndf, n_layers=4, norm_layer=norm_layer, nl_layer=nl_layer, vaeLike=vaeLike)",
                            "Call"
                        ],
                        [
                            "E_NLayers(input_nc, output_nc, ndf, n_layers=5, norm_layer=norm_layer, nl_layer=nl_layer, vaeLike=vaeLike)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LambdaLR_76": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_295": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "grad_424": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(interpolatesv)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolatesv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_data",
                            "variable"
                        ],
                        [
                            "fake_data",
                            "variable"
                        ],
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_512": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_546": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_556": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_566": {
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_574": {
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_581": {
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_595": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_615": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_642": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_711": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_739": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*down",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_741": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*up",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_786": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_787": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(ndf * nf_mult, output_nc)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_78": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_203": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_314": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_348": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_467": {
                "variable": {
                    "value": "x_with_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, z_img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_563": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_564": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_571": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_572": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_580": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_638": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(output_ndf, output_nc)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_639": {
                "variable": {
                    "value": "self.fcVar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(output_ndf, output_nc)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_641": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(output_ndf, output_nc)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_747": {
                "variable": {
                    "value": "x_and_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, z_img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_789": {
                "variable": {
                    "value": "self.fcVar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(ndf * nf_mult, output_nc)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_80": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_213": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + nz",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_214": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_234": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_274": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + nz",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_274": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_289": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_291": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_294": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "mean_316": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input - target) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.abs(input - target)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_318": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input - target) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.abs(input - target)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_345": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_350": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_477": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_509": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + nz",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "cat_552": {
                "tensors": {
                    "value": "[self.model(x), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_630": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + nz",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_636": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_708": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + nz",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_771": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + nz",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "AvgPool2d_785": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_82": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "opt.niter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_225": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_281": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_283": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_416": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_425": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_480": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_481": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_482": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_501": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_695": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_757": {
                "tensors": {
                    "value": "[x1, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_761": {
                "tensors": {
                    "value": "[self.up(x2), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_780": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_208": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_503": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReplicationPad2d_697": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_718": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_787": {
                "in_features": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_638": {
                "in_features": {
                    "value": "output_ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_639": {
                "in_features": {
                    "value": "output_ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_641": {
                "in_features": {
                    "value": "output_ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_738": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_789": {
                "in_features": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_542": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-BicycleGAN/options/base_options.py": {
        "torch": {
            "set_device_140": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-BicycleGAN/util/util.py": {
        "torch": {
            "mean_59": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_59": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-DCGAN/model.py": {
        "torch": {
            "Adam_17": {
                "variable": {
                    "value": "self.gen_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_18": {
                "variable": {
                    "value": "self.dis_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BCELoss_20": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_21": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.class_num, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "z_conc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.z_random] + self.z_random2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "label_conc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.label_one_hot] * (self.opt.num_negative + 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "self.image_display",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_image.detach().cpu(), self.fake_image1.cpu(), self.fake_image2[:self.real_image.size(0)].cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_128": {
                "variable": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_fake[:self.real_image.size(0)]",
                            "Subscript"
                        ],
                        [
                            "netD.forward(fake, label, enc_feat)",
                            "Call"
                        ],
                        [
                            "netD.forward(fake, label)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_129": {
                "variable": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD.forward(real, label)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_130": {
                "variable": {
                    "value": "ad_fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_fake[:self.real_image.size(0)]",
                            "Subscript"
                        ],
                        [
                            "netD.forward(fake, label, enc_feat)",
                            "Call"
                        ],
                        [
                            "netD.forward(fake, label)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(pred_fake).cuda(self.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_131": {
                "variable": {
                    "value": "ad_true_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD.forward(real, label)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(pred_real).cuda(self.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_137": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_fake[:self.real_image.size(0)]",
                            "Subscript"
                        ],
                        [
                            "netD.forward(fake, label, enc_feat)",
                            "Call"
                        ],
                        [
                            "netD.forward(fake, label)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_138": {
                "variable": {
                    "value": "loss_G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_fake[:self.real_image.size(0)]",
                            "Subscript"
                        ],
                        [
                            "netD.forward(fake, label, enc_feat)",
                            "Call"
                        ],
                        [
                            "netD.forward(fake, label)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(pred_fake).cuda(self.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_146": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'dis': self.D.state_dict(), 'gen': self.G.state_dict(), 'dis_opt': self.dis_opt.state_dict(), 'gen_opt': self.gen_opt.state_dict(), 'ep': ep, 'total_it': total_it}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "(image_real, image_fake1, image_fake2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "batchSize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_109": {
                "input": {
                    "value": "feat_q",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feat_k.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "out.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feat_q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_101": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feats[i:self.feats.shape[0]:self.real_image.size(0)].view(self.opt.num_negative + 2, -1)",
                            "Call"
                        ],
                        [
                            "logits / torch.norm(logits, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-DCGAN/networks.py": {
        "torch": {
            "ConvTranspose2d_12": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opts.nz + opts.class_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.deconv1_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_15": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.deconv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_18": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.deconv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_21": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_22": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input.unsqueeze(2).unsqueeze(3), label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3 + opts.class_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_46": {
                "variable": {
                    "value": "self.lrelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.conv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_49": {
                "variable": {
                    "value": "self.lrelu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.conv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "variable": {
                    "value": "self.lrelu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_54": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.enc_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-DCGAN/test.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(opts.dataroot, train=False, download=True, transform=transforms.Compose([transforms.Resize(opts.img_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-DCGAN/train.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(opts.dataroot, train=True, download=True, transform=transforms.Compose([transforms.Resize(opts.img_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-DRIT/dataset.py": {
        "torch": {}
    },
    "DivCo-DRIT/model.py": {
        "torch": {
            "Adam_47": {
                "variable": {
                    "value": "self.disA_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disA.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "self.disB_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disB.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "self.disA2_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disA2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "self.disB2_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disB2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "self.disContent_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disContent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dcontent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr / 2.5",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "self.enc_c_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.enc_c.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "self.enc_a_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.enc_a.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "self.gen_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1Loss_57": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_58": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_82": {
                "variable": {
                    "value": "self.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "input_content_forA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.z_content_b, self.z_content_a, self.z_content_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "input_content_forB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.z_content_a, self.z_content_b, self.z_content_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "input_attr_forA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.z_attr_a, self.z_attr_a, self.z_random]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "input_attr_forB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.z_attr_b, self.z_attr_b, self.z_random]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_141": {
                "variable": {
                    "value": "(self.fake_A_encoded, self.fake_AA_encoded, self.fake_A_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_fakeA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen(input_content_forA, input_attr_forA, True)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_content_a.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_142": {
                "variable": {
                    "value": "(self.fake_B_encoded, self.fake_BB_encoded, self.fake_B_random)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_fakeB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen(input_content_forB, input_attr_forB, False)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_content_a.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query, pos] + negs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_429": {
                "variable": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_430": {
                "variable": {
                    "value": "encoding_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(mu, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_434": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_518": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images_a[0:1, :], images_b1[0:1, :], images_b2[0:1, :], images_b2x[0:1, :], images_b3[0:1, :], images_a5[0:1, :], images_a4[0:1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_519": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images_b[0:1, :], images_a1[0:1, :], images_a2[0:1, :], images_a2x[0:1, :], images_a3[0:1, :], images_b5[0:1, :], images_b4[0:1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_85": {
                "variable": {
                    "value": "self.disA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.disA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_86": {
                "variable": {
                    "value": "self.disB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.disB",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_87": {
                "variable": {
                    "value": "self.disA2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.disA2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_88": {
                "variable": {
                    "value": "self.disB2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.disB2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_89": {
                "variable": {
                    "value": "self.disContent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.disContent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_90": {
                "variable": {
                    "value": "self.enc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.enc_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_91": {
                "variable": {
                    "value": "self.enc_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.enc_a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "self.image_display",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A_encoded[0:1].detach().cpu(), self.fake_B_encoded[0:1].detach().cpu(), self.fake_B_random[0:1].detach().cpu(), self.fake_AA_encoded[0:1].detach().cpu(), self.fake_A_recon[0:1].detach().cpu(), self.real_B_encoded[0:1].detach().cpu(), self.fake_A_encoded[0:1].detach().cpu(), self.fake_A_random[0:1].detach().cpu(), self.fake_BB_encoded[0:1].detach().cpu(), self.fake_B_recon[0:1].detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__211": {
                "parameters": {
                    "value": "self.disContent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__247": {
                "parameters": {
                    "value": "self.disContent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_255": {
                "variable": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs_fake",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_256": {
                "variable": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_257": {
                "variable": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "nn.functional.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_258": {
                "variable": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "nn.functional.sigmoid(out_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_259": {
                "variable": {
                    "value": "ad_fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "nn.functional.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(out_fake).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_260": {
                "variable": {
                    "value": "ad_true_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "nn.functional.sigmoid(out_b)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(out_real).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_269": {
                "variable": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs_fake",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_270": {
                "variable": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_271": {
                "variable": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_real.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_fake.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_273": {
                "variable": {
                    "value": "ad_true_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.sigmoid(out_b)",
                            "Call"
                        ],
                        [
                            "nn.functional.sigmoid(out_b)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(out_real).cuda()",
                            "Call"
                        ],
                        [
                            "torch.ones(out_real.size(0)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_274": {
                "variable": {
                    "value": "ad_fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.sigmoid(out_a)",
                            "Call"
                        ],
                        [
                            "nn.functional.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(out_fake).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(out_fake.size(0)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_352": {
                "variable": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs",
                            "variable"
                        ],
                        [
                            "torch.mm(feat_q, feat_k.transpose(1, 0)) / self.opt.tau",
                            "BinOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_354": {
                "variable": {
                    "value": "ad_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "nn.functional.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * torch.ones(outputs_fake.size(0)).cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_361": {
                "variable": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs_fake",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_362": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "nn.functional.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_500": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'disA': self.disA.module.state_dict(), 'disA2': self.disA2.module.state_dict(), 'disB': self.disB.module.state_dict(), 'disB2': self.disB2.module.state_dict(), 'disContent': self.disContent.module.state_dict(), 'enc_c': self.enc_c.module.state_dict(), 'enc_a': self.enc_a.module.state_dict(), 'gen': self.gen.module.state_dict(), 'disA_opt': self.disA_opt.state_dict(), 'disA2_opt': self.disA2_opt.state_dict(), 'disB_opt': self.disB_opt.state_dict(), 'disB2_opt': self.disB2_opt.state_dict(), 'disContent_opt': self.disContent_opt.state_dict(), 'enc_c_opt': self.enc_c_opt.state_dict(), 'enc_a_opt': self.enc_a_opt.state_dict(), 'gen_opt': self.gen_opt.state_dict(), 'ep': ep, 'total_it': total_it}",
                            "Dict"
                        ],
                        [
                            "{'disA': self.disA.state_dict(), 'disA2': self.disA2.state_dict(), 'disB': self.disB.state_dict(), 'disB2': self.disB2.state_dict(), 'disContent': self.disContent.state_dict(), 'enc_c': self.enc_c.state_dict(), 'enc_a': self.enc_a.state_dict(), 'gen': self.gen.state_dict(), 'disA_opt': self.disA_opt.state_dict(), 'disA2_opt': self.disA2_opt.state_dict(), 'disB_opt': self.disB_opt.state_dict(), 'disB2_opt': self.disB2_opt.state_dict(), 'disContent_opt': self.disContent_opt.state_dict(), 'enc_c_opt': self.enc_c_opt.state_dict(), 'enc_a_opt': self.enc_a_opt.state_dict(), 'gen_opt': self.gen_opt.state_dict(), 'ep': ep, 'total_it': total_it}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_520": {
                "tensors": {
                    "value": "(row1, row2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_104": {
                "*size": {
                    "value": "batchSize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_363": {
                "input": {
                    "value": "outputs_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "nn.functional.sigmoid(out_a)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(outputs_fake).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_420": {
                "input": {
                    "value": "feat_q",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feat_k.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_421": {
                "*size": {
                    "value": "out.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feat_q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_534": {
                "input": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_309": {
                "input": {
                    "value": "kl_element_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_a.pow(2).add_(self.logvar_a.exp()).mul_(-1).add_(1).add_(self.logvar_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_311": {
                "input": {
                    "value": "kl_element_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_b.pow(2).add_(self.logvar_b.exp()).mul_(-1).add_(1).add_(self.logvar_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_353": {
                "*size": {
                    "value": "outputs_fake.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_382": {
                "input": {
                    "value": "mu2_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu2_a[i:self.mu2_a.shape[0]:self.half_size]",
                            "Subscript"
                        ],
                        [
                            "self.z_attr_random_a[i:self.z_attr_random_a.shape[0]:self.half_size]",
                            "Subscript"
                        ],
                        [
                            "mu2_a / torch.norm(mu2_a, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_383": {
                "input": {
                    "value": "mu2_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu2_b[i:self.mu2_b.shape[0]:self.half_size]",
                            "Subscript"
                        ],
                        [
                            "self.z_attr_random_b[i:self.z_attr_random_b.shape[0]:self.half_size]",
                            "Subscript"
                        ],
                        [
                            "mu2_b / torch.norm(mu2_b, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_390": {
                "input": {
                    "value": "torch.abs(self.mu2_a - torch.cat(self.z_random, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_391": {
                "input": {
                    "value": "torch.abs(self.mu2_b - torch.cat(self.z_random, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_393": {
                "input": {
                    "value": "torch.abs(self.z_attr_random_a - torch.cat(self.z_random, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_394": {
                "input": {
                    "value": "torch.abs(self.z_attr_random_b - torch.cat(self.z_random, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_390": {
                "input": {
                    "value": "self.mu2_a - torch.cat(self.z_random, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_391": {
                "input": {
                    "value": "self.mu2_b - torch.cat(self.z_random, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_393": {
                "input": {
                    "value": "self.z_attr_random_a - torch.cat(self.z_random, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_394": {
                "input": {
                    "value": "self.z_attr_random_b - torch.cat(self.z_random, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_390": {
                "tensors": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "tensors": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_393": {
                "tensors": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_394": {
                "tensors": {
                    "value": "self.z_random",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-DRIT/networks.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_33": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.Diss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.convA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*encA_c",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.convB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*encB_c",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.model_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.model_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.fc_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(output_ndf, output_nc)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "self.fcVar_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(output_ndf, output_nc)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.conv_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers_A",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.fc_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(output_ndf, output_nc)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.fcVar_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(output_ndf, output_nc)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.conv_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers_B",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_277": {
                "variable": {
                    "value": "self.decA5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*decA5",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.decB5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*decB5",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "variable": {
                    "value": "self.mlpA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_299": {
                "variable": {
                    "value": "self.mlpB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_315": {
                "variable": {
                    "value": "(z1, z2, z3, z4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlpA(z)",
                            "Call"
                        ],
                        [
                            "self.mlpB(z)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.tch_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_326": {
                "variable": {
                    "value": "(z1, z2, z3, z4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlpA(z)",
                            "Call"
                        ],
                        [
                            "self.mlpB(z)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.tch_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_342": {
                "variable": {
                    "value": "self.dec_share",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dec_share",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "self.decA1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*decA1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_356": {
                "variable": {
                    "value": "self.decA2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[decA2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "variable": {
                    "value": "self.decA3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[decA3]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_358": {
                "variable": {
                    "value": "self.decA4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*decA4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_372": {
                "variable": {
                    "value": "self.decB1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*decB1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_373": {
                "variable": {
                    "value": "self.decB2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[decB2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_374": {
                "variable": {
                    "value": "self.decB3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[decB3]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_375": {
                "variable": {
                    "value": "self.decB4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*decB4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "x_and_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out0, z_img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "x_and_z2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, z_img2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "x_and_z3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out2, z_img3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "x_and_z4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out3, z_img4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "x_and_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out0, z_img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "x_and_z2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, z_img2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "x_and_z3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out2, z_img3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "x_and_z4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out3, z_img4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_423": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "cur_ep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_434": {
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_440": {
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_504": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_522": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_536": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_554": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_569": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv3x3(dim, dim, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_572": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv3x3(dim, dim, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_575": {
                "variable": {
                    "value": "self.blk1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1x1(dim + dim_extra, dim + dim_extra)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_580": {
                "variable": {
                    "value": "self.blk2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1x1(dim + dim_extra, dim + dim_extra)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_588": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_620": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "dot_653": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.matmul(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight.new_empty(height).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.matmul(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_676": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.conv_share",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc_share",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "StepLR_425": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opts.n_ep_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "cur_ep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_432": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_433": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_439": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_464": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_464": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_482": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_out, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_483": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_out, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_564": {
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_566": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_145": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "input_dim_a",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_148": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_151": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_154": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_157": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "in_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_160": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_163": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "input_dim_b",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_166": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_169": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_172": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_175": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_178": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_207": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "input_dim_a",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_213": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_218": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "in_channels": {
                    "value": "input_dim_b",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_224": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_275": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim_a",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_289": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim_b",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_294": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_295": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_297": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_298": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tch_add * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_301": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_302": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_303": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_304": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tch_add * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "layer_norm_488": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.expand(normalized_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.expand(normalized_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "layer_norm_490": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_514": {
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_521": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_532": {
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_533": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_534": {
                "num_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_535": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_543": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_543": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_548": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_549": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_551": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_564": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_564": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_571": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_574": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_577": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_579": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_582": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_584": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_598": {
                "tensors": {
                    "value": "[o1, z_expand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_600": {
                "tensors": {
                    "value": "[o3, z_expand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_610": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_617": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_619": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_649": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_651": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(weight_mat.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_652": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_653": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "weight_mat.reshape(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_661": {
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / sigma",
                            "BinOp"
                        ],
                        [
                            "getattr(module, self.name)",
                            "Call"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_354": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim_a",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_371": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim_b",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_482": {
                "*size": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_483": {
                "*size": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_518": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_520": {
                "num_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_553": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_587": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "tch * 2",
                            "BinOp"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "ini_tch",
                            "variable"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "256 + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ],
                        [
                            "tch // 2",
                            "BinOp"
                        ],
                        [
                            "tch + self.nz",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "in_features": {
                    "value": "output_ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ],
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "output_ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ],
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_225": {
                "in_features": {
                    "value": "output_ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ],
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_226": {
                "in_features": {
                    "value": "output_ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ],
                        [
                            "ndf * min(max_ndf, n + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_516": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_651": {
                "input": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.matmul(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight.new_empty(height).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_652": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "weight_mat.reshape(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DivCo-DRIT/test.py": {
        "torch": {
            "DataLoader_19": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_single(opts, 'A', opts.input_dim_a)",
                            "Call"
                        ],
                        [
                            "dataset_single(opts, 'B', opts.input_dim_b)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DivCo-DRIT/train.py": {
        "torch": {
            "DataLoader_15": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_unpair(opts)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}