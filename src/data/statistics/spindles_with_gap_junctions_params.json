{
    "fns/functionsTF.py": {
        "tensorflow": {
            "GPUOptions_169": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_172": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "InteractiveSession_180": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False, inter_op_parallelism_threads=0, intra_op_parallelism_threads=0, gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_192": {
                "variable": {
                    "value": "self.noiseScaling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1 / (1 / (2 * 2 / self.dt)) ** 0.5 * self.sigmaNoise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_193": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.dt / (self.tau_q + self.dt)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_204": {
                "variable": {
                    "value": "VE1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "vConnE1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones((NE1, 1)), np.zeros((NI1 + NE2 + NI2, 1))])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_205": {
                "variable": {
                    "value": "VE2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "vConnE2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((NE1 + NI1 + NI2, 1)), np.ones((NE2, 1))])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_206": {
                "variable": {
                    "value": "VI1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "vConnI1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((NE1, 1)), np.ones((NI1, 1)), np.zeros((NE2 + NI2, 1))])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_207": {
                "variable": {
                    "value": "VI2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "vConnI2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.zeros((NE1 + NI1, 1)), np.ones((NI2, 1)), np.zeros((NE2, 1))])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_813": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "iChem.assign(iChem_)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "iBack.assign(iBack_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_827": {
                "variable": {
                    "value": "plast_before",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "wGap.assign(wGap_before_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_830": {
                "variable": {
                    "value": "plast_after",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "wGap.assign(wGap_after_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_183": {
                "variable": {
                    "value": "self.run_options",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_184": {
                "variable": {
                    "value": "self.run_metadata",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_384": {
                "variable": {
                    "value": "WE1E1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WE1E1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WE1E1)",
                            "Call"
                        ],
                        [
                            "tf.Variable(WE1E1, dtype=tf.float32, name='E1E1')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E1E1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_385": {
                "variable": {
                    "value": "WE1E2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WE1E2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "WE1E2.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WE1E2, dtype=tf.float32, name='E1E2')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E1E2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_386": {
                "variable": {
                    "value": "WE1I1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WE1I1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WE1I1)",
                            "Call"
                        ],
                        [
                            "WE1I1.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WE1I1, dtype=tf.float32, name='E1I1')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E1I1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_387": {
                "variable": {
                    "value": "WE1I2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WE1I2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WE1I2)",
                            "Call"
                        ],
                        [
                            "WE1I2.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WE1I2, dtype=tf.float32, name='E1I2')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E1I2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_389": {
                "variable": {
                    "value": "WE2E1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WE2E1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "WE2E1.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WE2E1, dtype=tf.float32, name='E2E1')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E2E1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_390": {
                "variable": {
                    "value": "WE2E2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WE2E2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WE2E2)",
                            "Call"
                        ],
                        [
                            "tf.Variable(WE2E2, dtype=tf.float32, name='E2E2')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E2E2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_391": {
                "variable": {
                    "value": "WE2I1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WE2I1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "WE2I1.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WE2I1, dtype=tf.float32, name='E2I1')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E2I1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_392": {
                "variable": {
                    "value": "WE2I2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WE2I2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WE2I2)",
                            "Call"
                        ],
                        [
                            "WE2I2.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WE2I2, dtype=tf.float32, name='E2I2')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E2I2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_394": {
                "variable": {
                    "value": "WI1E1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WI1E1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WI1E1)",
                            "Call"
                        ],
                        [
                            "WI1E1.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WI1E1, dtype=tf.float32, name='I1E1')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "I1E1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_395": {
                "variable": {
                    "value": "WI1E2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WI1E2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WI1E2)",
                            "Call"
                        ],
                        [
                            "WI1E2.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WI1E2, dtype=tf.float32, name='I1E2')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "I1E2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_396": {
                "variable": {
                    "value": "WI1I1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WI1I1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WI1I1)",
                            "Call"
                        ],
                        [
                            "tf.Variable(WI1I1, dtype=tf.float32, name='I1I1')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "I1I1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_397": {
                "variable": {
                    "value": "WI1I2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WI1I2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WI1I2)",
                            "Call"
                        ],
                        [
                            "WI1I2.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WI1I2, dtype=tf.float32, name='I1I2')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "I1I2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_399": {
                "variable": {
                    "value": "WI2E1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WI2E1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WI2E1)",
                            "Call"
                        ],
                        [
                            "WI2E1.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WI2E1, dtype=tf.float32, name='I2E1')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "I2E1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_400": {
                "variable": {
                    "value": "WI2E2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WI2E2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WI2E2)",
                            "Call"
                        ],
                        [
                            "WI2E2.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WI2E2, dtype=tf.float32, name='I2E2')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "I2E2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_401": {
                "variable": {
                    "value": "WI2I1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WI2I1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WI2I1)",
                            "Call"
                        ],
                        [
                            "WI2I1.T",
                            "Attribute"
                        ],
                        [
                            "tf.Variable(WI2I1, dtype=tf.float32, name='I2I1')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "I2I1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_402": {
                "variable": {
                    "value": "WI2I2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WI2I2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WI2I2)",
                            "Call"
                        ],
                        [
                            "tf.Variable(WI2I2, dtype=tf.float32, name='I2I2')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "I2I2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_404": {
                "variable": {
                    "value": "WIIg1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WIIg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WIIg1)",
                            "Call"
                        ],
                        [
                            "tf.Variable(WIIg1, dtype=tf.float32, name='IIg1')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "IIg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_405": {
                "variable": {
                    "value": "WIIg2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WIIg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W0.copy()",
                            "Call"
                        ],
                        [
                            "diag(WIIg2)",
                            "Call"
                        ],
                        [
                            "tf.Variable(WIIg2, dtype=tf.float32, name='IIg2')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "IIg2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_406": {
                "variable": {
                    "value": "WIIgS",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "WIIgS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_shared_gap(W0, sG) * gS",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(WIIgS, dtype=tf.float32, name='IIgS')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "IIgS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_408": {
                "variable": {
                    "value": "connDelete",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "connDelete",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(A > self.propToDelete) * 1",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(connDelete, dtype=tf.float32, name='connDelete')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "connDelete",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_419": {
                "initial_value": {
                    "value": "tf.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_628": {
                "variable": {
                    "value": "connect",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "wGap.assign(tf.add(wGap, wGapS))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_681": {
                "variable": {
                    "value": "vvv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_ < -70",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_694": {
                "variable": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(q_, self.q_thresh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_696": {
                "variable": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(LowSp_, self.burst_thresh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_700": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p_ * (vectI1 + vectI2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((1, N))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bursts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_701": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vv_ * (1 - p_) * (vectI1 + vectI2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((1, N))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "spikes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_711": {
                "variable": {
                    "value": "dwGap_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dwLTP_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_LTP * tf.add(B, tf.transpose(B, name='tr_spikes'))",
                            "BinOp"
                        ],
                        [
                            "A_LTP * tf.multiply(tf.ones([N, N]) - wGap / g0, B + tf.transpose(B))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "dt * dwLTD_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_715": {
                "variable": {
                    "value": "wGap_",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "wGap_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wGap + dwGap_",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(wGap_, clip_value_min=0, clip_value_max=np.inf)",
                            "Call"
                        ],
                        [
                            "tf.multiply(wGap_, connDelete)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_717": {
                "variable": {
                    "value": "wGap_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wGap_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wGap + dwGap_",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(wGap_, clip_value_min=0, clip_value_max=np.inf)",
                            "Call"
                        ],
                        [
                            "tf.multiply(wGap_, connDelete)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "connDelete",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(A > self.propToDelete) * 1",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(connDelete, dtype=tf.float32, name='connDelete')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_718": {
                "variable": {
                    "value": "wGap_before_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wGap_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wGap + dwGap_",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(wGap_, clip_value_min=0, clip_value_max=np.inf)",
                            "Call"
                        ],
                        [
                            "tf.multiply(wGap_, connDelete)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "connIIg1 + connIIg2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_719": {
                "variable": {
                    "value": "wGap_after_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wGap_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wGap + dwGap_",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(wGap_, clip_value_min=0, clip_value_max=np.inf)",
                            "Call"
                        ],
                        [
                            "tf.multiply(wGap_, connDelete)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "connIIg1 + connIIg2 + connIIgS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_727": {
                "variable": {
                    "value": "debug",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.scatter_update(Am, tf.to_int32(sim_index), tf.reduce_mean(A))",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.scatter_update(Bm, tf.to_int32(sim_index), tf.reduce_mean(B))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_734": {
                "variable": {
                    "value": "vvmeanE1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vv_ * vectE1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_736": {
                "variable": {
                    "value": "vvmeanI1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vv_ * vectI1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_740": {
                "variable": {
                    "value": "vmeanE1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_ * vectE1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_742": {
                "variable": {
                    "value": "vmeanI1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v_ * vectI1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_746": {
                "variable": {
                    "value": "imeanE1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "I_ * vectE1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_748": {
                "variable": {
                    "value": "imeanI1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "I_ * vectI1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_751": {
                "variable": {
                    "value": "pmeanI1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_ * vectI1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_752": {
                "variable": {
                    "value": "qmeanI1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_ * vectI1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_753": {
                "variable": {
                    "value": "qqmeanI1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "qq_ * vectI1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_754": {
                "variable": {
                    "value": "lowspmeanI1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "LowSp_[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_756": {
                "variable": {
                    "value": "iGapm_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iGap_ * vectI1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_758": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.scatter_update(vvmE1, tf.to_int32(sim_index / monitor_step), vvmeanE1_)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.scatter_update(vvmI1, tf.to_int32(sim_index / monitor_step), vvmeanI1_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_783": {
                "variable": {
                    "value": "update_single",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.scatter_update(vAll, tf.to_int32(sim_index), tf.reshape(v_, (N,)))",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.scatter_update(kAll, tf.to_int32(sim_index), tf.reshape(LowSp_, (N,)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_791": {
                "variable": {
                    "value": "update_sim_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "sim_index.assign_add(one)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_796": {
                "variable": {
                    "value": "WI1I1m_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "WII * connIIg1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_797": {
                "variable": {
                    "value": "g1m_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "wGap * connIIg1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_800": {
                "variable": {
                    "value": "update_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.scatter_update(WI1I1m, tf.to_int32(sim_index / weight_step), WI1I1m_)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.scatter_update(g1m, tf.to_int32(sim_index / weight_step), g1m_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_808": {
                "variable": {
                    "value": "spike_update",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.scatter_update(spikes, tf.to_int32(sim_index), tf.reshape(vv_, (N,)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_835": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_835": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_419": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_432": {
                "name": {
                    "value": "spiking_bursting",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_441": {
                "name": {
                    "value": "monitoring",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_576": {
                "variable": {
                    "value": "wGap",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "Wgap1 + Wgap2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_578": {
                "variable": {
                    "value": "wGap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wGap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(Wgap1 + Wgap2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(wGap, connDelete)",
                            "Call"
                        ],
                        [
                            "tf.Variable(wGap, name='wGap')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "connDelete",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(A > self.propToDelete) * 1",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(connDelete, dtype=tf.float32, name='connDelete')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_580": {
                "variable": {
                    "value": "wGap",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "wGap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(Wgap1 + Wgap2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(wGap, connDelete)",
                            "Call"
                        ],
                        [
                            "tf.Variable(wGap, name='wGap')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "wGap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_583": {
                "variable": {
                    "value": "A_LTD",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.A_LTD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_584": {
                "variable": {
                    "value": "A_LTP",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.A_LTP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_590": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.v0 * tf.random_normal([N, 1], mean=self.v_init_mean, stddev=self.v_init_std, name='v')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_596": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(self.input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_598": {
                "variable": {
                    "value": "tauvSubnet",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.tauv1 * vectI1 + self.tauv2 * vectI2 + (vectE1 + vectE2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "tauv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_604": {
                "variable": {
                    "value": "kMult",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_609": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "dt * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "timestep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_614": {
                "variable": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "sim_index",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_615": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_616": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_623": {
                "name": {
                    "value": "Connect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_633": {
                "name": {
                    "value": "Currents",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_646": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, tf.to_int32(sim_index)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_658": {
                "name": {
                    "value": "Izhikevich",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_685": {
                "name": {
                    "value": "bursting",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_690": {
                "variable": {
                    "value": "k_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(LowSp_, self.burst_thresh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_699": {
                "name": {
                    "value": "plasticity",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_726": {
                "name": {
                    "value": "Debugging",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_732": {
                "name": {
                    "value": "Monitoring",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_795": {
                "name": {
                    "value": "Weights_monitoring",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_807": {
                "name": {
                    "value": "Raster_Plot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_496": {
                "name": {
                    "value": "synaptic_connections",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_586": {
                "name": {
                    "value": "membrane_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_602": {
                "name": {
                    "value": "simulation_params",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_653": {
                "a": {
                    "value": "wGap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(Wgap1 + Wgap2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(wGap, connDelete)",
                            "Call"
                        ],
                        [
                            "tf.Variable(wGap, name='wGap')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.v0 * tf.random_normal([N, 1], mean=self.v_init_mean, stddev=self.v_init_std, name='v'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "GJ1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_653": {
                "x": {
                    "value": "tf.reshape(tf.reduce_sum(wGap, 0), (N, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(self.v0 * tf.random_normal([N, 1], mean=self.v_init_mean, stddev=self.v_init_std, name='v'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "GJ2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_677": {
                "x": {
                    "value": "1 - vv_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(v + dt / self.tau_v_I * (0.25 * (v * v + 110 * v + 45 * 65) - u + I_)) * (vectI1 + vectI2) + (v + dt / self.tau_v_E * (-v + self.Rm * I_)) * (vectE1 + vectE2)",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(vv_, self.v_r_I) * (vectI1 + vectI2) + tf.multiply(vv_, self.v_r_E) * (vectE1 + vectE2) + tf.multiply(1 - vv_, v_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_694": {
                "x": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([N, 1], 'spindles')",
                            "Call"
                        ],
                        [
                            "q - dt / self.tau_q * (q - k_)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_thresh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_696": {
                "x": {
                    "value": "LowSp_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LowSp - dt / self.tau_burst * LowSp + vv_",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.burst_thresh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_703": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(N, N)",
                            "Call"
                        ],
                        [
                            "np.tril(A) + np.tril(A, -1).T",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(p_ * (vectI1 + vectI2), ones, name='bursts')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(A, name='tr_bursts')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_728": {
                "ref": {
                    "value": "Am",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'Am')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reduce_mean(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_729": {
                "ref": {
                    "value": "Bm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'Bm')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reduce_mean(B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_730": {
                "ref": {
                    "value": "dwm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'dwm')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reduce_mean(dwGap_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_759": {
                "ref": {
                    "value": "vvmE1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'vvE1')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "vvmeanE1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(vv_ * vectE1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_761": {
                "ref": {
                    "value": "vvmI1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'vvI1')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "vvmeanI1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(vv_ * vectI1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_764": {
                "ref": {
                    "value": "vmE1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'vE1')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "vmeanE1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(v_ * vectE1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_766": {
                "ref": {
                    "value": "vmI1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'vI1')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "vmeanI1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(v_ * vectI1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_769": {
                "ref": {
                    "value": "imE1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'i1E1')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "imeanE1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(I_ * vectE1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_771": {
                "ref": {
                    "value": "imI1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'i1I1')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "imeanI1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(I_ * vectI1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_774": {
                "ref": {
                    "value": "pmI1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'pm')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "pmeanI1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(p_ * vectI1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_775": {
                "ref": {
                    "value": "qmI1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'qm')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "qmeanI1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(q_ * vectI1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_776": {
                "ref": {
                    "value": "qqmI1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'qm')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "qqmeanI1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(qq_ * vectI1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_778": {
                "ref": {
                    "value": "lowspmI1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'lowspm')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "lowspmeanI1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(LowSp_[:2])",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_780": {
                "ref": {
                    "value": "iGapm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // monitor_step], 'iGap')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / monitor_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "iGapm_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(iGap_ * vectI1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_784": {
                "ref": {
                    "value": "vAll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T, N], 'vAll')",
                            "Call"
                        ],
                        [
                            "self.init_float([1, N], 'vAll')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reshape(v_, (N,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_785": {
                "ref": {
                    "value": "kAll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T, N], 'kAll')",
                            "Call"
                        ],
                        [
                            "self.init_float([1, N], 'kAll')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reshape(LowSp_, (N,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_786": {
                "ref": {
                    "value": "qAll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T, N], 'qAll')",
                            "Call"
                        ],
                        [
                            "self.init_float([1, N], 'qAll')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reshape(q_, (N,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_787": {
                "ref": {
                    "value": "iAll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T, N], 'iAll')",
                            "Call"
                        ],
                        [
                            "self.init_float([1, N], 'iAll')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reshape(I_, (N,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_788": {
                "ref": {
                    "value": "iChemAll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T, N], 'iChem')",
                            "Call"
                        ],
                        [
                            "self.init_float([1, N], 'iChemAll')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reshape(iChem_, (N,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_update_801": {
                "ref": {
                    "value": "WI1I1m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // weight_step], 'WI1I1m')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / weight_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "WI1I1m_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(WII * connIIg1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_802": {
                "ref": {
                    "value": "g1m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T // weight_step], 'gamma_N1')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index / weight_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "g1m_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(wGap * connIIg1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_update_809": {
                "ref": {
                    "value": "spikes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([T, N], 'spikes')",
                            "Call"
                        ],
                        [
                            "self.init_float([1, N], 'spikes')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(sim_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reshape(vv_, (N,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_596": {
                "value": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_624": {
                "input_tensor": {
                    "value": "wGap * connIIg1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_625": {
                "input_tensor": {
                    "value": "wGap * connIIg2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_629": {
                "x": {
                    "value": "wGap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(Wgap1 + Wgap2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(wGap, connDelete)",
                            "Call"
                        ],
                        [
                            "tf.Variable(wGap, name='wGap')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "wGapS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g0_S * connIIgS",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_653": {
                "tensor": {
                    "value": "tf.reduce_sum(wGap, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_672": {
                "x": {
                    "value": "tf.greater(v_, self.v_thresh_I)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_673": {
                "x": {
                    "value": "tf.greater(v_, self.v_thresh_E)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_690": {
                "x": {
                    "value": "LowSp_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LowSp - dt / self.tau_burst * LowSp + vv_",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.burst_thresh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_703": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(N, N)",
                            "Call"
                        ],
                        [
                            "np.tril(A) + np.tril(A, -1).T",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(p_ * (vectI1 + vectI2), ones, name='bursts')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tr_bursts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_706": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(vv_ * (1 - p_) * (vectI1 + vectI2), ones, name='spikes')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(B, name='tr_spikes')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_709": {
                "x": {
                    "value": "tf.ones([N, N]) - wGap / g0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "B + tf.transpose(B)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_728": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_728": {
                "input_tensor": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(N, N)",
                            "Call"
                        ],
                        [
                            "np.tril(A) + np.tril(A, -1).T",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(p_ * (vectI1 + vectI2), ones, name='bursts')",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_729": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_729": {
                "input_tensor": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(vv_ * (1 - p_) * (vectI1 + vectI2), ones, name='spikes')",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_730": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_730": {
                "input_tensor": {
                    "value": "dwGap_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(dwLTP_, dt * dwLTD_)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_759": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_761": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_764": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_766": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_769": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_771": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_774": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_775": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_776": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_778": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_780": {
                "x": {
                    "value": "sim_index / monitor_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_784": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_784": {
                "tensor": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(v + dt / self.tau_v_I * (0.25 * (v * v + 110 * v + 45 * 65) - u + I_)) * (vectI1 + vectI2) + (v + dt / self.tau_v_E * (-v + self.Rm * I_)) * (vectE1 + vectE2)",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(vv_, self.v_r_I) * (vectI1 + vectI2) + tf.multiply(vv_, self.v_r_E) * (vectE1 + vectE2) + tf.multiply(1 - vv_, v_)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_int32_785": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_785": {
                "tensor": {
                    "value": "LowSp_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LowSp - dt / self.tau_burst * LowSp + vv_",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_int32_786": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_786": {
                "tensor": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([N, 1], 'spindles')",
                            "Call"
                        ],
                        [
                            "q - dt / self.tau_q * (q - k_)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_int32_787": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_787": {
                "tensor": {
                    "value": "I_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iGap_ + iChem_ + iEff_",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_int32_788": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_788": {
                "tensor": {
                    "value": "iChem_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iChem + dt / self.tau_I_I * (-iChem + tf.matmul(Wchem + WII, tf.to_float(vv), name='E/IPSPs'))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_int32_801": {
                "x": {
                    "value": "sim_index / weight_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_802": {
                "x": {
                    "value": "sim_index / weight_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_809": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_809": {
                "tensor": {
                    "value": "vv_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(v_, self.v_thresh_I)) * (vectI1 + vectI2) + tf.to_float(tf.greater(v_, self.v_thresh_E)) * (vectE1 + vectE2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_636": {
                "a": {
                    "value": "Wchem + WII",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.to_float(vv)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "E/IPSPs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_653": {
                "input_tensor": {
                    "value": "wGap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(Wgap1 + Wgap2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(wGap, connDelete)",
                            "Call"
                        ],
                        [
                            "tf.Variable(wGap, name='wGap')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_672": {
                "x": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(v + dt / self.tau_v_I * (0.25 * (v * v + 110 * v + 45 * 65) - u + I_)) * (vectI1 + vectI2) + (v + dt / self.tau_v_E * (-v + self.Rm * I_)) * (vectE1 + vectE2)",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(vv_, self.v_r_I) * (vectI1 + vectI2) + tf.multiply(vv_, self.v_r_E) * (vectE1 + vectE2) + tf.multiply(1 - vv_, v_)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.v_thresh_I",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_673": {
                "x": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(v + dt / self.tau_v_I * (0.25 * (v * v + 110 * v + 45 * 65) - u + I_)) * (vectI1 + vectI2) + (v + dt / self.tau_v_E * (-v + self.Rm * I_)) * (vectE1 + vectE2)",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(vv_, self.v_r_I) * (vectI1 + vectI2) + tf.multiply(vv_, self.v_r_E) * (vectE1 + vectE2) + tf.multiply(1 - vv_, v_)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.v_thresh_E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_676": {
                "x": {
                    "value": "vv_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(v_, self.v_thresh_I)) * (vectI1 + vectI2) + tf.to_float(tf.greater(v_, self.v_thresh_E)) * (vectE1 + vectE2)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.v_r_E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_706": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(vv_ * (1 - p_) * (vectI1 + vectI2), ones, name='spikes')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tr_spikes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_636": {
                "x": {
                    "value": "vv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_float([N, 1], 'spiking')",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_646": {
                "x": {
                    "value": "sim_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='sim_index', dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_709": {
                "shape": {
                    "value": "[N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_709": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(vv_ * (1 - p_) * (vectI1 + vectI2), ones, name='spikes')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}