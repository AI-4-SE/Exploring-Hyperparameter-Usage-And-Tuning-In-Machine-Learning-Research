{
    "bbaction/ingestion/ingest.py": {
        "tensorflow": {
            "set_verbosity_6": {
                "level": {
                    "value": "tf.compat.v1.logging.WARN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "self.count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "self.train_unusable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['train_unusable']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "self.validate_unusable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['validate_unusable']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_191": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "join_262": {
                "variable": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[element[0], '/', element[4], '_', element[1], '.mp4']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_268": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(tf.where(element[0] == self.labels), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_271": {
                "variable": {
                    "value": "timestamps",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "element[self.num_cols:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_272": {
                "variable": {
                    "value": "identifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_373": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_468": {
                "variable": {
                    "value": "identifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "enum",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_538": {
                "variable": {
                    "value": "raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.vid_dir + path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorArray_550": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.params['frames_per_clip']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assert_less_equal_62": {
                "x": {
                    "value": "self.params['val_clips_per_vid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.params['test_clips_per_vid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "message": {
                    "value": "\"'val_clips_per_vid' should be less than or equal to 'test_clips_per_vid'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_less_equal_70": {
                "x": {
                    "value": "self.params['fps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.params['download_fps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "message": {
                    "value": "\"'fps' should be less than or equal to 'download_fps'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "test_tables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._map_test_dataset(val_tables)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "self.tfds_dir + 'test'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordDataset_221": {
                "filenames": {
                    "value": "records[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CsvDataset_241": {
                "filenames": {
                    "value": "ts_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data_dir + 'timestamps.csv'",
                            "BinOp"
                        ]
                    ]
                },
                "record_defaults": {
                    "value": "field_dtypes + ts_dtypes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exclude_cols": {
                    "value": "[self.num_cols + self.num_ts_cols]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Feature_381": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_387": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_400": {
                "variable": {
                    "value": "clips_per_vid",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['train_clips_per_vid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_492": {
                "variable": {
                    "value": "timestamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "call_bash(command=f'wc -l < {csv_file}')",
                            "Call"
                        ],
                        [
                            "int(total.decode('utf-8').strip('\\n')) - 1",
                            "BinOp"
                        ],
                        [
                            "-tf.ones([], tf.int64)",
                            "UnaryOp"
                        ],
                        [
                            "tf.shape(timestamps, tf.int64)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_599": {
                "path": {
                    "value": "self.tfds_dir + split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "element_spec": {
                    "value": "DataGenerator._get_element_spec(num_ts_cols)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "glob_657": {
                "variable": {
                    "value": "records",
                    "type": "Variable",
                    "possible_values": []
                },
                "pattern": {
                    "value": "self.params['gcs_data'].rstrip('/') + '/' + split + f'/{split}_*.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "glob_664": {
                "variable": {
                    "value": "records",
                    "type": "Variable",
                    "possible_values": []
                },
                "pattern": {
                    "value": "self.records_dir + split + f'/{split}*.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_155": {
                "variable": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "self.tfds_dir + f'{split}_{i}'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "element_spec": {
                    "value": "DataGenerator._get_element_spec(self.num_ts_cols)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordDataset_224": {
                "filenames": {
                    "value": "records[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_269": {
                "x": {
                    "value": "tf.where(element[0] == self.labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordWriter_329": {
                "path": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.records_dir + split + f'/{split}_{record_num}.tfrecord'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_405": {
                "variable": {
                    "value": "clips_per_vid",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.maximum(self.params['val_clips_per_vid'], self.params['test_clips_per_vid'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_non_negative_485": {
                "x": {
                    "value": "timestamps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(element[self.num_cols:])",
                            "Call"
                        ],
                        [
                            "timestamps[:last_idx + step:step]",
                            "Subscript"
                        ]
                    ]
                },
                "message": {
                    "value": "Negative values found.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_full_match_495": {
                "input": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.strings.join([element[0], '/', element[4], '_', element[1], '.mp4'])",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": ".*/train_.*",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_509": {
                "variable": {
                    "value": "timestamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random.shuffle(indices)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_607": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_608": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_609": {
                "shape": {
                    "value": "(num_ts_cols,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_610": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_133": {
                "variable": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "self.tfds_dir + f'{split}_{i - 1}'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "element_spec": {
                    "value": "DataGenerator._get_element_spec(self.num_ts_cols)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_269": {
                "condition": {
                    "value": "element[0] == self.labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Features_374": {
                "feature": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'frames': DataGenerator._bytes_list_feature(frames), 'label': DataGenerator._int64_feature(label), 'timestamp': DataGenerator._int64_feature(timestamp), 'identifier': DataGenerator._int64_feature(identifier)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "BytesList_382": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v.numpy() for v in value]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Int64List_388": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_479": {
                "condition": {
                    "value": "timestamps != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_482": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_489": {
                "input": {
                    "value": "timestamps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(element[self.num_cols:])",
                            "Call"
                        ],
                        [
                            "timestamps[:last_idx + step:step]",
                            "Subscript"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_494": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_500": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "idx_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx_range * self.count",
                            "BinOp"
                        ]
                    ]
                },
                "limit": {
                    "value": "idx_start + idx_range",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_505": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "limit": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "call_bash(command=f'wc -l < {csv_file}')",
                            "Call"
                        ],
                        [
                            "int(total.decode('utf-8').strip('\\n')) - 1",
                            "BinOp"
                        ],
                        [
                            "-tf.ones([], tf.int64)",
                            "UnaryOp"
                        ],
                        [
                            "tf.shape(timestamps, tf.int64)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "regex_full_match_513": {
                "input": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.strings.join([element[0], '/', element[4], '_', element[1], '.mp4'])",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": ".*/validate_.*",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_125": {
                "obj": {
                    "value": "temp_ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._csv_to_tfds(ts_file)",
                            "Call"
                        ],
                        [
                            "self._map_dataset(temp_ds)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "self.tfds_dir + f'{split}_{i}'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.data.experimental.load(path=self.tfds_dir + f'{split}_{i - 1}', element_spec=DataGenerator._get_element_spec(self.num_ts_cols))",
                            "Call"
                        ],
                        [
                            "ds.concatenate(temp_ds)",
                            "Call"
                        ],
                        [
                            "tf.data.experimental.load(path=self.tfds_dir + f'{split}_{i}', element_spec=DataGenerator._get_element_spec(self.num_ts_cols))",
                            "Call"
                        ],
                        [
                            "self._map_frames(dataset)",
                            "Call"
                        ],
                        [
                            "self._map_timestamps(dataset)",
                            "Call"
                        ],
                        [
                            "ds.concatenate(self._generate_element(dataset, clips_per_vid, element=element))",
                            "Call"
                        ],
                        [
                            "ds",
                            "Name"
                        ],
                        [
                            "dataset.enumerate()",
                            "Call"
                        ],
                        [
                            "ds.map(self._get_identifier, num_parallel_calls=tf.data.experimental.AUTOTUNE, deterministic=True)",
                            "Call"
                        ],
                        [
                            "self._map_timestamps(ds)",
                            "Call"
                        ],
                        [
                            "ds.map(self._get_video, num_parallel_calls=tf.data.experimental.AUTOTUNE, deterministic=True)",
                            "Call"
                        ],
                        [
                            "ds.map(self._get_frames, num_parallel_calls=tf.data.experimental.AUTOTUNE, deterministic=True)",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(records)",
                            "Call"
                        ],
                        [
                            "ds.interleave(tf.data.TFRecordDataset, cycle_length=self.params['validate_size'], block_length=1, num_parallel_calls=tf.data.experimental.AUTOTUNE, deterministic=True)",
                            "Call"
                        ],
                        [
                            "ds.shuffle(buffer_size=tf.cast(tf.shape(records)[0], tf.int64))",
                            "Call"
                        ],
                        [
                            "ds.repeat()",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "self.tfds_dir + f'{split}_{i}'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_406": {
                "x": {
                    "value": "self.params['val_clips_per_vid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.params['test_clips_per_vid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_517": {
                "variable": {
                    "value": "timestamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_range * self.count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_523": {
                "variable": {
                    "value": "timestamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.round(idx_range * tf.cast(self.count, tf.float64))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_639": {
                "x": {
                    "value": "tf.shape(records)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_510": {
                "value": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(start=idx_start, limit=idx_start + idx_range)",
                            "Call"
                        ],
                        [
                            "tf.range(start=0, limit=total)",
                            "Call"
                        ]
                    ]
                }
            },
            "encode_jpeg_559": {
                "image": {
                    "value": "tf.zeros([1, 1, 1], tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "encode_jpeg_566": {
                "image": {
                    "value": "video[timestamp + f, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "round_524": {
                "x": {
                    "value": "idx_range * tf.cast(self.count, tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_560": {
                "shape": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_640": {
                "input": {
                    "value": "records",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_record_names(split)",
                            "Call"
                        ],
                        [
                            "sorted(records, key=lambda r: int(r.split(f'{split}_')[1].split('.tf')[0]))",
                            "Call"
                        ],
                        [
                            "self._get_record_names(split)",
                            "Call"
                        ],
                        [
                            "tf.io.gfile.glob(self.params['gcs_data'].rstrip('/') + '/' + split + f'/{split}_*.tfrecord')",
                            "Call"
                        ],
                        [
                            "tf.io.gfile.glob(self.records_dir + split + f'/{split}*.tfrecord')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_525": {
                "x": {
                    "value": "self.count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bbaction/models/model.py": {
        "tensorflow": {
            "Input_283": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, PARAMS['frames_per_clip'], PARAMS['spatial_size'], PARAMS['spatial_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_297": {
                "*args": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.Input([3, PARAMS['frames_per_clip'], PARAMS['spatial_size'], PARAMS['spatial_size']])",
                            "Call"
                        ],
                        [
                            "tf.keras.Input([PARAMS['frames_per_clip'], PARAMS['spatial_size'], PARAMS['spatial_size'], 3])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3D_95": {
                "filters": {
                    "value": "int(num_filters / 4) if PARAMS['depth'] >= 50 else num_filters",
                    "type": "IfExp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "PARAMS['use_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "PARAMS['initializer']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_104": {
                "momentum": {
                    "value": "PARAMS['bn_momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "PARAMS['epsilon']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "beta_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_117": {
                "momentum": {
                    "value": "PARAMS['bn_momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "PARAMS['epsilon']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "beta_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3D_126": {
                "filters": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FILTERS[filter_idx] if PARAMS['depth'] >= 50 else FILTERS[filter_idx] / 4",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "PARAMS['use_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "PARAMS['initializer']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_135": {
                "momentum": {
                    "value": "PARAMS['bn_momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "PARAMS['epsilon']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "beta_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Add_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPadding3D_168": {
                "padding": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3D_172": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "PARAMS['use_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "PARAMS['initializer']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_181": {
                "momentum": {
                    "value": "PARAMS['bn_momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "PARAMS['epsilon']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "beta_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPadding3D_190": {
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool3D_194": {
                "pool_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "AveragePooling3D_257": {
                "pool_size": {
                    "value": "[PARAMS['frames_per_clip'] // 8 if PARAMS['frames_per_clip'] >= 8 else 1, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_267": {
                "rate": {
                    "value": "PARAMS['dropout_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Flatten_268": {
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_269": {
                "units": {
                    "value": "PARAMS['num_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "PARAMS['use_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "PARAMS['initializer']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_275": {
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_290": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[PARAMS['frames_per_clip'], PARAMS['spatial_size'], PARAMS['spatial_size'], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ZeroPadding3D_37": {
                "padding": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3D_41": {
                "filters": {
                    "value": "x.shape[FILTER_DIM]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "STRIDES[stride_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[(1, 1, 1), (2, 2, 2), (1, 2, 2)]",
                            "List"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "PARAMS['use_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "PARAMS['initializer']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "x.shape[FILTER_DIM]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3D_144": {
                "filters": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FILTERS[filter_idx] if PARAMS['depth'] >= 50 else FILTERS[filter_idx] / 4",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "STRIDES[stride_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[(1, 1, 1), (2, 2, 2), (1, 2, 2)]",
                            "List"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "PARAMS['use_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "PARAMS['initializer']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_153": {
                "momentum": {
                    "value": "PARAMS['bn_momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "PARAMS['epsilon']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "beta_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_209": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_210": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3D_52": {
                "filters": {
                    "value": "inputs.shape[FILTER_DIM]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "PARAMS['use_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "PARAMS['initializer']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_61": {
                "momentum": {
                    "value": "PARAMS['bn_momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "PARAMS['epsilon']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "beta_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPadding3D_70": {
                "padding": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3D_74": {
                "filters": {
                    "value": "x.shape[FILTER_DIM]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "STRIDES[stride_idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[(1, 1, 1), (2, 2, 2), (1, 2, 2)]",
                            "List"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "PARAMS['use_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "PARAMS['initializer']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "x.shape[FILTER_DIM]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_203": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_204": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_215": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_216": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_222": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_223": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_228": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_229": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_234": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_235": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_241": {
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_242": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_247": {
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_248": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_253": {
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_254": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bbaction/models/test_model.py": {
        "tensorflow": {
            "Model_38": {
                "*args": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loaded.layers[0].output",
                            "Attribute"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.Activation('linear', dtype='float32')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3D_23": {
                "filters": {
                    "value": "PARAMS['num_labels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "PARAMS['use_bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "PARAMS['initializer']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Models')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Models', version=PARAMS['version'])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv3d_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_33": {
                "data_format": {
                    "value": "PARAMS['data_format']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Activation_34": {
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "bbaction/preprocess/preprocess.py": {
        "tensorflow": {
            "cast_39": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['batch_per_replica'] * self.params['num_replicas']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_76": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_description",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'frames': tf.io.FixedLenFeature([self.params['frames_per_clip']], tf.string), 'label': tf.io.FixedLenFeature([], tf.int64), 'timestamp': tf.io.FixedLenFeature([], tf.int64), 'identifier': tf.io.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_81": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "timestamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['timestamp']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_83": {
                "variable": {
                    "value": "identifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['identifier']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_200": {
                "variable": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.params['frames_per_clip']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "read_file_219": {
                "variable": {
                    "value": "raw_video",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.vid_dir + path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_246": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(clip)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_247": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(clip)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "clip.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "tfio.experimental.ffmpeg.decode_video(raw_video)[start:end:step, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_258": {
                "variable": {
                    "value": "scaled_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shorter_edge",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand_num if rand_num % 2 == 0 else rand_num - 1",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_259": {
                "variable": {
                    "value": "scaled_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "float(shorter_edge) / W * H",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_crop_304": {
                "value": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_record_clip(source)",
                            "Call"
                        ],
                        [
                            "self._get_dataset_clip(source, timestamp)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.uint8, size=self.params['frames_per_clip'], dynamic_size=False)",
                            "Call"
                        ],
                        [
                            "clip.write(f, tf.io.decode_jpeg(frames[f]))",
                            "Call"
                        ],
                        [
                            "self._random_resizing(clip)",
                            "Call"
                        ],
                        [
                            "self._random_flipping(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._random_cropping(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ],
                        [
                            "self._resize(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._centered_crop(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[tf.shape(clip)[0], self.params['spatial_size'], self.params['spatial_size'], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLenFeature_68": {
                "shape": {
                    "value": "[self.params['frames_per_clip']]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_72": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_73": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.params['shuffle_size']",
                            "Subscript"
                        ],
                        [
                            "dataset.cardinality()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_183": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_263": {
                "variable": {
                    "value": "scaled_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shorter_edge",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand_num if rand_num % 2 == 0 else rand_num - 1",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_264": {
                "variable": {
                    "value": "scaled_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "float(shorter_edge) / H * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Resizing_271": {
                "height": {
                    "value": "tf.cast(scaled_h, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "width": {
                    "value": "tf.cast(scaled_w, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Resizing_277": {
                "height": {
                    "value": "tf.cast(MIN_RESIZE[self.params['spatial_size']], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "width": {
                    "value": "tf.cast(MIN_RESIZE[self.params['spatial_size']], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_left_right_296": {
                "image": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_record_clip(source)",
                            "Call"
                        ],
                        [
                            "self._get_dataset_clip(source, timestamp)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.uint8, size=self.params['frames_per_clip'], dynamic_size=False)",
                            "Call"
                        ],
                        [
                            "clip.write(f, tf.io.decode_jpeg(frames[f]))",
                            "Call"
                        ],
                        [
                            "self._random_resizing(clip)",
                            "Call"
                        ],
                        [
                            "self._random_flipping(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._random_cropping(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ],
                        [
                            "self._resize(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._centered_crop(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "CenterCrop_315": {
                "height": {
                    "value": "self.params['spatial_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "width": {
                    "value": "self.params['spatial_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_322": {
                "a": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_record_clip(source)",
                            "Call"
                        ],
                        [
                            "self._get_dataset_clip(source, timestamp)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.uint8, size=self.params['frames_per_clip'], dynamic_size=False)",
                            "Call"
                        ],
                        [
                            "clip.write(f, tf.io.decode_jpeg(frames[f]))",
                            "Call"
                        ],
                        [
                            "self._random_resizing(clip)",
                            "Call"
                        ],
                        [
                            "self._random_flipping(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._random_cropping(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ],
                        [
                            "self._resize(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._centered_crop(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[3, 0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_208": {
                "contents": {
                    "value": "frames[f]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_246": {
                "input": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_record_clip(source)",
                            "Call"
                        ],
                        [
                            "self._get_dataset_clip(source, timestamp)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.uint8, size=self.params['frames_per_clip'], dynamic_size=False)",
                            "Call"
                        ],
                        [
                            "clip.write(f, tf.io.decode_jpeg(frames[f]))",
                            "Call"
                        ],
                        [
                            "self._random_resizing(clip)",
                            "Call"
                        ],
                        [
                            "self._random_flipping(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._random_cropping(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ],
                        [
                            "self._resize(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._centered_crop(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_247": {
                "input": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_record_clip(source)",
                            "Call"
                        ],
                        [
                            "self._get_dataset_clip(source, timestamp)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.uint8, size=self.params['frames_per_clip'], dynamic_size=False)",
                            "Call"
                        ],
                        [
                            "clip.write(f, tf.io.decode_jpeg(frames[f]))",
                            "Call"
                        ],
                        [
                            "self._random_resizing(clip)",
                            "Call"
                        ],
                        [
                            "self._random_flipping(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._random_cropping(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ],
                        [
                            "self._resize(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._centered_crop(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_272": {
                "x": {
                    "value": "scaled_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.round(float(shorter_edge) / W * H)",
                            "Call"
                        ],
                        [
                            "tf.cast(shorter_edge, tf.float32)",
                            "Call"
                        ],
                        [
                            "H",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_273": {
                "x": {
                    "value": "scaled_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(shorter_edge, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.round(float(shorter_edge) / H * W)",
                            "Call"
                        ],
                        [
                            "W",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_278": {
                "x": {
                    "value": "MIN_RESIZE[self.params['spatial_size']]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_282": {
                "x": {
                    "value": "MIN_RESIZE[self.params['spatial_size']]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Rescaling_110": {
                "scale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Rescaling_134": {
                "scale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Rescaling_160": {
                "scale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_307": {
                "input": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_record_clip(source)",
                            "Call"
                        ],
                        [
                            "self._get_dataset_clip(source, timestamp)",
                            "Call"
                        ],
                        [
                            "tf.TensorArray(tf.uint8, size=self.params['frames_per_clip'], dynamic_size=False)",
                            "Call"
                        ],
                        [
                            "clip.write(f, tf.io.decode_jpeg(frames[f]))",
                            "Call"
                        ],
                        [
                            "self._random_resizing(clip)",
                            "Call"
                        ],
                        [
                            "self._random_flipping(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._random_cropping(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ],
                        [
                            "self._resize(clip)",
                            "Call"
                        ],
                        [
                            "self._normalize(clip)",
                            "Call"
                        ],
                        [
                            "self._centered_crop(clip)",
                            "Call"
                        ],
                        [
                            "self._set_data_format(clip)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bbaction/test/callbacks.py": {
        "tensorflow": {}
    },
    "bbaction/test/metrics.py": {
        "tensorflow": {
            "Variable_21": {
                "variable": {
                    "value": "self.total_clips",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "total_clips",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "self.total_vids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.total_clips // self.test_clips_per_vid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "variable": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.total_vids, self.num_labels])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.total_vids, 1], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "self.last_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "function_68": {
                "experimental_relax_shapes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_78": {
                "variable": {
                    "value": "identifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_weight[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "variable": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.batch_per_replica",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_114": {
                "variable": {
                    "value": "self.last_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "shape": {
                    "value": "[self.total_vids, self.num_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "shape": {
                    "value": "[self.total_vids, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "self.batch_per_replica",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_113": {
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "input": {
                    "value": "identifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(sample_weight[i], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_pred[i]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "identifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(sample_weight[i], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "input": {
                    "value": "true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true[i]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bbaction/test/test.py": {
        "tensorflow": {
            "set_verbosity_5": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_functions_eagerly_33": {
                "run_eagerly": {
                    "value": "params['is_eager']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_strategy_36": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isdir_90": {
                "path": {
                    "value": "savemodel_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['gcs_results'].rstrip('/') + f'/{str(version)}'",
                            "BinOp"
                        ],
                        [
                            "get_results_dir(params['dataset']) + f'savemodel/{str(version)}'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MirroredStrategy_38": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_global_policy_50": {
                "policy": {
                    "value": "mixed_bfloat16",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_model_93": {
                "variable": {
                    "value": "loaded",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "savemodel_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['gcs_results'].rstrip('/') + f'/{str(version)}'",
                            "BinOp"
                        ],
                        [
                            "get_results_dir(params['dataset']) + f'savemodel/{str(version)}'",
                            "BinOp"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "get_custom_objects()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_40": {
                "variable": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "params['tpu_address']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_frozen_params('Test', version=version)",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUStrategy_45": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=params['tpu_address'])",
                            "Call"
                        ]
                    ]
                }
            },
            "experimental_connect_to_cluster_43": {
                "cluster_spec_or_resolver": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=params['tpu_address'])",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_44": {
                "enable_coordination_service": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=params['tpu_address'])",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTopKCategoricalAccuracy_102": {
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "clip_top_1_acc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseTopKCategoricalAccuracy_106": {
                "k": {
                    "value": "params['max_k']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_frozen_params('Test', version=version)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "clip_top_5_acc",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "bbaction/train/callbacks.py": {
        "tensorflow": {
            "CSVLogger_49": {
                "filename": {
                    "value": "logs_dir + f'logs_v{VERSION}.csv'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "append": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialDecay_89": {
                "initial_learning_rate": {
                    "value": "PARAMS['lr_per_replica']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Train')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Train', version=VERSION)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(math.ceil(PARAMS['decay_epoch'] * epoch_size / PARAMS['batch_per_replica']))",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "PARAMS['decay_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Train')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Train', version=VERSION)",
                            "Call"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CosineDecay_76": {
                "initial_learning_rate": {
                    "value": "PARAMS['lr_per_replica']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Train')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Train', version=VERSION)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(math.ceil(PARAMS['decay_epoch'] * epoch_size / PARAMS['batch_per_replica']))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "bbaction/train/train.py": {
        "tensorflow": {
            "set_verbosity_6": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_functions_eagerly_60": {
                "run_eagerly": {
                    "value": "params['is_eager']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_strategy_63": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MirroredStrategy_65": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_global_policy_78": {
                "policy": {
                    "value": "mixed_bfloat16",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isdir_137": {
                "path": {
                    "value": "savemodel_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['gcs_results'].rstrip('/') + f'/{str(version)}'",
                            "BinOp"
                        ],
                        [
                            "results_dir + f'savemodel/{str(version)}'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_188": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params['lr_per_replica']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Train')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Train', version=version)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "params['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Train')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Train', version=version)",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "params['nesterov']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Train')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Train', version=version)",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUClusterResolver_67": {
                "variable": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "params['tpu_address']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Train')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Train', version=version)",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUStrategy_72": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=params['tpu_address'])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_147": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "savemodel_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['gcs_results'].rstrip('/') + f'/{str(version)}'",
                            "BinOp"
                        ],
                        [
                            "results_dir + f'savemodel/{str(version)}'",
                            "BinOp"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "get_custom_objects()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_201": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "Reduction.SUM_OVER_BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "experimental_connect_to_cluster_70": {
                "cluster_spec_or_resolver": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=params['tpu_address'])",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_71": {
                "enable_coordination_service": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=params['tpu_address'])",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTopKCategoricalAccuracy_206": {
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "top_1_acc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseTopKCategoricalAccuracy_210": {
                "k": {
                    "value": "params['max_k']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_params('Train')",
                            "Call"
                        ],
                        [
                            "get_frozen_params('Train', version=version)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "top_5_acc",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}