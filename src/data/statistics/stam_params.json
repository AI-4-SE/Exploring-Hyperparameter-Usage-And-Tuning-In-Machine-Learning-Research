{
    "src/data/split_data.py": {
        "sklearn": {
            "StratifiedShuffleSplit_16": {
                "variable": {
                    "value": "sss",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.cv",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.random_state",
                            "Attribute"
                        ],
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/validate.py": {
        "sklearn": {
            "roc_auc_score_58": {
                "variable": {
                    "value": "agg_roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "agg_y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(agg_y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "agg_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(agg_scores)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_17": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "softmax_24": {
                "variable": {
                    "value": "batch_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x=batch_X_gpu)",
                            "Call"
                        ],
                        [
                            "th.softmax(batch_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "batch_scores.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/data/dataset.py": {
        "torch": {}
    },
    "src/graph/stgcn_block.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.tcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((kernel_size[0] - 1) // 2, 0)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=(stride, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/graph/tgcn.py": {
        "torch": {
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(t_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(t_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(t_dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nkctv,kvw->nctw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, A)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/attention.py": {
        "torch": {
            "Sequential_6": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_7": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/sag.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_41": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_dim * A.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.st_gcn_networks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(STGCN_Block(in_dim, 64, kernel_size, 1, **kwargs0), STGCN_Block(64, 128, kernel_size, 2, **kwargs), STGCN_Block(128, z_dim, kernel_size, 2, **kwargs))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_85": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N, V * C, T)",
                            "Call"
                        ],
                        [
                            "self.data_bn(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, V, C, T)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N, C, T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, c, t, v).permute(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size()[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial_attn(feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_89": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.transpose(beta, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, (x.size()[2], 1))",
                            "Call"
                        ],
                        [
                            "feature.squeeze(dim=2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "th.bmm(th.transpose(beta, 1, 2), feature).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "feature.unsqueeze(dim=3)",
                            "Call"
                        ],
                        [
                            "self.fcn(feature)",
                            "Call"
                        ],
                        [
                            "feature.view(feature.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_89": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_52": {
                "variable": {
                    "value": "self.edge_importance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(th.ones(self.A.size())) for i in self.st_gcn_networks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "data": {
                    "value": "th.ones(self.A.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.softmax(e, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "self.A.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/stam.py": {
        "torch": {
            "BatchNorm1d_15": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=dropout_context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temporal_attn(x_emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_39": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.transpose(alpha, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_emb.view(b_size, n_blocks, self.z_dim).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "p": {
                    "value": "dropout_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.softmax(e, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "CrossEntropyLoss_29": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_34": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClipDataset(data_root=pose_data_root, clip_size=args.clip_size, stride=args.stride, length=args.length, label_file_path=train_label_file, suffix_len=args.suffix_len, channels=args.channels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/imbalanced.py": {
        "torch": {
            "multinomial_59": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/utils.py": {
        "torch": {
            "load_82": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_46": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.to(device, dtype=th.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_79": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.load(model_file_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_93": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}