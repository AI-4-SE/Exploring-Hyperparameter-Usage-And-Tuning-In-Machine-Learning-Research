{
    "models.py": {
        "torch": {
            "Adam_91": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_33": {
                "variable": {
                    "value": "self.A4_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(1024 / reduce_by)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(512 / reduce_by)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_36": {
                "variable": {
                    "value": "self.A3_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(512 / reduce_by)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(256 / reduce_by)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_39": {
                "variable": {
                    "value": "self.A2_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(256 / reduce_by)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(128 / reduce_by)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_42": {
                "variable": {
                    "value": "self.A1_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(128 / reduce_by)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(64 / reduce_by)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(64 / reduce_by)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_49": {
                "variable": {
                    "value": "a1_dwn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.A1_(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_52": {
                "variable": {
                    "value": "a2_dwn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.A2_(a1_dwn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_55": {
                "variable": {
                    "value": "a3_dwn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a3_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.A3_(a2_dwn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_59": {
                "variable": {
                    "value": "a4_dwn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a4_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.A4_(a3_dwn)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_84": {
                "variable": {
                    "value": "bypass",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bypass",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(bypass, (-c, -c, -c, -c))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-c, -c, -c, -c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "(upsampled, bypass)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "middle_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "middle_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "middle_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "Adam_71": {
                "variable": {
                    "value": "self.optimizer[adam]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.nn[first_model].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_99": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nn['model'](inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['label'].to(self.device['gpu']).long()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "wt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.randint(1, 101, (self.args['num_class'],), device=self.device['gpu']).float()",
                            "Call"
                        ],
                        [
                            "self.cache.setdefault('class_weights', torch.from_numpy(np.array(self.args.get('class_weights'))).float().to(self.device['gpu']))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nn['model'](inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_102": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nn['model'](inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_92": {
                "variable": {
                    "value": "wt",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "101",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.args['num_class'],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "np.array(self.args.get('class_weights'))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}