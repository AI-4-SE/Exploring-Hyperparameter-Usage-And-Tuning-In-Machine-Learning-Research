{
    "preprocess/ent_mapping.py": {
        "sklearn": {}
    },
    "preprocess/tfidf_mapping.py": {
        "sklearn": {
            "TfidfVectorizer_63": {
                "variable": {
                    "value": "tfidf_vectorizer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cosine_similarity_117": {
                "variable": {
                    "value": "score_partner",
                    "possible_values": []
                },
                "X": {
                    "value": "partner_uttr_vec",
                    "possible_values": [
                        [
                            "tfidf_vectorizer.transform([partner_uttr])",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "partner_persona_vec",
                    "possible_values": [
                        [
                            "tfidf_vectorizer.transform(partner_persona)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_118": {
                "variable": {
                    "value": "score_your",
                    "possible_values": []
                },
                "X": {
                    "value": "your_persona_uttr_vec",
                    "possible_values": [
                        [
                            "tfidf_vectorizer.transform([your_persona_uttr])",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "your_persona_vec",
                    "possible_values": [
                        [
                            "tfidf_vectorizer.transform(your_persona)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocess/NLI.py": {
        "torch": {
            "load_492": {
                "variable": {
                    "value": "model_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_337": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_338": {
                "variable": {
                    "value": "n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_341": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_356": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "tensor_444": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_447": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_448": {
                "variable": {
                    "value": "train_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "DataLoader_453": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "tensor_503": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_504": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_505": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_506": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_507": {
                "variable": {
                    "value": "eval_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "SequentialSampler_509": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_510": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "set_device_340": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_358": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_400": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "BertForSequenceClassification.from_pretrained(args.bert_model, cache_dir=PYTORCH_PRETRAINED_BERT_CACHE / 'distributed_{}'.format(args.local_rank), num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "BertForSequenceClassification.from_pretrained(args.bert_model, state_dict=model_state_dict, num_labels=num_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_450": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_452": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_489": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_522": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_337": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/load_bert.py": {
        "torch": {
            "device_313": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "load_322": {
                "variable": {
                    "value": "model_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_337": {
                "variable": {
                    "value": "eval_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "SequentialSampler_339": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_340": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.eval_batch_size",
                    "possible_values": []
                }
            },
            "no_grad_352": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_313": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}