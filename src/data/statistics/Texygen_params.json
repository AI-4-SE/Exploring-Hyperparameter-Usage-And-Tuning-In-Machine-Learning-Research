{
    "models/gsgan/GsganDiscriminator.py": {
        "tensorflow": {
            "constant_15": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_19": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_20": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, sequence_length, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_28": {
                "variable": {
                    "value": "self.one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.eye(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "self.h_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_unit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "self.c_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_unit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h_0, self.c_0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_43": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_45": {
                "variable": {
                    "value": "(self.pretrain_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, self.params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_58": {
                "variable": {
                    "value": "o_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros(shape=[self.batch_size_scale, self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "o_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o_0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(np.zeros(shape=[self.batch_size_scale, self.num_classes]))",
                            "Call"
                        ],
                        [
                            "tf.cast(o_0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_60": {
                "variable": {
                    "value": "(_, _, h_t, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.one_hot, self.start_token), self.h0, o_0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_132": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_133": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_37": {
                "variable": {
                    "value": "pred_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.predict(input_x=self.input_x)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pred_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=score, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(input_x, begin=[0, i, 0], size=[self.batch_size_scale, 1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_95": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_98": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_110": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_116": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_137": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(hidden_state, self.Wo) + self.bo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "Dloss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_45": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_127": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_55": {
                "input_": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.batch_size_scale, 1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_125": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_63": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_64": {
                "params": {
                    "value": "self.one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_111": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/gsgan/GsganGenerator.py": {
        "tensorflow": {
            "constant_15": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "self.expected_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_35": {
                "variable": {
                    "value": "onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.eye(num_vocabulary)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.h_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.c_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h_0, self.c_0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_46": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_48": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_50": {
                "variable": {
                    "value": "gen_ot",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_65": {
                "variable": {
                    "value": "(_, _, h_t, self.gen_o, self.gen_x, self.gen_ot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(onehot, self.start_token), self.h0, gen_o, gen_x, gen_ot)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_72": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "self.gen_ot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_ot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_81": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_94": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(onehot, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_101": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_114": {
                "variable": {
                    "value": "(self.pretrain_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_122": {
                "variable": {
                    "value": "neg_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.reshape(d_pred, shape=[2, batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "negative_123": {
                "variable": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(tf.divide(neg_score, tf.subtract(1.0, neg_score)), batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_126": {
                "variable": {
                    "value": "(g_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.g_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_132": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_133": {
                "variable": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(hidden_state, self.get_gumbel(tf.shape(hidden_state)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.get_gumbel(tf.shape(hidden_state))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_191": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_192": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_193": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_196": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_197": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_199": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_200": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_201": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_203": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_204": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_205": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_250": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_251": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_265": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.eye(self.num_vocabulary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_271": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_272": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(one_hot), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_280": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_282": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(onehot, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "o_t / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(o_t, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "o_t / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_134": {
                "values": {
                    "value": "[hidden_state, c_prev]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_213": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_216": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_222": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_228": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_234": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_255": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_262": {
                "learning_rate": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_276": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_277": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_278": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=0, maxval=1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_279": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "shape": {
                    "value": "[self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_37": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_114": {
                "ys": {
                    "value": "self.pretrain_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "tensor": {
                    "value": "d_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.discriminator.predict(self.gen_ot)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_123": {
                "x": {
                    "value": "neg_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(tf.reshape(d_pred, shape=[2, batch_size]), [0, 0], [1, batch_size])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.subtract(1.0, neg_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_126": {
                "ys": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_139": {
                "x": {
                    "value": "u + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_245": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_272": {
                "input_tensor": {
                    "value": "tf.square(one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_282": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_38": {
                "params": {
                    "value": "onehot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.eye(num_vocabulary), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_58": {
                "input": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_105": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_133": {
                "input": {
                    "value": "hidden_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(hidden_state, self.get_gumbel(tf.shape(hidden_state)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_243": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_256": {
                "a": {
                    "value": "hidden_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(hidden_state, self.get_gumbel(tf.shape(hidden_state)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_272": {
                "x": {
                    "value": "one_hot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.eye(self.num_vocabulary))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_276": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_59": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_69": {
                "params": {
                    "value": "onehot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.eye(num_vocabulary), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_97": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_98": {
                "params": {
                    "value": "onehot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.eye(num_vocabulary), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_123": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "neg_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(tf.reshape(d_pred, shape=[2, batch_size]), [0, 0], [1, batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_59": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(o_t, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_106": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_106": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_217": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_218": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_223": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_229": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_236": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_106": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_107": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/leakgan/LeakganDiscriminator.py": {
        "tensorflow": {
            "l2_normalize_6": {
                "variable": {
                    "value": "normalize_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_7": {
                "variable": {
                    "value": "normalize_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_8": {
                "variable": {
                    "value": "cos_similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalize_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(a, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normalize_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(b, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_70": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.D_input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope or 'SimpleLinear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'Highway'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, scope='highway_gate_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_83": {
                "variable": {
                    "value": "self.D_l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_92": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "D_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.D_input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "5e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_163": {
                "variable": {
                    "value": "W_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_164": {
                "variable": {
                    "value": "b_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_167": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "D_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "W_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "self.ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_169": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "a": {
                    "value": "matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [output_size, input_size], dtype=input_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "D_update",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "h_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_165": {
                "t": {
                    "value": "W_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([self.num_filters_total, self.num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_166": {
                "t": {
                    "value": "b_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "feature",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=D_scores, labels=self.D_input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "FeatureExtractor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "W_fe",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fe",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_114": {
                "variable": {
                    "value": "embedded_chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "W_fe",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W_fe', initializer=tf.random_uniform([self.vocab_size + 1, self.dis_emb_dim], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "Feature_input + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "embedded_chars_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(W_fe, Feature_input + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "h_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "Name",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.75",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_163": {
                "shape": {
                    "value": "[self.num_filters_total, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_164": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_108": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_expanded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedded_chars, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='W-%s' % filter_size, initializer=tf.truncated_normal(filter_shape, stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'relu-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_137": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'pool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "name": {
                    "value": "highway",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_154": {
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_135": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b-%s' % filter_size, initializer=tf.constant(0.1, shape=[num_filter]))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_124": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[filter_size, self.dis_emb_dim, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/leakgan/LeakganGenerator.py": {
        "tensorflow": {
            "constant_19": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_75": {
                "variable": {
                    "value": "self.padding_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_85": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_87": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_90": {
                "variable": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_93": {
                "variable": {
                    "value": "feature_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_95": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "int(self.sequence_length / self.step_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_98": {
                "variable": {
                    "value": "gen_real_goal_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_101": {
                "variable": {
                    "value": "gen_o_worker_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "int(self.sequence_length / self.step_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_148": {
                "variable": {
                    "value": "(_, _, _, _, self.gen_o, self.gen_x, _, _, _, _, self.gen_real_goal_array, self.gen_o_worker_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0_worker, self.h0_manager, gen_o, gen_x, goal, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, step_size, gen_real_goal_array, gen_o_worker_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_162": {
                "variable": {
                    "value": "self.gen_real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "variable": {
                    "value": "self.gen_o_worker_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_o_worker_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_170": {
                "variable": {
                    "value": "sub_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "int(self.sequence_length / self.step_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_173": {
                "variable": {
                    "value": "all_sub_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_175": {
                "variable": {
                    "value": "all_sub_goals",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_179": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_182": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_256": {
                "variable": {
                    "value": "(_, _, self.g_predictions, _, _, _, _, _, self.feature_array, self.real_goal_array, self.sub_feature, self.all_sub_features, self.all_sub_goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12: i < self.sequence_length + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "preTrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), g_predictions, self.h0_worker, self.x, self.h0_manager, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, feature_array, real_goal_array, sub_feature, all_sub_features, all_sub_goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_267": {
                "variable": {
                    "value": "self.sub_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.sub_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_270": {
                "variable": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_321": {
                "variable": {
                    "value": "self.all_sub_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.all_sub_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_324": {
                "variable": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_353": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_357": {
                "variable": {
                    "value": "gen_for_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_359": {
                "variable": {
                    "value": "ta_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_425": {
                "variable": {
                    "value": "(i, x_t, _, gen_for_reward, h_worker, h_manager, self.last_goal_for_reward, self.real_goal_for_reward, given_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6, _7, given_num: i < given_num + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.x, gen_for_reward, self.h0_worker, self.h0_manager, tf.zeros([self.batch_size, self.goal_out_size]), self.goal_init, given_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_434": {
                "variable": {
                    "value": "(_, _, gen_for_reward, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5, _6: i < self.sequence_length + 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(i, x_t, gen_for_reward, h_worker, h_manager, self.last_goal_for_reward, self.real_goal_for_reward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_443": {
                "variable": {
                    "value": "gen_for_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_for_reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.int32, size=1, dynamic_size=True, infer_shape=True, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "gen_for_reward.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(gen_for_reward, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_626": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_627": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_635": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_637": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length // self.step_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.given_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.drop_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_vocabulary, self.emb_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "variable": {
                    "value": "self.W_workerOut_change",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_vocabulary, self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "variable": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.goal_out_size, self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "self.h0_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "self.h0_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0_worker, self.h0_worker]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "self.h0_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "self.h0_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0_manager, self.h0_manager]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "self.goal_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "goal_init",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal([self.batch_size, self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_107": {
                "variable": {
                    "value": "cur_sen",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.split(tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1), [self.sequence_length, i], 1)[0]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.padding_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.num_vocabulary, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_118": {
                "variable": {
                    "value": "sub_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_121": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "w_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_124": {
                "variable": {
                    "value": "w_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_127": {
                "variable": {
                    "value": "w_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "x_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_132": {
                "variable": {
                    "value": "x_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_134": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_136": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_137": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_196": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array.write(0, self.goal_init)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "l2_normalize_200": {
                "variable": {
                    "value": "sub_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_202": {
                "variable": {
                    "value": "h_t_Worker",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.g_worker_recurrent_unit(x_t, h_tm1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : h_tm1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.num_vocabulary, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_207": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add(last_goal, sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_209": {
                "variable": {
                    "value": "all_sub_goals",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : all_sub_goals.write(i - 1, real_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : all_sub_goals",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "w_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_213": {
                "variable": {
                    "value": "w_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_214": {
                "variable": {
                    "value": "w_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "variable": {
                    "value": "x_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_217": {
                "variable": {
                    "value": "x_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_219": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : g_predictions.write(i - 1, tf.nn.softmax(x_logits))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : g_predictions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_222": {
                "variable": {
                    "value": "sub_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : sub_feature",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(i > 0, lambda : sub_feature.write(i // step_size - 1, tf.subtract(feature, feature_array.read(i - step_size))), lambda : sub_feature)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_230": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : all_sub_features.write(i - 1, tf.subtract(feature, feature_array.read(i - i % step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : all_sub_features.write(i - 1, tf.subtract(feature, feature_array.read(i - step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_240": {
                "variable": {
                    "value": "real_goal_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(i / step_size < self.sequence_length // step_size, lambda : tf.cond(i > 0, lambda : real_goal_array.write(i // step_size, real_sub_goal), lambda : real_goal_array), lambda : real_goal_array)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_247": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ta_emb_x.read(i - 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "AdamOptimizer_279": {
                "variable": {
                    "value": "pretrain_manager_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_281": {
                "variable": {
                    "value": "(self.pretrain_manager_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_goal_loss, self.manager_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_301": {
                "variable": {
                    "value": "pretrain_worker_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_303": {
                "variable": {
                    "value": "(self.pretrain_worker_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_worker_loss, self.worker_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_313": {
                "variable": {
                    "value": "manager_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_315": {
                "variable": {
                    "value": "(self.manager_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.goal_loss, self.manager_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_337": {
                "variable": {
                    "value": "worker_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_338": {
                "variable": {
                    "value": "(self.worker_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.worker_loss, self.worker_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_351": {
                "variable": {
                    "value": "processed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, input_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_372": {
                "variable": {
                    "value": "sub_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_374": {
                "variable": {
                    "value": "h_t_Worker",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.g_worker_recurrent_unit(x_t, h_tm1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : h_tm1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_377": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add(last_goal, sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_380": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ta_emb_x.read(i - 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_393": {
                "variable": {
                    "value": "cur_sen",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.split(tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1), [self.sequence_length, i - 1], 1)[0]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.padding_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_401": {
                "variable": {
                    "value": "o_t_Worker",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_t_Worker",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.num_vocabulary, self.goal_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_405": {
                "variable": {
                    "value": "sub_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sub_goal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_407": {
                "variable": {
                    "value": "real_sub_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_408": {
                "variable": {
                    "value": "w_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_409": {
                "variable": {
                    "value": "w_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_410": {
                "variable": {
                    "value": "w_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_412": {
                "variable": {
                    "value": "x_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o_t_Worker",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ],
                        [
                            "self.g_worker_output_unit(h_t_Worker)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_t_Worker, [self.batch_size, self.num_vocabulary, self.goal_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ],
                        [
                            "tf.matmul(real_goal, self.g_change)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w_g, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_g, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_413": {
                "variable": {
                    "value": "x_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_415": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_416": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_417": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_470": {
                "variable": {
                    "value": "self.Wi_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_471": {
                "variable": {
                    "value": "self.Ui_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_472": {
                "variable": {
                    "value": "self.bi_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_474": {
                "variable": {
                    "value": "self.Wf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_475": {
                "variable": {
                    "value": "self.Uf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_476": {
                "variable": {
                    "value": "self.bf_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_478": {
                "variable": {
                    "value": "self.Wog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_479": {
                "variable": {
                    "value": "self.Uog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_480": {
                "variable": {
                    "value": "self.bog_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_482": {
                "variable": {
                    "value": "self.Wc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_483": {
                "variable": {
                    "value": "self.Uc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_484": {
                "variable": {
                    "value": "self.bc_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_530": {
                "variable": {
                    "value": "self.W_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.num_vocabulary * self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_532": {
                "variable": {
                    "value": "self.b_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_vocabulary * self.goal_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_547": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_548": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_549": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_551": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_552": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_553": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_555": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_556": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_557": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_559": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_filters_total, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_560": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_561": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_607": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_608": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.goal_out_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_631": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_632": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_633": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_634": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "place_holder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_77": {
                "name": {
                    "value": "roll_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_81": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_278": {
                "name": {
                    "value": "Manager_PreTrain_update",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_289": {
                "input_tensor": {
                    "value": "self.g_predictions * tf.log(tf.clip_by_value(self.g_predictions, 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_299": {
                "name": {
                    "value": "Worker_PreTrain_update",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_312": {
                "name": {
                    "value": "Manager_update",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_distance_326": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.all_sub_features, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.all_sub_goals, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_335": {
                "name": {
                    "value": "Worker_update",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_350": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_360": {
                "a": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_384": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : gen_x.write(i - 1, ta_x.read(i - 1))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : gen_x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_468": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_492": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_495": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi_worker) + tf.matmul(previous_hidden_state, self.Ui_worker) + self.bi_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_501": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf_worker) + tf.matmul(previous_hidden_state, self.Uf_worker) + self.bf_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_507": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog_worker) + tf.matmul(previous_hidden_state, self.Uog_worker) + self.bog_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_513": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc_worker) + tf.matmul(previous_hidden_state, self.Uc_worker) + self.bc_worker",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_529": {
                "name_or_scope": {
                    "value": "Worker",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_536": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_545": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_569": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_572": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_578": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_584": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_590": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_606": {
                "name_or_scope": {
                    "value": "Manager",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_612": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_627": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_637": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_82": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "logits": {
                    "value": "tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_138": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(x_logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_143": {
                "pred": {
                    "value": "(i + 1) % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_145": {
                "pred": {
                    "value": "(i + 1) % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "split_190": {
                "value": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[i, self.sequence_length - i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_251": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_253": {
                "pred": {
                    "value": "i % step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_273": {
                "input_tensor": {
                    "value": "1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_282": {
                "ys": {
                    "value": "self.pretrain_goal_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.manager_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_293": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_304": {
                "ys": {
                    "value": "self.pretrain_worker_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.worker_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_308": {
                "input_tensor": {
                    "value": "tf.multiply(self.reward, 1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_316": {
                "ys": {
                    "value": "self.goal_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.manager_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_326": {
                "x": {
                    "value": "self.all_sub_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_327": {
                "x": {
                    "value": "self.all_sub_goals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_329": {
                "input_tensor": {
                    "value": "tf.multiply(self.Worker_Reward, tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_339": {
                "ys": {
                    "value": "self.worker_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.worker_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_343": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_351": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_365": {
                "value": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[i, self.sequence_length - i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_383": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_386": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_388": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_396": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_415": {
                "logits": {
                    "value": "x_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_416": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_418": {
                "control_inputs": {
                    "value": "[cur_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_421": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, shape=[self.batch_size, self.goal_out_size])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_423": {
                "pred": {
                    "value": "i % self.step_size > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_sub_goal",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_524": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_601": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_627": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_631": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_71": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_136": {
                "logits": {
                    "value": "log_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits))",
                            "Call"
                        ],
                        [
                            "tf.log(tf.nn.softmax(x_logits))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_140": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(x_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_151": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_152": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_190": {
                "values": {
                    "value": "[tf.split(input_x, [i, self.sequence_length - i], 1)[0], self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_207": {
                "x": {
                    "value": "last_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_224": {
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : sub_feature.write(i // step_size - 1, tf.subtract(feature, feature_array.read(i - step_size)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : sub_feature",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_241": {
                "pred": {
                    "value": "i / step_size < self.sequence_length // step_size",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cond(i > 0, lambda : real_goal_array.write(i // step_size, real_sub_goal), lambda : real_goal_array)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_260": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_260": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_290": {
                "x": {
                    "value": "tf.clip_by_value(self.g_predictions, 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_308": {
                "x": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - tf.losses.cosine_distance(tf.nn.l2_normalize(self.sub_feature, 2), tf.nn.l2_normalize(self.real_goal_array, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_330": {
                "x": {
                    "value": "self.Worker_Reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_365": {
                "values": {
                    "value": "[tf.split(input_x, [i, self.sequence_length - i], 1)[0], self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_377": {
                "x": {
                    "value": "last_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sub_goal",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ],
                        [
                            "self.g_manager_output_unit(h_t_manager)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sub_goal, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_416": {
                "logits": {
                    "value": "log_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(tf.cond(i > 1, lambda : tf.cond(self.train > 0, lambda : self.tem, lambda : 1.5), lambda : 1.5) * x_logits))",
                            "Call"
                        ],
                        [
                            "tf.log(tf.nn.softmax(x_logits))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_429": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_429": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_431": {
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_522": {
                "x": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_538": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_599": {
                "x": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_614": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_108": {
                "value": {
                    "value": "tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.sequence_length, i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_135": {
                "pred": {
                    "value": "self.train > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.tem",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.5",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "one_hot_140": {
                "indices": {
                    "value": "next_token",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_141": {
                "logits": {
                    "value": "x_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_144": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_219": {
                "logits": {
                    "value": "x_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ],
                        [
                            "tf.matmul(o_t_Worker, w_g)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_252": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cosine_distance_273": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.sub_feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.real_goal_array, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_290": {
                "t": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_294": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_294": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_344": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_344": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_387": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_394": {
                "value": {
                    "value": "tf.concat([tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.sequence_length, i - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_422": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.goal_out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_108": {
                "values": {
                    "value": "[tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_242": {
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : real_goal_array.write(i // step_size, real_sub_goal)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : real_goal_array",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "l2_normalize_273": {
                "x": {
                    "value": "self.sub_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_274": {
                "x": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int32_294": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_295": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_distance_308": {
                "labels": {
                    "value": "tf.nn.l2_normalize(self.sub_feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.nn.l2_normalize(self.real_goal_array, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_331": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_331": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_344": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_345": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_394": {
                "values": {
                    "value": "[tf.transpose(gen_x.stack(), perm=[1, 0]), self.padding_array]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_496": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_497": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_502": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_503": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_508": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_509": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_514": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_515": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc_worker",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_573": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_574": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_579": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_580": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_585": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_586": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_591": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_592": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_225": {
                "x": {
                    "value": "feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_231": {
                "x": {
                    "value": "feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - i % step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_235": {
                "x": {
                    "value": "feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtractor_unit(cur_sen, self.drop_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_array.read(i - step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_294": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_295": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_309": {
                "x": {
                    "value": "self.real_goal_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int32_331": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_332": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_344": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_345": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_331": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_394": {
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/maligan_basic/MailganDiscriminator.py": {
        "tensorflow": {
            "get_variable_27": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_67": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_132": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "scope or 'SimpleLinear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'Highway'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, scope='highway_gate_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_105": {
                "variable": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "a": {
                    "value": "matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [output_size, input_size], dtype=input_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocab_size, emd_dim], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_75": {
                "variable": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_114": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_highway",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([num_filters_total, num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_122": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([num_filters_total, num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "self.ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_124": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_128": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_71": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_71": {
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([num_filters_total, num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_95": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "highway",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_113": {
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_117": {
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_120": {
                "t": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([num_filters_total, num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_121": {
                "t": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_127": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_118": {
                "shape": {
                    "value": "[num_filters_total, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_119": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_84": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[filter_size, emd_dim, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_85": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_93": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/maligan_basic/MaliganGenerator.py": {
        "tensorflow": {
            "constant_14": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_15": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_22": {
                "variable": {
                    "value": "self.expected_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_45": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_47": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_61": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_71": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_75": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_86": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_106": {
                "variable": {
                    "value": "(self.pretrain_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_121": {
                "variable": {
                    "value": "(self.g_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.g_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_140": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_146": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_148": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_199": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_200": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_222": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_223": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_231": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_233": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary, self.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_53": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_55": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_136": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_162": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_165": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_183": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_204": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_211": {
                "learning_rate": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_227": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_228": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_229": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "shape": {
                    "value": "[self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_37": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_106": {
                "ys": {
                    "value": "self.pretrain_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)), 1) * tf.reshape(self.rewards, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_121": {
                "ys": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_194": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_223": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_38": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_53": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_97": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_192": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_205": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_223": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_227": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_54": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_56": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_65": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_89": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_90": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_56": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_98": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_98": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_98": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_99": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_114": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_114": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_114": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_115": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/mle/MleGenerator.py": {
        "tensorflow": {
            "constant_15": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "variable": {
                    "value": "self.expected_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_46": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_48": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_62": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_72": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_76": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_87": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_107": {
                "variable": {
                    "value": "(self.pretrain_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_122": {
                "variable": {
                    "value": "(self.g_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.g_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_143": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_146": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_200": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_201": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_223": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_224": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_232": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary, self.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_54": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_56": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_163": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_178": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_184": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_205": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_212": {
                "learning_rate": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_228": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_229": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_230": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_231": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "shape": {
                    "value": "[self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_38": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_107": {
                "ys": {
                    "value": "self.pretrain_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)), 1) * tf.reshape(self.rewards, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_122": {
                "ys": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_195": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_224": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_234": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_39": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_57": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_193": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_206": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_224": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_228": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_55": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_57": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_65": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_90": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_91": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_57": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_99": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_99": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_99": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_100": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_115": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_115": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_115": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_116": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/pg_bleu/PgbleuGenerator.py": {
        "tensorflow": {
            "constant_15": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "variable": {
                    "value": "self.expected_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_46": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_48": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_62": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_72": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_76": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_87": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_107": {
                "variable": {
                    "value": "(self.pretrain_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_122": {
                "variable": {
                    "value": "(self.g_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.g_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_143": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_146": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_200": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_201": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_223": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_224": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_232": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary, self.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_54": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_56": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_163": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_178": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_184": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_205": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_212": {
                "learning_rate": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_228": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_229": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_230": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_231": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "shape": {
                    "value": "[self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_38": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_107": {
                "ys": {
                    "value": "self.pretrain_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)), 1) * tf.reshape(self.rewards, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_122": {
                "ys": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_195": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_224": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_234": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_39": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_57": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_193": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_206": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_224": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_228": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_55": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_57": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_65": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_90": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_91": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_57": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_99": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_99": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_99": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_100": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_115": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_115": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_115": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_116": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/rankgan/RankganDiscriminator.py": {
        "tensorflow": {
            "while_loop_67": {
                "variable": {
                    "value": "(_, ret, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < ref_size",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_loop_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.constant(0.0, dtype=tf.float32), emb_test, embs_ref)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.input_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[reference_size, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ref",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_90": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_205": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "scope or 'SimpleLinear'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'Highway'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, scope='highway_gate_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "self.h_pool_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs_ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "self.h_pool_flat_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_34": {
                "a": {
                    "value": "matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [output_size, input_size], dtype=input_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_57": {
                "input_tensor": {
                    "value": "y_s * y_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_57": {
                "tensor": {
                    "value": "y_u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_96": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocab_size, emd_dim], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_99": {
                "variable": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "variable": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_101": {
                "variable": {
                    "value": "self.embedded_chars_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_ref",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "variable": {
                    "value": "self.embedded_chars_expanded_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_161": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_highway",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_162": {
                "variable": {
                    "value": "self.h_drop_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_highway_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_189": {
                "variable": {
                    "value": "self.reference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.l2_normalize(self.h_drop_ref, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_190": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.feature @ tf.transpose(self.reference, perm=[1, 0])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "self.ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.softmax(self.scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_193": {
                "variable": {
                    "value": "self.log_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_197": {
                "variable": {
                    "value": "self.neg_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.transpose(self.input_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "ids": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_198": {
                "variable": {
                    "value": "self.pos_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.transpose(self.input_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "ids": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_70": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_95": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_95": {
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_113": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "conv_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_ref",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "h_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv_ref, b, name='relu_ref')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_130": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_136": {
                "variable": {
                    "value": "pooled_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv_ref, b, name='relu_ref'))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool_ref",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_154": {
                "name": {
                    "value": "highway",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_160": {
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_165": {
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_196": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "embedding_lookup_65": {
                "params": {
                    "value": "embs_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_normalize_189": {
                "x": {
                    "value": "self.h_drop_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_192": {
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_197": {
                "a": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_198": {
                "a": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_111": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[filter_size, emd_dim, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_112": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_127": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_128": {
                "value": {
                    "value": "conv_ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded_ref, W, strides=[1, 1, 1, 1], padding='VALID', name='conv_ref')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu_ref",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_191": {
                "a": {
                    "value": "self.reference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_201": {
                "x": {
                    "value": "tf.reduce_sum(self.neg_vec)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "input_tensor": {
                    "value": "self.neg_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_202": {
                "x": {
                    "value": "tf.reduce_sum(self.pos_vec)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_202": {
                "input_tensor": {
                    "value": "self.pos_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/rankgan/RankganGenerator.py": {
        "tensorflow": {
            "constant_14": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_15": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_22": {
                "variable": {
                    "value": "self.expected_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_45": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_47": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_61": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_71": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_75": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_86": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_106": {
                "variable": {
                    "value": "(self.pretrain_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_121": {
                "variable": {
                    "value": "(self.g_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.g_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_140": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_146": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_148": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_199": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_200": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_222": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_223": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_231": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_233": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary, self.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_53": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_55": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_136": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_162": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_165": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_183": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_204": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_211": {
                "learning_rate": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_227": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_228": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_229": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "shape": {
                    "value": "[self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_37": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_106": {
                "ys": {
                    "value": "self.pretrain_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)), 1) * tf.reshape(self.rewards, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_121": {
                "ys": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_194": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_223": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_38": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_53": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_97": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_192": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_205": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_223": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_227": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_54": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_56": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_65": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_89": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_90": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_56": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_98": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_98": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_98": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_99": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_114": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_114": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_114": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_115": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/rankgan/RankganReward.py": {
        "tensorflow": {
            "identity_15": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_18": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.given_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_31": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_35": {
                "variable": {
                    "value": "ta_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_40": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_42": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_62": {
                "variable": {
                    "value": "(i, x_t, h_tm1, given_num, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, given_num, _4: i < given_num",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, self.given_num, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "while_loop_68": {
                "variable": {
                    "value": "(_, _, _, _, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(i, x_t, h_tm1, given_num, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_106": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_107": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_108": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_110": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_111": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_112": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_114": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_115": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_116": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_118": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_119": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_120": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_215": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_216": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_241": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_56": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_58": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_123": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_126": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_132": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_138": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_144": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_178": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_181": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_187": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_193": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_199": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_219": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_232": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_28": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_36": {
                "a": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_155": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_210": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_29": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "logits": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_57": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_153": {
                "x": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_161": {
                "input": {
                    "value": "self.lstm.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_162": {
                "input": {
                    "value": "self.lstm.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_163": {
                "input": {
                    "value": "self.lstm.bi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_165": {
                "input": {
                    "value": "self.lstm.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_166": {
                "input": {
                    "value": "self.lstm.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_167": {
                "input": {
                    "value": "self.lstm.bf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_169": {
                "input": {
                    "value": "self.lstm.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_170": {
                "input": {
                    "value": "self.lstm.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_171": {
                "input": {
                    "value": "self.lstm.bog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_173": {
                "input": {
                    "value": "self.lstm.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_174": {
                "input": {
                    "value": "self.lstm.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_175": {
                "input": {
                    "value": "self.lstm.bc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_208": {
                "x": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_221": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_228": {
                "input": {
                    "value": "self.lstm.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_229": {
                "input": {
                    "value": "self.lstm.bo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_57": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_65": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_195": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_200": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/seqgan/SeqganDiscriminator.py": {
        "tensorflow": {
            "get_variable_27": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "bias_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_68": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_134": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "scope or 'SimpleLinear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'Highway'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, scope='highway_gate_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "a": {
                    "value": "matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [output_size, input_size], dtype=input_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocab_size, emd_dim], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_76": {
                "variable": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_77": {
                "variable": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_highway",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([num_filters_total, num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "xw_plus_b_123": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([num_filters_total, num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "self.ypred_for_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_125": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_129": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "self.d_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_mean(self.loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_72": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([num_filters_total, num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_96": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "highway",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_114": {
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_118": {
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_121": {
                "t": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([num_filters_total, num_classes], stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_122": {
                "t": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_128": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_119": {
                "shape": {
                    "value": "[num_filters_total, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_120": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_131": {
                "input_tensor": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_85": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[filter_size, emd_dim, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_86": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_94": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/seqgan/SeqganGenerator.py": {
        "tensorflow": {
            "constant_15": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "variable": {
                    "value": "self.expected_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_46": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_48": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_62": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_72": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_76": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_87": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_107": {
                "variable": {
                    "value": "(self.pretrain_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_122": {
                "variable": {
                    "value": "(self.g_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.g_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_143": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_146": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_200": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_201": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_223": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_224": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_232": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary, self.emb_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_54": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_56": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_163": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_178": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_184": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_205": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_212": {
                "learning_rate": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_228": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_229": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_230": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_231": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "shape": {
                    "value": "[self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_38": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_107": {
                "ys": {
                    "value": "self.pretrain_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)), 1) * tf.reshape(self.rewards, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_122": {
                "ys": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_195": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_224": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_234": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_39": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_57": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_193": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_206": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_224": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_228": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_55": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_57": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_65": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_90": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_91": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_57": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_99": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_99": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_99": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_100": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_115": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_115": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_115": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_116": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/seqgan/SeqganReward.py": {
        "tensorflow": {
            "identity_16": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_19": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.given_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_34": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_38": {
                "variable": {
                    "value": "ta_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_45": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_65": {
                "variable": {
                    "value": "(i, x_t, h_tm1, given_num, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, given_num, _4: i < given_num",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, self.given_num, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "while_loop_71": {
                "variable": {
                    "value": "(_, _, _, _, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(i, x_t, h_tm1, given_num, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_107": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_108": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_109": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_111": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_112": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_113": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_115": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_116": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_117": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_119": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_120": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_121": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_216": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_217": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.bo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_241": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lstm.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_31": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_59": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_124": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_127": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_145": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_179": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_182": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_188": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_194": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_200": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_220": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_233": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_30": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "a": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_156": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_211": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_31": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "logits": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_154": {
                "x": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_162": {
                "input": {
                    "value": "self.lstm.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_163": {
                "input": {
                    "value": "self.lstm.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_164": {
                "input": {
                    "value": "self.lstm.bi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_166": {
                "input": {
                    "value": "self.lstm.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_167": {
                "input": {
                    "value": "self.lstm.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_168": {
                "input": {
                    "value": "self.lstm.bf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_170": {
                "input": {
                    "value": "self.lstm.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_171": {
                "input": {
                    "value": "self.lstm.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_172": {
                "input": {
                    "value": "self.lstm.bog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_174": {
                "input": {
                    "value": "self.lstm.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_175": {
                "input": {
                    "value": "self.lstm.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_176": {
                "input": {
                    "value": "self.lstm.bc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_209": {
                "x": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ],
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_222": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_229": {
                "input": {
                    "value": "self.lstm.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_230": {
                "input": {
                    "value": "self.lstm.bo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_60": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_69": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_135": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_195": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_196": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/textGan_MMD/TextganDiscriminator.py": {
        "tensorflow": {
            "placeholder_18": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.input_x_lable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.input_y_lable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.zh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, emd_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "zh",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_33": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_150": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scan_166": {
                "variable": {
                    "value": "embedded_chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda a, x: tf.matmul(x, self.W)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "input_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embbeding_mat, input_xy)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.embbeding_mat, input_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_167": {
                "variable": {
                    "value": "embedded_chars_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.scan(lambda a, x: tf.matmul(x, self.W), input_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "h_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_198": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "input_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.input_x, self.input_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "input_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.input_x_lable, self.input_y_lable]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_68": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embbeding_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "input_xy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.input_x, self.input_y], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_162": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embbeding_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "input_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embbeding_mat, input_xy)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.embbeding_mat, input_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_202": {
                "variable": {
                    "value": "h_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feature(input_x)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_208": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(d_feature, self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scores",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_209": {
                "variable": {
                    "value": "ypred_for_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, self.Wo, self.bo, name='scores')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_210": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, self.Wo, self.bo, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([emd_dim, emd_dim], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([num_filters_total, self.num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "self.Wzh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([num_filters_total, 1], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "Wz",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "self.bzh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bz",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * tf.expand_dims(sigmas, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(dist, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gaussian_kernel_matrix(x, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_131": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cost > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cost",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(gaussian_kernel_matrix(x, x))",
                            "Call"
                        ],
                        [
                            "cost - 2 * tf.reduce_mean(gaussian_kernel_matrix(x, y))",
                            "BinOp"
                        ],
                        [
                            "tf.where(cost > 0, cost, 0, name='value')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_138": {
                "variable": {
                    "value": "pos_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, self.Wo, self.bo, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_num, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_139": {
                "variable": {
                    "value": "pos_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.input_x_lable, self.input_y_lable], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_num, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_140": {
                "variable": {
                    "value": "gan_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(pos_score - pos_label, ord=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "z_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feature(input_x=self.input_x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wzh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_172": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_expanded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedded_chars, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W_conv[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, self.b_conv[index])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_181": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, self.b_conv[index]), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_201": {
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_205": {
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_206": {
                "t": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_207": {
                "t": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_37": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_56": {
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_61": {
                "name": {
                    "value": "recon",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_99": {
                "a": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "tensor": {
                    "value": "tf.reduce_sum(tf.exp(-s), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "input_tensor": {
                    "value": "gaussian_kernel_matrix(y, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_136": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_166": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_170": {
                "name": {
                    "value": "'conv-maxpool-%s-midterm' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_57": {
                "shape": {
                    "value": "[num_filters_total, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_58": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_62": {
                "shape": {
                    "value": "[num_filters_total, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_63": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "tensor": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_pairwise_distances(x, y)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "tf.exp(-s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_123": {
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_pairwise_distances(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_128": {
                "input_tensor": {
                    "value": "gaussian_kernel_matrix(x, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_137": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(h_drop, self.Wo, self.bo, name='scores')",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_140": {
                "tensor": {
                    "value": "pos_score - pos_label",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_146": {
                "x": {
                    "value": "tf.norm(tf.subtract(z_hat, self.zh), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_179": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_expanded, self.W_conv[index], strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.b_conv[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "truncated_normal_50": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[filter_size, emd_dim, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_52": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_88": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_117": {
                "input": {
                    "value": "sigmas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1e-06, 1e-05, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 15, 20, 25, 30, 35, 100, 1000.0, 10000.0, 100000.0, 1000000.0]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_123": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_146": {
                "tensor": {
                    "value": "tf.subtract(z_hat, self.zh)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_99": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_146": {
                "x": {
                    "value": "z_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x_feature, self.Wzh)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.zh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "input_tensor": {
                    "value": "gan_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.norm(pos_score - pos_label, ord=1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/textGan_MMD/TextganGenerator.py": {
        "tensorflow": {
            "constant_16": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_17": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "self.expected_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.h_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.c_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h_0, self.c_0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_51": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_53": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_55": {
                "variable": {
                    "value": "gen_ot",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_69": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x, self.gen_ot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x, gen_ot)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_79": {
                "variable": {
                    "value": "self.gen_ot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.gen_ot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[sequence_length, batch_size, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_80": {
                "variable": {
                    "value": "self.gen_ot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_ot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_83": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_87": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_98": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_105": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_118": {
                "variable": {
                    "value": "(self.pretrain_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.pretrain_loss, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_198": {
                "variable": {
                    "value": "(self.g_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.mmd, self.g_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_242": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_243": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_244": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_246": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_247": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_248": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_250": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_251": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_252": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_254": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.emb_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_255": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_256": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_301": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.hidden_dim, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_302": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_matrix([self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_324": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_325": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_333": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_335": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_43": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_61": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(o_t, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.softmax(tf.multiply(o_t, 1000.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * tf.expand_dims(sigmas, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(dist, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gaussian_kernel_matrix(x, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_188": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cost > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cost",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(gaussian_kernel_matrix(x, x))",
                            "Call"
                        ],
                        [
                            "cost - 2 * tf.reduce_mean(gaussian_kernel_matrix(x, y))",
                            "BinOp"
                        ],
                        [
                            "tf.where(cost > 0, cost, 0, name='value')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_264": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_267": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_273": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_279": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_285": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_306": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_313": {
                "learning_rate": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_329": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_330": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_331": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_332": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "shape": {
                    "value": "[self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_42": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_118": {
                "ys": {
                    "value": "self.pretrain_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_156": {
                "a": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "tensor": {
                    "value": "tf.reduce_sum(tf.exp(-s), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "input_tensor": {
                    "value": "gaussian_kernel_matrix(y, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_198": {
                "ys": {
                    "value": "self.mmd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.g_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_296": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_325": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_335": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_43": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_61": {
                "input": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_62": {
                "logits": {
                    "value": "tf.multiply(o_t, 1000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "tensor": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_pairwise_distances(x, y)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_180": {
                "input_tensor": {
                    "value": "tf.exp(-s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_180": {
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_pairwise_distances(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_185": {
                "input_tensor": {
                    "value": "gaussian_kernel_matrix(x, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_294": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_307": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_325": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_329": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_62": {
                "x": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1000.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_63": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_72": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_73": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_101": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_102": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_145": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_174": {
                "input": {
                    "value": "sigmas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1e-06, 1e-05, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 15, 20, 25, 30, 35, 100, 1000.0, 10000.0, 100000.0, 1000000.0]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_180": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_63": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(o_t, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_110": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_110": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_156": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_268": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_269": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_274": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_275": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_280": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_281": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_286": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_287": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_110": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_111": {
                "t": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/metrics/DocEmbSim.py": {
        "tensorflow": {
            "Graph_88": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "train_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.valid_examples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_109": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0, seed=11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "softmax_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([vocabulary_size, embedding_size], stddev=1.0 / math.sqrt(embedding_size), seed=12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "softmax_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([vocabulary_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_118": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0, seed=11))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sampled_softmax_loss(weights=softmax_weights, biases=softmax_biases, inputs=embed, labels=train_labels, num_sampled=num_sampled, num_classes=vocabulary_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_127": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_129": {
                "variable": {
                    "value": "valid_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "normalized_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                },
                "ids": {
                    "value": "valid_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(self.valid_examples, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "valid_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(normalized_embeddings, valid_dataset)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_135": {
                "graph": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_112": {
                "shape": {
                    "value": "[vocabulary_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(embedding_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "shape": {
                    "value": "[vocabulary_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_121": {
                "weights": {
                    "value": "softmax_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([vocabulary_size, embedding_size], stddev=1.0 / math.sqrt(embedding_size), seed=12))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "softmax_biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size]))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "train_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "vocabulary_size",
                            "Name"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "vocabulary_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_vocabulary",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_127": {
                "input_tensor": {
                    "value": "tf.square(embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_131": {
                "a": {
                    "value": "normalized_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_127": {
                "x": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0, seed=11))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/oracle/OracleGru.py": {
        "tensorflow": {
            "constant_13": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_40": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_42": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_57": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_65": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_68": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_72": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_83": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_90": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "self.out_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary])), 1), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_117": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_126": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_140": {
                "variable": {
                    "value": "self.Wz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 0.1, seed=111)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.Uz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], 0.0, 0.1, seed=211)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "self.bz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], 0.0, 0.1, seed=311)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "self.Wr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 0.1, seed=112)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "self.Ur",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], 0.0, 0.1, seed=212)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_146": {
                "variable": {
                    "value": "self.br",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], 0.0, 0.1, seed=312)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_148": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 0.1, seed=113)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], 0.0, 0.1, seed=213)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_150": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], 0.0, 0.1, seed=313)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_185": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.num_vocabulary], 0.0, 1.0, seed=12341)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_186": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_vocabulary], 0.0, 1.0, seed=56865246)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_19": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_vocabulary, self.emb_dim], 0.0, 1.0, seed=123314154)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_48": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_49": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_123": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_124": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_159": {
                "variable": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_stack",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_161": {
                "variable": {
                    "value": "Zt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wz) + tf.matmul(previous_hidden_state, self.Uz) + self.bz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "variable": {
                    "value": "rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wr) + tf.matmul(previous_hidden_state, self.Ur) + self.br",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_173": {
                "variable": {
                    "value": "ht_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.W) + tf.multiply(rt, tf.matmul(previous_hidden_state, self.U))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_190": {
                "variable": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_18": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_30": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_31": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary])), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_179": {
                "values": {
                    "value": "current_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_32": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_118": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_122": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_178": {
                "x": {
                    "value": "Zt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, self.Wz) + tf.matmul(previous_hidden_state, self.Uz) + self.bz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "a": {
                    "value": "hidden_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.unstack(hidden_memory_tuple)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_49": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_52": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_86": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_87": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_175": {
                "x": {
                    "value": "rt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, self.Wr) + tf.matmul(previous_hidden_state, self.Ur) + self.br)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.matmul(previous_hidden_state, self.U)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_178": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "Zt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, self.Wz) + tf.matmul(previous_hidden_state, self.Uz) + self.bz)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_52": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_95": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_95": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ur",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_95": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_101": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_101": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_101": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/oracle/OracleLstm.py": {
        "tensorflow": {
            "constant_12": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_39": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_41": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_56": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_67": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_71": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_82": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "self.out_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary])), 1), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_116": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_117": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_125": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_139": {
                "variable": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 1000000.0, seed=111)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_140": {
                "variable": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], 0.0, 1000000.0, seed=211)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], 0.0, 1000000.0, seed=311)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_143": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 1000000.0, seed=114)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], 0.0, 1000000.0, seed=115)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], 0.0, 1000000.0, seed=116)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "variable": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 1000000.0, seed=997)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_148": {
                "variable": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], 0.0, 1000000.0, seed=998)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.bog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], 0.0, 1000000.0, seed=999)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 1000000.0, seed=110)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.hidden_dim], 0.0, 1000000.0, seed=111)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], 0.0, 1000000.0, seed=112)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_198": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.num_vocabulary], 0.0, 1.0, seed=12341)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_199": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_vocabulary], 0.0, 1.0, seed=56865246)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_215": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_216": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_224": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_226": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_vocabulary, self.emb_dim], 0.0, 1.0, seed=123314154)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_31": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_47": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_49": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_121": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_122": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_123": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_161": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_182": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_203": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_221": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_222": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_223": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_17": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_29": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_30": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary])), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_127": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_193": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_216": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_226": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_31": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_117": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_121": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_191": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_204": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_216": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_48": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_51": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_59": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_60": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_85": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_86": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_51": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_94": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_94": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_165": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Ui",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uog",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Uc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_94": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_100": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_100": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_100": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/oracle/OracleSru.py": {
        "tensorflow": {
            "constant_13": {
                "variable": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.h0, self.h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_40": {
                "variable": {
                    "value": "gen_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_42": {
                "variable": {
                    "value": "gen_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_57": {
                "variable": {
                    "value": "(_, _, _, self.gen_o, self.gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_g_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, gen_o, gen_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_65": {
                "variable": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.gen_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_68": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_72": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_83": {
                "variable": {
                    "value": "(_, _, _, self.g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < self.sequence_length",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_90": {
                "variable": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "self.out_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary])), 1), [-1, self.sequence_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_117": {
                "variable": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "valid_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(range(20))",
                            "Call"
                        ],
                        [
                            "np.array(range(self.num_vocabulary))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_126": {
                "variable": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.valid_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.valid_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_140": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 1000000.0, seed=111)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], 0.0, 1000000.0, seed=311)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_143": {
                "variable": {
                    "value": "self.Wr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 1000000.0, seed=112)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "self.br",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim], 0.0, 1000000.0, seed=312)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_146": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.emb_dim, self.hidden_dim], 0.0, 1000000.0, seed=113)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_181": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.hidden_dim, self.num_vocabulary], 0.0, 1.0, seed=12341)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_182": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_vocabulary], 0.0, 1.0, seed=56865246)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_19": {
                "variable": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_vocabulary, self.emb_dim], 0.0, 1.0, seed=123314154)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "variable": {
                    "value": "self.processed_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(self.g_embeddings, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_48": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_49": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_123": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_124": {
                "variable": {
                    "value": "u_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[20, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "u_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_155": {
                "variable": {
                    "value": "(_, previous_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_stack",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "variable": {
                    "value": "xt_",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_161": {
                "variable": {
                    "value": "ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wf) + self.bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self.Wr) + self.br",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_186": {
                "variable": {
                    "value": "(hidden_state, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_18": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_30": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_31": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "-tf.reduce_sum(tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary])), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "tf.square(self.g_embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_176": {
                "values": {
                    "value": "[ht, ct]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_32": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "tensor": {
                    "value": "tf.multinomial(log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_118": {
                "x": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_122": {
                "a": {
                    "value": "self.normalized_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_171": {
                "x": {
                    "value": "tf.subtract(1.0, ft)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "xt_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.W)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_174": {
                "x": {
                    "value": "tf.subtract(1.0, rt)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "a": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_49": {
                "logits": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_52": {
                "x": {
                    "value": "tf.one_hot(next_token, self.num_vocabulary, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_86": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_87": {
                "params": {
                    "value": "self.g_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_171": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "ft",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, self.Wf) + self.bf)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_174": {
                "x": {
                    "value": "ct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(ft, previous_c) + tf.multiply(tf.subtract(1.0, ft), xt_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "subtract_174": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "rt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, self.Wr) + self.br)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_52": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.multinomial(log_prob, 1), [self.batch_size]), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "logits": {
                    "value": "o_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "self.g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_95": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_95": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_95": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_101": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(self.x, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_vocabulary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_101": {
                "x": {
                    "value": "tf.reshape(self.g_predictions, [-1, self.num_vocabulary])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_101": {
                "x": {
                    "value": "tf.reshape(self.x, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "tensor": {
                    "value": "self.g_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_vocabulary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "tensorflow": {
            "ConfigProto_27": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_29": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}