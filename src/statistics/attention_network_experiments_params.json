{
    "TC-MultiNetwork.py": {
        "sklearn": {
            "train_test_split_192": {
                "variable": {
                    "value": "(X_train_toxic, X_test_toxic)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_toxic",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['toxic'] == 1, df['total_classes'] == 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_193": {
                "variable": {
                    "value": "(X_train_severe_toxic, X_test_severe_toxic)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_severe_toxic",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['severe_toxic'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_194": {
                "variable": {
                    "value": "(X_train_obscene, X_test_obscene)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_obscene",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['obscene'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.05",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_195": {
                "variable": {
                    "value": "(X_train_threat, X_test_threat)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_threat",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['threat'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.05",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_196": {
                "variable": {
                    "value": "(X_train_insult, X_test_insult)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_insult",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['insult'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_197": {
                "variable": {
                    "value": "(X_train_identity_hate, X_test_identity_hate)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_identity_hate",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['identity_hate'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_198": {
                "variable": {
                    "value": "(X_train_rest, X_test_rest)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_rest",
                    "possible_values": [
                        [
                            "df[df['total_classes'] == 0]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_232": {
                "variable": {
                    "value": "(train, test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df",
                    "possible_values": [
                        [
                            "pd.read_csv('train.csv')",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "shuffle_461": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X_train",
                    "possible_values": [
                        [
                            "pd.concat([X_train_toxic, X_train_severe_toxic, X_train_obscene, X_train_threat, X_train_insult, X_train_identity_hate, X_train_rest])",
                            "Call"
                        ],
                        [
                            "X_train.fillna(0)",
                            "Call"
                        ],
                        [
                            "pd.concat([X_train_toxic_samp, X_train_severe_toxic_samp, X_train_obscene_samp, X_train_threat_samp, X_train_insult_samp, X_train_identity_hate_samp, X_train_rest])",
                            "Call"
                        ],
                        [
                            "shuffle(X_train)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "han_classifier_tox.py": {
        "sklearn": {
            "train_test_split_66": {
                "variable": {
                    "value": "(train, test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df",
                    "possible_values": [
                        [
                            "pd.read_csv(TRAIN_FILE_PATH)",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            }
        }
    },
    "han_classifier_tox_cnn_han_attn_con.py": {
        "sklearn": {
            "train_test_split_70": {
                "variable": {
                    "value": "(train, test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df",
                    "possible_values": [
                        [
                            "pd.read_csv(TRAIN_FILE_PATH)",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "roc_auc_score_388": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.y_val",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "self.model.predict(self.X_val, verbose=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "han_classifier_tox_cnn_lstm.py": {
        "sklearn": {
            "train_test_split_70": {
                "variable": {
                    "value": "(train, test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df",
                    "possible_values": [
                        [
                            "pd.read_csv(TRAIN_FILE_PATH)",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "roc_auc_score_374": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.y_val",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "self.model.predict(self.X_val, verbose=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "han_tox_pred.py": {
        "sklearn": {}
    },
    "local_blends.py": {
        "sklearn": {
            "minmax_scale_11": {
                "variable": {
                    "value": "df_9836[label]",
                    "possible_values": []
                },
                "X": {
                    "value": "df_9836[label]",
                    "possible_values": []
                }
            },
            "minmax_scale_12": {
                "variable": {
                    "value": "df_9830[label]",
                    "possible_values": []
                },
                "X": {
                    "value": "df_9830[label]",
                    "possible_values": []
                }
            },
            "minmax_scale_13": {
                "variable": {
                    "value": "df_9782[label]",
                    "possible_values": []
                },
                "X": {
                    "value": "df_9782[label]",
                    "possible_values": []
                }
            },
            "minmax_scale_14": {
                "variable": {
                    "value": "df_svm[label]",
                    "possible_values": []
                },
                "X": {
                    "value": "df_svm[label]",
                    "possible_values": []
                }
            },
            "minmax_scale_15": {
                "variable": {
                    "value": "df_han_cnn[label]",
                    "possible_values": []
                },
                "X": {
                    "value": "df_han_cnn[label]",
                    "possible_values": []
                }
            }
        }
    },
    "tokenizer_util.py": {
        "sklearn": {
            "train_test_split_256": {
                "variable": {
                    "value": "(train, test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df",
                    "possible_values": [
                        [
                            "pd.read_csv('train.csv')",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            }
        }
    },
    "toxicity_best_network_local.py": {
        "sklearn": {
            "train_test_split_60": {
                "variable": {
                    "value": "(train, test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df",
                    "possible_values": [
                        [
                            "pd.read_csv(TRAIN_FILE_PATH)",
                            "Call"
                        ],
                        [
                            "tu.clean_up(df)",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_116": {
                "variable": {
                    "value": "(X_train_toxic, X_test_toxic)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_toxic",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['toxic'] == 1, df['total_classes'] == 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_117": {
                "variable": {
                    "value": "(X_train_severe_toxic, X_test_severe_toxic)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_severe_toxic",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['severe_toxic'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_118": {
                "variable": {
                    "value": "(X_train_obscene, X_test_obscene)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_obscene",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['obscene'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.05",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_119": {
                "variable": {
                    "value": "(X_train_threat, X_test_threat)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_threat",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['threat'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.05",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_120": {
                "variable": {
                    "value": "(X_train_insult, X_test_insult)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_insult",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['insult'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_121": {
                "variable": {
                    "value": "(X_train_identity_hate, X_test_identity_hate)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_identity_hate",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['identity_hate'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_122": {
                "variable": {
                    "value": "(X_train_rest, X_test_rest)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_rest",
                    "possible_values": [
                        [
                            "df[df['total_classes'] == 0]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "shuffle_308": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X_train",
                    "possible_values": [
                        [
                            "pd.concat([X_train_toxic, X_train_severe_toxic, X_train_obscene, X_train_threat, X_train_insult, X_train_identity_hate, X_train_rest])",
                            "Call"
                        ],
                        [
                            "X_train.fillna(0)",
                            "Call"
                        ],
                        [
                            "shuffle(X_train)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "toxicity_best_network_local_pred.py": {
        "sklearn": {
            "train_test_split_80": {
                "variable": {
                    "value": "(X_train_toxic, X_test_toxic)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_toxic",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['toxic'] == 1, df['total_classes'] == 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_81": {
                "variable": {
                    "value": "(X_train_severe_toxic, X_test_severe_toxic)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_severe_toxic",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['severe_toxic'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_82": {
                "variable": {
                    "value": "(X_train_obscene, X_test_obscene)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_obscene",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['obscene'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.05",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_83": {
                "variable": {
                    "value": "(X_train_threat, X_test_threat)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_threat",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['threat'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.05",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_84": {
                "variable": {
                    "value": "(X_train_insult, X_test_insult)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_insult",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['insult'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_85": {
                "variable": {
                    "value": "(X_train_identity_hate, X_test_identity_hate)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_identity_hate",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['identity_hate'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_86": {
                "variable": {
                    "value": "(X_train_rest, X_test_rest)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_rest",
                    "possible_values": [
                        [
                            "df[df['total_classes'] == 0]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "shuffle_265": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X_train",
                    "possible_values": [
                        [
                            "pd.concat([X_train_toxic, X_train_severe_toxic, X_train_obscene, X_train_threat, X_train_insult, X_train_identity_hate, X_train_rest])",
                            "Call"
                        ],
                        [
                            "X_train.fillna(0)",
                            "Call"
                        ],
                        [
                            "shuffle(X_train)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "toxicity_best_network_multicell_stacked.py": {
        "sklearn": {
            "train_test_split_119": {
                "variable": {
                    "value": "(X_train_toxic, X_test_toxic)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_toxic",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['toxic'] == 1, df['total_classes'] == 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_120": {
                "variable": {
                    "value": "(X_train_severe_toxic, X_test_severe_toxic)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_severe_toxic",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['severe_toxic'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_121": {
                "variable": {
                    "value": "(X_train_obscene, X_test_obscene)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_obscene",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['obscene'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.05",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_122": {
                "variable": {
                    "value": "(X_train_threat, X_test_threat)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_threat",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['threat'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.05",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_123": {
                "variable": {
                    "value": "(X_train_insult, X_test_insult)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_insult",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['insult'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_124": {
                "variable": {
                    "value": "(X_train_identity_hate, X_test_identity_hate)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_identity_hate",
                    "possible_values": [
                        [
                            "df[np.logical_and(df['identity_hate'] == 1, df['total_classes'] <= 6)]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "train_test_split_125": {
                "variable": {
                    "value": "(X_train_rest, X_test_rest)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "df_all_rest",
                    "possible_values": [
                        [
                            "df[df['total_classes'] == 0]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.1",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "shuffle_315": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X_train",
                    "possible_values": [
                        [
                            "pd.concat([X_train_toxic, X_train_severe_toxic, X_train_obscene, X_train_threat, X_train_insult, X_train_identity_hate, X_train_rest])",
                            "Call"
                        ],
                        [
                            "X_train.fillna(0)",
                            "Call"
                        ],
                        [
                            "shuffle(X_train)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformer.py": {
        "tensorflow": {
            "einsum_42": {
                "variable": {
                    "value": "numerator",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ikz ->ijz",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "K.dot(x, self.kernel_Q)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ktvec",
                    "possible_values": [
                        [
                            "K.permute_dimensions(kvec, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_44": {
                "variable": {
                    "value": "final",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ikz ->ijz",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "smax",
                    "possible_values": [
                        [
                            "K.softmax(numerator / np.sqrt(self.output_dim))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "vvec",
                    "possible_values": [
                        [
                            "K.dot(x, self.kernel_V)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}