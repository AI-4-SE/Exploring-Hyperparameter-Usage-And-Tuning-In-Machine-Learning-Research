{
    "data_handler/incremental_loader.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_248": {
                "dataset": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "sklearn": {
            "shuffle_49": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(dataset.classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_18": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_250": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_324": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_425": {
                "obj": {
                    "value": "myModel.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'C:/Users/admin/Desktop/Split_and_Bridge/models/trained_ model/{}_task_{}.pt'.format(log_name, t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_170": {
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/trained_model/split_{}_base_{}_step_{}_batch_{}_epoch_{}_task_{}.pt'.format(args.seed, args.base_classes, args.step_size, args.batch_size, args.nepochs, t)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer/evaluator.py": {
        "sklearn": {},
        "torch": {
            "softmax_20": {
                "variable": {
                    "value": "prev_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "curr_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_soft, curr_soft)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "soft_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "soft_arr + [temp_soft]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "temp_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[:, t:t + step_size]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_15": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.matmul(temp.unsqueeze(2), batch_vec.unsqueeze(3)).squeeze()",
                            "UnaryOp"
                        ],
                        [
                            "model(data)[:, :end]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((out[:, :end - step_size], out_new), dim=1)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_26": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_soft, curr_soft), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(soft_arr, dim=1)",
                            "Call"
                        ],
                        [
                            "out[:, start:end]",
                            "Subscript"
                        ],
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ],
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ],
                        [
                            "model(data)[:, start:end]",
                            "Subscript"
                        ],
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ],
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ],
                        [
                            "model(data)[:, start:end]",
                            "Subscript"
                        ],
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ],
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_37": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_soft, curr_soft), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(soft_arr, dim=1)",
                            "Call"
                        ],
                        [
                            "out[:, start:end]",
                            "Subscript"
                        ],
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ],
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ],
                        [
                            "model(data)[:, start:end]",
                            "Subscript"
                        ],
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ],
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ],
                        [
                            "model(data)[:, start:end]",
                            "Subscript"
                        ],
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ],
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_70": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((prev_soft, curr_soft), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(soft_arr, dim=1)",
                            "Call"
                        ],
                        [
                            "out[:, start:end]",
                            "Subscript"
                        ],
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ],
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ],
                        [
                            "model(data)[:, start:end]",
                            "Subscript"
                        ],
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ],
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ],
                        [
                            "model(data)[:, start:end]",
                            "Subscript"
                        ],
                        [
                            "out[:, start:end - step_size]",
                            "Subscript"
                        ],
                        [
                            "out[:, end - step_size:end]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "class_means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(classes, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "totalFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(classes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "covariance",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_126": {
                "variable": {
                    "value": "euclidean",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_183": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.data.unsqueeze(1) - self.class_means.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "vec.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out[:, :end - step_size], out_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "input": {
                    "value": "temp.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "batch_vec.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_140": {
                "n": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data_handler/dataset.py": {
        "torch": {}
    },
    "networks/MyNetwork_split.py": {
        "torch": {
            "ones_59": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "numclass",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_67": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_75": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_82": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_99": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/misc_functions.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "im_as_ten",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_as_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(cv2im)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(im_as_arr[..., ::-1])",
                            "Call"
                        ],
                        [
                            "im_as_arr.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "networks/model_factory.py": {
        "torch": {}
    },
    "networks/res_utils.py": {
        "torch": {
            "AvgPool2d_9": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_13": {
                "tensors": {
                    "value": "(x, x.mul(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/resnet18.py": {
        "torch": {
            "Conv2d_6": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_87": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes + 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.binary_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "norm_145": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/resnet32.py": {
        "torch": {
            "AvgPool2d_12": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basicblock",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.bn_a(basicblock)",
                            "Call"
                        ],
                        [
                            "F.relu(basicblock, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b(basicblock)",
                            "Call"
                        ],
                        [
                            "self.bn_b(basicblock)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv_1_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_75": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_16": {
                "tensors": {
                    "value": "(x, x.mul(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_47": {
                "input": {
                    "value": "residual + basicblock",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "norm_112": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.avg(x)",
                            "Call"
                        ],
                        [
                            "self.conv_1_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage_1(x)",
                            "Call"
                        ],
                        [
                            "self.stage_2(x)",
                            "Call"
                        ],
                        [
                            "self.stage_3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/resnet_split.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.fc1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.fc_weight[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.fc1.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.fc_biases[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.fc2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.fc_weight[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.fc2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.fc_biases[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_88": {
                "variable": {
                    "value": "x_split",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(x, 1, torch.tensor(output_inverse_idx).expand(x_dim, out_dim1 + out_dim2).cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "x[:, output_inverse_idx, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "x[:, output_inverse_idx, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "x[:, output_inverse_idx, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(self.fc_input_perms[0]).expand(x_dim, in_dim1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_93": {
                "variable": {
                    "value": "x_split",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(x, 1, torch.tensor(output_inverse_idx).expand(x_dim, out_dim1 + out_dim2).cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "x[:, output_inverse_idx, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "x[:, output_inverse_idx, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "x[:, output_inverse_idx, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(self.fc_input_perms[1]).expand(x_dim, in_dim2).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(x, 1, torch.tensor(output_inverse_idx).expand(x_dim, out_dim1 + out_dim2).cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "x[:, output_inverse_idx, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "x[:, output_inverse_idx, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(x_list, 1)",
                            "Call"
                        ],
                        [
                            "x[:, output_inverse_idx, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(output_inverse_idx).expand(x_dim, out_dim1 + out_dim2).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.conv1_1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.conv1_weight[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.conv1_2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.conv1_weight[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_167": {
                "variable": {
                    "value": "self.conv2_1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.conv2_weight[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.conv2_2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.conv2_weight[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_207": {
                "variable": {
                    "value": "self.shortcut_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_208": {
                "variable": {
                    "value": "self.shortcut_1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.shortcut_weight[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "variable": {
                    "value": "self.shortcut_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_212": {
                "variable": {
                    "value": "self.shortcut_2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.shortcut_weight[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_244": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.conv1.conv1_1.out_channels + self.conv1.conv1_2.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_248": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.conv2.conv2_1.out_channels + self.conv2.conv2_2.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_274": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_275": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_278": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_282": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_379": {
                "variable": {
                    "value": "self.residual_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "residual_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_429": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_456": {
                "variable": {
                    "value": "self.residual_block_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "residual_block_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_459": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.baseline_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_463": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.baseline_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_465": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "self.fc_input_perms[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "self.fc_input_perms[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "output_inverse_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[output_forward_idx.index(i) for i in range(out_dim1 + out_dim2)]",
                            "ListComp"
                        ],
                        [
                            "[output_forward_idx.index(i) for i in range(out_dim1 + out_dim2)]",
                            "ListComp"
                        ],
                        [
                            "[output_forward_idx.index(i) for i in range(out_dim1 + out_dim2)]",
                            "ListComp"
                        ],
                        [
                            "[output_forward_idx.index(i) for i in range(out_dim1 + out_dim2)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_286": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_326": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/splits.py": {
        "torch": {
            "Tensor_90": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_101": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_123": {
                "tensors": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_45": {
                "*size": {
                    "value": "(in_dimension,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "(out_dimension,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/joint.py": {
        "torch": {
            "CrossEntropyLoss_19": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/split.py": {
        "torch": {
            "CrossEntropyLoss_21": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_61": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_199": {
                "variable": {
                    "value": "mean_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(prev, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_200": {
                "variable": {
                    "value": "mean_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(new, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev, new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_313": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.model.numclass, self.model.feature.baseline_channels[self.model.feature.group_number])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_314": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.fc.linear.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.model.fc.linear.weight.data",
                            "Attribute"
                        ],
                        [
                            "torch.zeros((self.model.numclass, self.model.feature.baseline_channels[self.model.feature.group_number]))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.model.numclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_316": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.model.numclass)",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "soft_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_151": {
                "variable": {
                    "value": "output_log",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :end_KD] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_152": {
                "variable": {
                    "value": "loss_KD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(output[:, :end_KD] / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output[:, :end_KD] / T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "soft_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(score / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(score / T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "soft_target_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score[:, 0:start] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_182": {
                "variable": {
                    "value": "output_log_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, 0:start] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_183": {
                "variable": {
                    "value": "loss_pre_KD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_log_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(output[:, 0:start] / T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "soft_target_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(score[:, 0:start] / T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "soft_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_104": {
                "variable": {
                    "value": "output_log",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :end_KD] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_105": {
                "variable": {
                    "value": "loss_KD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(output[:, :end_KD] / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output[:, :end_KD] / T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "soft_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(score / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(score / T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_207": {
                "input": {
                    "value": "torch.norm(self.model.fc.linear.weight.data[:start], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_208": {
                "input": {
                    "value": "torch.norm(self.model.fc.linear.weight.data[start:end], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_329": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_bias[k][i].clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_199": {
                "input": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight[:start, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_200": {
                "input": {
                    "value": "new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ],
                        [
                            "new * gamma",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_326": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weight[k][i][j].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_shortcut_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_373": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weight[k][i][j].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_shortcut_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_380": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weight[k][i][j].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_shortcut_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_386": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weight[k][i][j].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_shortcut_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_392": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weight[k][i][j].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_shortcut_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_398": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weight[k][i][j].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_shortcut_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_0_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv2_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ],
                        [
                            "unit_3_1_conv1_weight[k][i, j, :, :].clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_207": {
                "input": {
                    "value": "self.model.fc.linear.weight.data[:start]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_208": {
                "input": {
                    "value": "self.model.fc.linear.weight.data[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/trainer.py": {
        "torch": {
            "SGD_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "myModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data, data_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, y_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target, target_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "kl_div_131": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(len(target), self.dataset.classes).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "kl_div_130": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "soft_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_fixed(data, T=T)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer/trainer_factory.py": {
        "torch": {}
    },
    "trainer/trainer_factory_dd.py": {
        "torch": {}
    },
    "utils/utils.py": {
        "torch": {}
    }
}