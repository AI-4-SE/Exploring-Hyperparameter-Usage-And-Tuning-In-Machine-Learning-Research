{
    "FOTS/RoiRotate.py": {
        "tensorflow": {
            "DEFINE_integer_4": {
                "name": {
                    "value": "virtule_RoiHeight",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_5": {
                "name": {
                    "value": "virtule_MaxRoiWidth",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_19": {
                "variable": {
                    "value": "cropFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "ifeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "offset_height": {
                    "value": "outBox[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "outBox[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target_height": {
                    "value": "outBox[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target_width": {
                    "value": "outBox[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_22": {
                "variable": {
                    "value": "textImgFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "rotateCropedFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.rotate(cropFeatures, angle)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "cropBox[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "cropBox[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target_height": {
                    "value": "cropBox[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target_width": {
                    "value": "cropBox[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_25": {
                "x": {
                    "value": "cropBox[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_27": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.ceil(tf.multiply(tf.divide(self.fix_RoiHeight, cropBox[3]), tf.cast(cropBox[2], tf.float64))), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, self.max_RoiWidth)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.max_RoiWidth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_28": {
                "variable": {
                    "value": "pad_or_crop_textImgFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "resize_textImgFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(textImgFeatures, (self.fix_RoiHeight, w), 1)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "self.fix_RoiHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target_width": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.ceil(tf.multiply(tf.divide(self.fix_RoiHeight, cropBox[3]), tf.cast(cropBox[2], tf.float64))), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(w, self.max_RoiWidth)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_30": {
                "variable": {
                    "value": "pad_or_crop_textImgFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "pad_or_crop_textImgFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(resize_textImgFeatures, 0, 0, self.fix_RoiHeight, w)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(pad_or_crop_textImgFeatures, 0, 0, self.fix_RoiHeight, self.max_RoiWidth)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "self.fix_RoiHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target_width": {
                    "value": "self.max_RoiWidth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [expand_w, expand_w], [expand_w, expand_w], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_37": {
                "variable": {
                    "value": "features_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [expand_w, expand_w], [expand_w, expand_w], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_38": {
                "variable": {
                    "value": "features_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(self.features, paddings, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(features_pad, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "btextImgFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "btextImgFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(btextImgFeatures, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "ws",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(ws, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_51": {
                "variable": {
                    "value": "outBoxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outBoxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(outBoxes, self.features_stride)",
                            "Call"
                        ],
                        [
                            "tf.concat([outBoxes_xy, outBoxes[:, 2:]], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.features_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_52": {
                "variable": {
                    "value": "cropBoxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cropBoxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(cropBoxes, self.features_stride)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.features_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_55": {
                "variable": {
                    "value": "outBoxes_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outBoxes_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outBoxes[:, :2]",
                            "Subscript"
                        ],
                        [
                            "tf.add(outBoxes_xy, expand_w)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "expand_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_56": {
                "variable": {
                    "value": "outBoxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outBoxes_xy, outBoxes[:, 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_62": {
                "variable": {
                    "value": "ifeatures_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ifeatures_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features_pad[b]",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[len_crop, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_64": {
                "variable": {
                    "value": "textImgFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.scanFunc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "[ifeatures_tile, outBoxes, cropBoxes, angles]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "[np.zeros((self.fix_RoiHeight, self.max_RoiWidth, channels), np.float32), np.array(0, np.int32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ceil_25": {
                "x": {
                    "value": "tf.multiply(tf.divide(self.fix_RoiHeight, cropBox[3]), tf.cast(cropBox[2], tf.float64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_25": {
                "x": {
                    "value": "tf.divide(self.fix_RoiHeight, cropBox[3])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(cropBox[2], tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_59": {
                "input": {
                    "value": "outBoxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(outBoxes, self.features_stride)",
                            "Call"
                        ],
                        [
                            "tf.concat([outBoxes_xy, outBoxes[:, 2:]], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_25": {
                "x": {
                    "value": "self.fix_RoiHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "cropBox[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "FOTS/dataset/dataReader.py": {
        "tensorflow": {
            "DEFINE_string_18": {
                "name": {
                    "value": "training_data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "dataFolder/textBox_Anno_trainIcdar/img",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "training dataset to use",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "training_anno_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "dataFolder/textBox_Anno_trainIcdar/icdar",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "training dataset to use",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "vocb_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "dataFolder/textBox_Anno_trainIcdar/vocb_3.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "vocb file path",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_24": {
                "name": {
                    "value": "avoid_vertText",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "avoid_vertText",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_25": {
                "name": {
                    "value": "allow_unknown_char",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "allow unknown char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_27": {
                "name": {
                    "value": "ext",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "icdar",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "LABEL_LEN_UPPER",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "max_image_large_side",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "max image size of training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "max_text_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "if the text in the input image is bigger than this, then we resizethe image according to this",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "min_text_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "if the text size is smaller than this, we ignore it during training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "crop_aspect_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "if the text size is smaller than this, we ignore it during training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_41": {
                "name": {
                    "value": "min_crop_side_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "when doing random crop from input image, themin length of min(H, W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "geometry",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "RBOX",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "which geometry to generate, RBOX or QUAD",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FOTS/detector.py": {
        "tensorflow": {
            "DEFINE_integer_6": {
                "name": {
                    "value": "text_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_19": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true_cls * y_pred_cls * training_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_46": {
                "variable": {
                    "value": "(d1_gt, d2_gt, d3_gt, d4_gt, theta_gt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "y_true_geo",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_47": {
                "variable": {
                    "value": "(d1_pred, d2_pred, d3_pred, d4_pred, theta_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "y_pred_geo",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_22": {
                "name": {
                    "value": "classification_dice_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - 2 * intersection / union",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_56": {
                "name": {
                    "value": "geometry_AABB",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(L_AABB * y_true_cls * training_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_57": {
                "name": {
                    "value": "geometry_theta",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(L_theta * y_true_cls * training_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "variable": {
                    "value": "self.F_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_73": {
                "variable": {
                    "value": "self.F_geometry",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[geo_map, angle_map]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "minimum_50": {
                "x": {
                    "value": "d4_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "d4_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_51": {
                "x": {
                    "value": "d3_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "d3_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_54": {
                "x": {
                    "value": "(area_intersect + 1.0) / (area_union + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_55": {
                "x": {
                    "value": "theta_pred - theta_gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "input_tensor": {
                    "value": "L_AABB * y_true_cls * training_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "input_tensor": {
                    "value": "L_theta * y_true_cls * training_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "L_g * y_true_cls * training_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "y_pred_cls * training_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "FOTS/fots_testModel.py": {
        "tensorflow": {
            "DEFINE_integer_12": {
                "name": {
                    "value": "test_input_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_13": {
                "name": {
                    "value": "test_batch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_14": {
                "name": {
                    "value": "min_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_15": {
                "name": {
                    "value": "RoiHeight",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_16": {
                "name": {
                    "value": "MaxRoiWidth",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_17": {
                "name": {
                    "value": "sharedFeatureChannel",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.input_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.input_rois",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, FLAGS.RoiHeight, FLAGS.MaxRoiWidth, FLAGS.sharedFeatureChannel]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_rois",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.input_ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ws",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_44": {
                "variable": {
                    "value": "self.variable_averages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.997",
                    "type": "float",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_45": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.variable_averages.variables_to_restore()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_46": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=0.05))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_43": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_46": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_46": {
                "per_process_gpu_memory_fraction": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "FOTS/fots_trainModel.py": {
        "tensorflow": {
            "DEFINE_float_10": {
                "name": {
                    "value": "keepProb",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_11": {
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_12": {
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_40": {
                "variable": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.model_loss] + tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_28": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "image_29": {
                "name": {
                    "value": "score_map_pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.det.F_score * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_30": {
                "name": {
                    "value": "geo_map_0_pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.det.F_geometry[:, :, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "image_31": {
                "name": {
                    "value": "org_rois",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "org_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_42": {
                "name": {
                    "value": "score_map",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "score_maps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "image_43": {
                "name": {
                    "value": "geo_map_0",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "geo_maps[:, :, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "image_44": {
                "name": {
                    "value": "training_masks",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "training_masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_40": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FOTS/nets/resnet_utils.py": {
        "tensorflow": {
            "pad_119": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "FOTS/nets/resnet_v1.py": {
        "tensorflow": {
            "placeholder_341": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "depth_bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_104": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, depth_bottleneck, [1, 1], stride=1, scope='conv1')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(residual, depth_bottleneck, 3, stride, rate=rate, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(residual, depth, [1, 1], stride=1, activation_fn=None, scope='conv3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_97": {
                "variable": {
                    "value": "shortcut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "shortcut",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_194": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.utils.collect_named_outputs(end_points_collection, 'pool2', net)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FOTS/recognizer.py": {
        "tensorflow": {
            "DEFINE_integer_4": {
                "name": {
                    "value": "featureNum_reduceHeight",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_5": {
                "name": {
                    "value": "num_hidden",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_6": {
                "name": {
                    "value": "width_stride",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_12": {
                "variable": {
                    "value": "self.rnnSeqLengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(tf.divide(rnnSeqLengths, FLAGS.width_stride))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ctc_loss_25": {
                "variable": {
                    "value": "ctc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.calout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.rnnSeqLengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_longer_outputs_than_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_28": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ctc_loss * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_63": {
                "variable": {
                    "value": "self.word_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, x.shape[2], x.shape[3]))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LSTMCell_70": {
                "variable": {
                    "value": "lstmFwCell_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_71": {
                "variable": {
                    "value": "lstmFwCell_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiRNNCell_72": {
                "variable": {
                    "value": "lstmFwCell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstmFwCell_l1, lstmFwCell_l2]",
                    "type": "List",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_73": {
                "variable": {
                    "value": "lstmFwCell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstmFwCell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([lstmFwCell_l1, lstmFwCell_l2], state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(lstmFwCell, input_keep_prob=self.keepProb, output_keep_prob=self.keepProb)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self.keepProb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.keepProb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_75": {
                "variable": {
                    "value": "lstmBwCell_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_76": {
                "variable": {
                    "value": "lstmBwCell_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiRNNCell_77": {
                "variable": {
                    "value": "lstmBwCell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstmBwCell_l1, lstmBwCell_l2]",
                    "type": "List",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_78": {
                "variable": {
                    "value": "lstmBwCell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstmBwCell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([lstmBwCell_l1, lstmBwCell_l2], state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(lstmBwCell, input_keep_prob=self.keepProb, output_keep_prob=self.keepProb)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self.keepProb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.keepProb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_81": {
                "variable": {
                    "value": "(lstmout, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "lstmFwCell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([lstmFwCell_l1, lstmFwCell_l2], state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(lstmFwCell, input_keep_prob=self.keepProb, output_keep_prob=self.keepProb)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "lstmBwCell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([lstmBwCell_l1, lstmBwCell_l2], state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(lstmBwCell, input_keep_prob=self.keepProb, output_keep_prob=self.keepProb)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.word_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.rnnSeqLengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state_fw": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initial_state_bw": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "time_major": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "lstmout",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lstmout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(lstmout, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "self.conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_104": {
                "variable": {
                    "value": "self.ans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_12": {
                "x": {
                    "value": "tf.divide(rnnSeqLengths, FLAGS.width_stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "recg_feature",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.featureNum_reduceHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.featureNum_reduceHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.featureNum_reduceHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.featureNum_reduceHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.featureNum_reduceHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.featureNum_reduceHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.featureNum_reduceHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.featureNum_reduceHeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features",
                            "Attribute"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.featureNum_reduceHeight, 3)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(x, kernel_size=[2, 2], stride=[2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(x, self.num_hidden, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, x.shape[2], x.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "lstmLayers",
                    "type": "str",
                    "possible_values": []
                }
            },
            "divide_12": {
                "x": {
                    "value": "rnnSeqLengths",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "FLAGS.width_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FOTS/sharedConv.py": {
        "tensorflow": {
            "DEFINE_integer_4": {
                "name": {
                    "value": "features_stride",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_26": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_image_subtraction(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_13": {
                "images": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[tf.shape(inputs)[1] * 2, tf.shape(inputs)[2] * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_29": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=3, num_or_size_splits=num_channels, value=images)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "feature_fusion",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[end_points.values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "variable": {
                    "value": "c1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([g[i - 1], f[i]], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "h[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "c1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(tf.concat([g[i - 1], f[i]], axis=-1), num_outputs[i], 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "g[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "h[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_13": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_64": {
                "values": {
                    "value": "[g[i - 1], f[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "multigpu_train.py": {
        "tensorflow": {}
    }
}