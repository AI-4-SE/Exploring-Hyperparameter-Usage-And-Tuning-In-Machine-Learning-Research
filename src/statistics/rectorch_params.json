{
    "rectorch/models.py": {
        "torch": {
            "Adam_345": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_512": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_581": {
                "variable": {
                    "value": "BCE",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.network(x_tensor)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Adam_657": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_768": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_1175": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_1176": {
                "variable": {
                    "value": "self.regularization_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_1181": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_1182": {
                "variable": {
                    "value": "self.opt_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1274": {
                "variable": {
                    "value": "real_label",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_1296": {
                "variable": {
                    "value": "fake_data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.generator(batch)",
                            "Call"
                        ],
                        [
                            "torch.mul(fake_data, mask)",
                            "Call"
                        ],
                        [
                            "self.generator(batch)",
                            "Call"
                        ],
                        [
                            "torch.mul(fake_data, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.clone()",
                            "Call"
                        ],
                        [
                            "mask.to(self.device)",
                            "Call"
                        ],
                        [
                            "batch.clone()",
                            "Call"
                        ],
                        [
                            "mask.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_1321": {
                "variable": {
                    "value": "real_label",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_1322": {
                "variable": {
                    "value": "fake_label",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_1335": {
                "variable": {
                    "value": "fake_data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.generator(batch)",
                            "Call"
                        ],
                        [
                            "torch.mul(fake_data, mask)",
                            "Call"
                        ],
                        [
                            "self.generator(batch)",
                            "Call"
                        ],
                        [
                            "torch.mul(fake_data, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.clone()",
                            "Call"
                        ],
                        [
                            "mask.to(self.device)",
                            "Call"
                        ],
                        [
                            "batch.clone()",
                            "Call"
                        ],
                        [
                            "mask.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_1380": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Adam_1618": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_197": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_199": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_493": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': cur_epoch, 'state_dict': self.network.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': cur_epoch, 'state_dict': self.network.state_dict(), 'optimizer': self.optimizer.state_dict(), 'gradient_updates': self.gradient_updates}",
                            "Dict"
                        ],
                        [
                            "{'lambda': self.lam, 'model': self.model}",
                            "Dict"
                        ],
                        [
                            "np.load(filepath, allow_pickle=True)[()]",
                            "Subscript"
                        ],
                        [
                            "{'epoch': cur_epoch, 'state_dict_g': self.generator.state_dict(), 'state_dict_d': self.discriminator.state_dict(), 'optimizer_g': self.opt_g.state_dict(), 'optimizer_d': self.opt_g.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'lambda1': self.lambda1, 'lambda2': self.lambda2, 'rho': self.rho, 'model': self.model, 'nn_constr': self.nn_constr, 'l1_penalty': self.l1_penalty, 'item_bias': self.item_bias}",
                            "Dict"
                        ],
                        [
                            "np.load(filepath, allow_pickle=True)[()]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_1169": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_1171": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_1374": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': cur_epoch, 'state_dict': self.network.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': cur_epoch, 'state_dict': self.network.state_dict(), 'optimizer': self.optimizer.state_dict(), 'gradient_updates': self.gradient_updates}",
                            "Dict"
                        ],
                        [
                            "{'lambda': self.lam, 'model': self.model}",
                            "Dict"
                        ],
                        [
                            "np.load(filepath, allow_pickle=True)[()]",
                            "Subscript"
                        ],
                        [
                            "{'epoch': cur_epoch, 'state_dict_g': self.generator.state_dict(), 'state_dict_d': self.discriminator.state_dict(), 'optimizer_g': self.opt_g.state_dict(), 'optimizer_d': self.opt_g.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'lambda1': self.lambda1, 'lambda2': self.lambda2, 'rho': self.rho, 'model': self.model, 'nn_constr': self.nn_constr, 'l1_penalty': self.l1_penalty, 'item_bias': self.item_bias}",
                            "Dict"
                        ],
                        [
                            "np.load(filepath, allow_pickle=True)[()]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MSELoss_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_582": {
                "input": {
                    "value": "torch.sum(1 + logvar - mu.pow(2) - logvar.exp(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_620": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_701": {
                "input": {
                    "value": "torch.sum(F.log_softmax(recon_x, 1) * x, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_813": {
                "input": {
                    "value": "torch.sum(F.log_softmax(recon_x, 1) * x, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_814": {
                "input": {
                    "value": "torch.sum(1 + logvar - mu.pow(2) - logvar.exp(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_951": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_1623": {
                "input": {
                    "value": "F.log_softmax(recon_x, -1) * x.view(recon_x.shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1624": {
                "input": {
                    "value": "x[0, :recon_x.shape[2]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_1625": {
                "input": {
                    "value": "torch.sum(1 + logvar - mu.pow(2) - logvar.exp(), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_1630": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_582": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_701": {
                "input": {
                    "value": "F.log_softmax(recon_x, 1) * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_813": {
                "input": {
                    "value": "F.log_softmax(recon_x, 1) * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_814": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_1625": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_701": {
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.network(x_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_813": {
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.network(x_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_1623": {
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.network(x_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "rectorch/nets.py": {
        "torch": {
            "Dropout_128": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.enc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.enc_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.enc_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.dec_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dec_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dec_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_157": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_210": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.enc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_in, d_out) for (d_in, d_out) in zip(self.enc_dims[:-1], self.enc_dims[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.dec_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_in, d_out) for (d_in, d_out) in zip(self.dec_dims[:-1], self.dec_dims[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "normalize_220": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.enc_layer(x))",
                            "Call"
                        ],
                        [
                            "self.item_embed(x.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_265": {
                "variable": {
                    "value": "self.enc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_in, d_out) for (d_in, d_out) in zip(temp_dims[:-1], temp_dims[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_268": {
                "variable": {
                    "value": "self.dec_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_in, d_out) for (d_in, d_out) in zip(self.dec_dims[:-1], self.dec_dims[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "exp_318": {
                "variable": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_319": {
                "variable": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * var)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_392": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_395": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.enc_layer(x))",
                            "Call"
                        ],
                        [
                            "self.item_embed(x.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_461": {
                "variable": {
                    "value": "self.enc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_in, d_out) for (d_in, d_out) in zip(temp_dims[:-1], temp_dims[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_464": {
                "variable": {
                    "value": "self.dec_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_in, d_out) for (d_in, d_out) in zip(self.dec_dims[:-1], self.dec_dims[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "normalize_469": {
                "variable": {
                    "value": "h1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :-self.cond_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, x[:, -self.cond_dim:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_524": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_592": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_661": {
                "variable": {
                    "value": "self.item_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_items",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "GRU_663": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_161": {
                "input": {
                    "value": "self.dec_layer(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_224": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_315": {
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, x[:, -self.cond_dim:]), 1)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_416": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_686": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_232": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, x[:, -self.cond_dim:]), 1)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_291": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, x[:, -self.cond_dim:]), 1)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_314": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, x[:, -self.cond_dim:]), 1)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_401": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, x[:, -self.cond_dim:]), 1)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_476": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, x[:, -self.cond_dim:]), 1)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "torch.tanh(layer(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_523": {
                "in_features": {
                    "value": "*self.layers_dim[-2:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sigmoid_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_591": {
                "in_features": {
                    "value": "*self.layers_dim[-2:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sigmoid_591": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_611": {
                "tensors": {
                    "value": "(x, cond)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_out",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_out",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_out",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_out",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_462": {
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_out",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "in_features": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_out",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_519": {
                "in_features": {
                    "value": "in_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feat",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_519": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_587": {
                "in_features": {
                    "value": "in_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feat",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_587": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "rectorch/samplers.py": {
        "torch": {
            "zeros_546": {
                "variable": {
                    "value": "y_batch_s",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "ulen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_items",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_562": {
                "variable": {
                    "value": "y_batch_s",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_items",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_evaluation.py": {
        "torch": {}
    },
    "tests/test_models.py": {
        "torch": {
            "sigmoid_126": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1, 1], [1, 1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "cfgan.predict(torch.FloatTensor([[0, 1, 1], [1, 1, 0]]))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_233": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1, 1], [1, 1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "cfgan.predict(torch.FloatTensor([[0, 1, 1], [1, 1, 0]]))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_315": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1], [1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1, 1], [1, 1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "cfgan.predict(torch.FloatTensor([[0, 1, 1], [1, 1, 0]]))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_102": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_138": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_153": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_157": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_179": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_191": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_194": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_206": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_208": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_210": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_231": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_245": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_248": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_260": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_262": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_264": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_313": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_320": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_323": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_335": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_337": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_339": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_523": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_526": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_542": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_544": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_546": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_42": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_67": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_89": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_118": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_144": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_172": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_197": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_225": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_251": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_306": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_326": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_508": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_529": {
                "input": {
                    "value": "out_1.eq(out_2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nets.py": {
        "torch": {
            "manual_seed_56": {
                "seed": {
                    "value": "98765",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "98765",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "98765",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "98765",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_144": {
                "seed": {
                    "value": "98765",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_samplers.py": {
        "torch": {}
    }
}