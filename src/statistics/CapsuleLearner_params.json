{
    "CapsuleLayer.py": {
        "tensorflow": {
            "get_variable_19": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.input_caps_num, self.input_caps_len, num_outputs * out_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=self.num_outputs / self.input_caps_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "variable": {
                    "value": "u_hats",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(self.input, [1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "u_hats_split",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u_hats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(self.input, [1, 0, 2]), self.W)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.input_caps_num, self.batch_size, self.capsule_len, self.num_outputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_caps_num, self.batch_size, 1, self.num_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_24": {
                "logits": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([self.input_caps_num, self.batch_size, 1, self.num_outputs], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.add(b, tf.reduce_sum(tf.multiply(u_hats_split, v), axis=2, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_37": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(u_hats_split, c)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_45": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([self.input_caps_num, self.batch_size, 1, self.num_outputs], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.add(b, tf.reduce_sum(tf.multiply(u_hats_split, v), axis=2, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(tf.multiply(u_hats_split, v), axis=2, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_46": {
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "squash(s, 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_15": {
                "input": {
                    "value": "input_",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_28": {
                "a": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_20": {
                "stddev": {
                    "value": "self.num_outputs / self.input_caps_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_37": {
                "x": {
                    "value": "u_hats_split",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(u_hats, [self.input_caps_num, self.batch_size, self.capsule_len, self.num_outputs])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_coupling_coef(b)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_45": {
                "input_tensor": {
                    "value": "tf.multiply(u_hats_split, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_45": {
                "x": {
                    "value": "u_hats_split",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(u_hats, [self.input_caps_num, self.batch_size, self.capsule_len, self.num_outputs])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "squash(s, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CustomSaver.py": {
        "tensorflow": {
            "Saver_14": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_empty": {
                    "value": "allow_empty",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_48": {
                "variable": {
                    "value": "reader",
                    "type": "Name",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "save_file",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Saver_61": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "latest_checkpoint_83": {
                "checkpoint_dir": {
                    "value": "folder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.folders",
                            "Attribute"
                        ],
                        [
                            "self.get_folder(epochend)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SemiSupervised.py": {
        "tensorflow": {
            "AdamOptimizer_38": {
                "variable": {
                    "value": "params.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, network_base.config.code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_80": {
                "x": {
                    "value": "network_base.get_runner().generated",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SemiSupervisedNet.py": {
        "tensorflow": {
            "concat_72": {
                "variable": {
                    "value": "encoded",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.nn.softmax(self.labels), tf.tanh(self.code))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_74": {
                "variable": {
                    "value": "self.img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.decoded",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "ae_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tanh_cross_entropy(self.decoded, images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "variable": {
                    "value": "labels_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "classification_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels_mask * tf.nn.softmax_cross_entropy_with_logits(labels=targets, logits=self.labels)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "variable": {
                    "value": "labels_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_84": {
                "variable": {
                    "value": "classified",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(labels, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(targets, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_101": {
                "variable": {
                    "value": "self.generated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.get_decoded(randoms, reuse=tf.AUTO_REUSE, training=training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_106": {
                "variable": {
                    "value": "(self.classification_orig, self.classification_fake)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "classification",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.shape(images)[0], tf.shape(randoms)[0]]",
                            "List"
                        ]
                    ]
                }
            },
            "split_108": {
                "variable": {
                    "value": "(self.orig, self.fakes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.is_fake(tf.tanh(codes))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.shape(images)[0], tf.shape(randoms)[0]]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "labels_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "variable": {
                    "value": "classification_loss_d",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels_mask * tf.nn.softmax_cross_entropy_with_logits(labels=targets, logits=self.classification_orig)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "classification_loss_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.gen_labels, logits=self.classification_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "d_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(self.orig), logits=self.orig)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "variable": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(self.fakes), logits=self.fakes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_128": {
                "variable": {
                    "value": "all_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_47": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(cur, conv.num_features, conv.kernel, conv.stride, padding='same', name='dconv%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training, name='dbatch%d' % i)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(cur)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(encoded, dense_size, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur, [-1, *config.first_decode_shape])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(cur, conv.num_features, conv.kernel, conv.stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cur, config.orig_channels, 1, padding='same')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_56": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((tf.nn.softmax(self.labels), tf.tanh(self.code)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "dense_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.prod(config.first_decode_shape)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(cur, conv.num_features, conv.kernel, conv.stride, padding='same', name='dconv%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training, name='dbatch%d' % i)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(cur)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(encoded, dense_size, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur, [-1, *config.first_decode_shape])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(cur, conv.num_features, conv.kernel, conv.stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cur, config.orig_channels, 1, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, *config.first_decode_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(cur, conv.num_features, conv.kernel, conv.stride, padding='same', name='dconv%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training, name='dbatch%d' % i)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(cur)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(encoded, dense_size, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur, [-1, *config.first_decode_shape])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(cur, conv.num_features, conv.kernel, conv.stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cur, config.orig_channels, 1, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "config.orig_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "tf.cast(classified, tf.float32) * labels_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_97": {
                "variable": {
                    "value": "fake_detector",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "code",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(self.fakes), logits=self.fakes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(cur, conv.num_features, conv.kernel, conv.stride, padding='same', name='dconv%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training, name='dbatch%d' % i)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(cur)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(encoded, dense_size, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur, [-1, *config.first_decode_shape])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(cur, conv.num_features, conv.kernel, conv.stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cur, config.orig_channels, 1, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "conv.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "conv.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'dconv%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_45": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(cur, conv.num_features, conv.kernel, conv.stride, padding='same', name='dconv%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training, name='dbatch%d' % i)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(cur)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(encoded, dense_size, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur, [-1, *config.first_decode_shape])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(cur, conv.num_features, conv.kernel, conv.stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cur, config.orig_channels, 1, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'dbatch%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_61": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(cur, conv.num_features, conv.kernel, conv.stride, padding='same', name='dconv%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training, name='dbatch%d' % i)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(cur)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(encoded, dense_size, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur, [-1, *config.first_decode_shape])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(cur, conv.num_features, conv.kernel, conv.stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cur, config.orig_channels, 1, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "conv.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "conv.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_62": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(cur, conv.num_features, conv.kernel, conv.stride, padding='same', name='dconv%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training, name='dbatch%d' % i)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(cur)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(encoded, dense_size, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur, [-1, *config.first_decode_shape])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(cur, conv.num_features, conv.kernel, conv.stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cur, config.orig_channels, 1, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_84": {
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "control_dependencies_91": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "discriminator_add",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_104": {
                "values": {
                    "value": "(images, self.generated)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_115": {
                "labels": {
                    "value": "self.gen_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.classification_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_116": {
                "labels": {
                    "value": "tf.ones_like(self.orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_117": {
                "labels": {
                    "value": "tf.zeros_like(self.fakes)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.fakes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_120": {
                "labels": {
                    "value": "tf.ones_like(self.fakes)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.fakes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_132": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_48": {
                "inputs": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(cur, conv.num_features, conv.kernel, conv.stride, padding='same', name='dconv%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training, name='dbatch%d' % i)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(cur)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(encoded, dense_size, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cur, [-1, *config.first_decode_shape])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(cur, conv.num_features, conv.kernel, conv.stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(cur, training=training)",
                            "Call"
                        ],
                        [
                            "leaky_relu(cur, config.alpha)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cur, config.orig_channels, 1, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.code_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "logits": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_72": {
                "x": {
                    "value": "self.code",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_79": {
                "labels": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_85": {
                "x": {
                    "value": "classified",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(labels, axis=-1), tf.argmax(targets, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_91": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_105": {
                "input": {
                    "value": "randoms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate((random_targets, random_code), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_108": {
                "x": {
                    "value": "codes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_114": {
                "labels": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.classification_orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_132": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_116": {
                "input": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "self.fakes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "self.fakes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SimpleCapsNet.py": {
        "tensorflow": {
            "conv2d_47": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "config.conv1_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "config.conv1_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "config.conv2_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "config.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_54": {
                "variable": {
                    "value": "self.masked_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.caps2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "maskForMaxCapsule(self.output_norms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_55": {
                "variable": {
                    "value": "self.flattened",
                    "type": "Attribute",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.masked_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_56": {
                "variable": {
                    "value": "self.rec1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.flattened",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.reconstruction_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "rec1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "self.rec2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.rec1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.reconstruction_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "rec2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_59": {
                "variable": {
                    "value": "self.rec3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.rec2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "rec3_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.prod(input_.shape.as_list()[1:])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "rec3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "self.reconstructed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sigmoid(self.rec3)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(input_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "margin_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "margin_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets * tf.square(tf.maximum(0.0, loss_config.margin_m_plus - self.output_norms))",
                            "BinOp"
                        ],
                        [
                            "margin_loss + loss_config.margin_lambda * (1.0 - targets) * tf.square(tf.maximum(0.0, self.output_norms - loss_config.margin_m_minus))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(margin_loss, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "input_flattened",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(self.rec3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "reconstruction_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reconstruction_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "loss_config.reconstruction_coef * tf.square(input_flattened - self.rec3)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(reconstruction_loss, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "margin_loss + reconstruction_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(targets, axis=-1), tf.argmax(self.output_norms, axis=-1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_60": {
                "x": {
                    "value": "self.rec3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "input_",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "square_64": {
                "x": {
                    "value": "tf.maximum(0.0, loss_config.margin_m_plus - self.output_norms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "tf.maximum(0.0, self.output_norms - loss_config.margin_m_minus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_76": {
                "x": {
                    "value": "tf.equal(tf.argmax(targets, axis=-1), tf.argmax(self.output_norms, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "a": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_64": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "loss_config.margin_m_plus - self.output_norms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_65": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "self.output_norms - loss_config.margin_m_minus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_70": {
                "input": {
                    "value": "self.rec3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_71": {
                "x": {
                    "value": "input_flattened - self.rec3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_76": {
                "x": {
                    "value": "tf.argmax(targets, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.output_norms, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_76": {
                "input": {
                    "value": "self.output_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "common/Trainer.py": {
        "tensorflow": {
            "concat_280": {
                "variable": {
                    "value": "transform_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones([N, 1]), tf.zeros([N, 1]), tf.random_uniform([N, 1], minval=-mtx, maxval=mtx), tf.zeros([N, 1]), tf.ones([N, 1]), tf.random_uniform([N, 1], minval=-mty, maxval=mty), tf.zeros([N, 1]), tf.zeros([N, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_279": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_80": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *i.shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_280": {
                "shape": {
                    "value": "[N, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "shape": {
                    "value": "[N, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "shape": {
                    "value": "[N, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_281": {
                "shape": {
                    "value": "[N, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "shape": {
                    "value": "[N, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "common/elements/ConvExperiments.py": {
        "tensorflow": {
            "reshape_12": {
                "variable": {
                    "value": "kernel_base",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[w * h * pred, next]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_14": {
                "input_tensor": {
                    "value": "kernel_square",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.transpose(kernel_base, [1, 0]), -1) * kernel_base",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_27": {
                "variable": {
                    "value": "patches",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "patches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "extractor(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(patches, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.extract_image_patches(inputs, (1, kw, kh, 1), (1, sw, sh, 1), (1, 1, 1, 1), padding=padding.upper())",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(patches, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_40": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.33",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "world_dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_48": {
                "variable": {
                    "value": "conv_ideals",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_features * kw * kh * num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "conv_ideals",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_ideals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_ideals, [-1, 1, 1, kw * kh * num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('ideals', [1, 1, kw * kh * num_channels, n_features], initializer=tf.truncated_normal_initializer())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, kw * kh * num_channels, n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_features",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_biases, [-1, 1, 1, n_features])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('ideals', [1, 1, n_features], initializer=tf.truncated_normal_initializer())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_57": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: ideal_conv(*x, extractor)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(data, conv_ideals, conv_biases)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(tf.reduce_sum(kernel_square, axis=-2)))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: ideal_conv(*x, extractor), (data, conv_ideals, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(result, [1])",
                            "Call"
                        ],
                        [
                            "l2_squared_norm(patches - conv_ideals, axis=-2) + conv_biases",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "conv_ideals",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "ideals",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, kw * kh * num_channels, n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "ideals",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, n_features]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "extract_image_patches_77": {
                "variable": {
                    "value": "patches",
                    "type": "Name",
                    "possible_values": []
                },
                "images": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "ksizes": {
                    "value": "(1, kw, kh, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, sw, sh, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "rates": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding.upper()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "variable": {
                    "value": "patches",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "patches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "extractor(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(patches, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.extract_image_patches(inputs, (1, kw, kh, 1), (1, sw, sh, 1), (1, 1, 1, 1), padding=padding.upper())",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(patches, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_13": {
                "input": {
                    "value": "tf.transpose(kernel_base, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_14": {
                "x": {
                    "value": "tf.reduce_sum(kernel_square, axis=-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "extract_image_patches_23": {
                "images": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "ksizes": {
                    "value": "(1, k[0], k[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, s[0], s[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "rates": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding.upper()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur, tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_13": {
                "a": {
                    "value": "kernel_base",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [w * h * pred, next])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "common/elements/Elements.py": {
        "tensorflow": {
            "top_k_228": {
                "variable": {
                    "value": "(topk, indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_229": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(indicies, tf.shape(data)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_45": {
                "variable": {
                    "value": "(x, bn_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=training, name=name, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.concat((x, bn_data), 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_output, [-1, lstm_output.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[tf.shape(x)[0] - ref_size, ref_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_54": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(x, bn_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_116": {
                "variable": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat((data, prev_context), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.context_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=config.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=config.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_117": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.concat((data, prev_context), axis=1), self.context_size, activation=self.activation, kernel_regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "data.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=config.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=config.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_152": {
                "variable": {
                    "value": "out_bools",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_231": {
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.one_hot(indicies, tf.shape(data)[0]), axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_240": {
                "variable": {
                    "value": "passed",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(bools, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_241": {
                "variable": {
                    "value": "total",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(bools)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_242": {
                "variable": {
                    "value": "expected",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "total * tf.constant(self.percent_ready)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_243": {
                "variable": {
                    "value": "min_num",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "total * tf.constant(self.min)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_244": {
                "variable": {
                    "value": "max_num",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "total * tf.constant(self.max)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_245": {
                "pred": {
                    "value": "tf.greater(passed, max_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : get_top_k_mask(pre_max, max_num)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : bools",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "assign_248": {
                "variable": {
                    "value": "new_threshold",
                    "type": "Name",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.ready_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.ready_threshold * decay + (1.0 - decay) * expected_val",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_256": {
                "variable": {
                    "value": "pre_percent",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "pre_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.finalizer.build(data, dropout, training, name, regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_258": {
                "variable": {
                    "value": "pre_max",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pre_percent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(pre_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_260": {
                "variable": {
                    "value": "self.ready_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/threshold'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_262": {
                "variable": {
                    "value": "bools",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "pre_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(pre_percent, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ready_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_263": {
                "variable": {
                    "value": "bools",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self.training_prepare(bools, pre_max)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : bools",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stop_gradient_264": {
                "variable": {
                    "value": "bools",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bools",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(pre_max, self.ready_threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(training, lambda : self.training_prepare(bools, pre_max), lambda : bools)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(bools)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_265": {
                "variable": {
                    "value": "not_bools",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "bools",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(pre_max, self.ready_threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(training, lambda : self.training_prepare(bools, pre_max), lambda : bools)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(bools)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_266": {
                "variable": {
                    "value": "ready",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pre_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.finalizer.build(data, dropout, training, name, regularizer)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "bools",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(pre_max, self.ready_threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(training, lambda : self.training_prepare(bools, pre_max), lambda : bools)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(bools)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_267": {
                "variable": {
                    "value": "need_continue",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "not_bools",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.logical_not(bools)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_291": {
                "variable": {
                    "value": "self.ref_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "ref_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lstm_output",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, lstm_output.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_345": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=training, name=name, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.concat((x, bn_data), 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_output, [-1, lstm_output.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.out_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_348": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, config.out_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, tf.shape(lstm_output)[1], config.out_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(lstm_output)[1], config.out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_375": {
                "variable": {
                    "value": "lstm",
                    "type": "Name",
                    "possible_values": []
                },
                "num_units": {
                    "value": "lstm_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DropoutWrapper_378": {
                "variable": {
                    "value": "lstm",
                    "type": "Name",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(lstm_size)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(lstm, output_keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(training, lambda : 1.0 - config.dropout, lambda : 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiRNNCell_384": {
                "variable": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": []
                },
                "cells": {
                    "value": "[self.build_cell(lstm_size, keep_prob) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cond_391": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : 1.0 - config.dropout",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_397": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_403": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell1",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.gather(tf.concat(pre_vals, axis=0), tf.stop_gradient(tf.contrib.framework.argsort(tf.concat(pre_bools, axis=0))))",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "reshaped",
                            "Name"
                        ],
                        [
                            "deconv.run(cur, conv_info, training=training, dropout=0.0, name='deconv%d' % i, ref_size=ref_size)",
                            "Call"
                        ],
                        [
                            "self.convs.build(inputs, 0.0, training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=-1)",
                            "Call"
                        ],
                        [
                            "outputs2[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs.build(inputs, 0.0, training, regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "element(regularizer).run(cur, *dense, training=training, name='dense%d' % i)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "self.initial_state1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "lstm1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_404": {
                "variable": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dense_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_405": {
                "variable": {
                    "value": "added_features",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(new_features, outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_407": {
                "variable": {
                    "value": "(outputs2, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell2",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "added_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((new_features, outputs), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "self.initial_state2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "lstm2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_39": {
                "x": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_48": {
                "variable": {
                    "value": "bn_data",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "bn_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(bn_data, training=training, name=name)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_52": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=training, name=name, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.concat((x, bn_data), 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_output, [-1, lstm_output.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_59": {
                "x": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                },
                "renorm": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "*conv_config.get_conv_data()",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.variance_scaling_initializer(scale=2.0, mode='fan_in')",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_85": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "*conv_config.get_conv_data()",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_97": {
                "input": {
                    "value": "resized",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(data, [h * strides[0], w * strides[1]], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "conv_config.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "conv_config.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv_config.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampl",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "num_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.sigmoid",
                            "MethodArgument"
                        ],
                        [
                            "tf.sigmoid",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_128": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=config.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(scale=config.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_180": {
                "variable": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat(pre_vals, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.stop_gradient(tf.contrib.framework.argsort(tf.concat(pre_bools, axis=0)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "tensor": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, *self.size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_211": {
                "x": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_221": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_223": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "one_hot_229": {
                "indices": {
                    "value": "indicies",
                    "type": "Name",
                    "possible_values": []
                },
                "depth": {
                    "value": "tf.shape(data)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_297": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(data, self.ref_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "reshaped",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "caps2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "caps_layer.do_dynamic_routing()",
                            "Call"
                        ],
                        [
                            "caps_layer.do_dynamic_routing()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, config.capsg_size[0], config.capsg_size[1], config.capsg_size[2] * config.capsg_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_489": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[l, config.minibatch_num * config.minibatch_len]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_490": {
                "variable": {
                    "value": "minibatch_data",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=training, name=name, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.concat((x, bn_data), 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_output, [-1, lstm_output.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('minibatch_weights', [l, config.minibatch_num * config.minibatch_len], initializer=tf.truncated_normal_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_493": {
                "variable": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(minibatch_data, -1) - tf.transpose(minibatch_data, [1, 0])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(diff, [batch, config.minibatch_num, config.minibatch_len, batch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, config.minibatch_num, config.minibatch_len, batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_497": {
                "values": {
                    "value": "(x, addition)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_502": {
                "x": {
                    "value": "codes",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "maskForMaxCapsule(l1norm(codes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_512": {
                "variable": {
                    "value": "fake_detector",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_528": {
                "logits": {
                    "value": "codes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dense_532": {
                "inputs": {
                    "value": "codes",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminator_result",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_25": {
                "indices": {
                    "value": "tf.argmax(l1norm(code), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "config.num_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_51": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_processed_data(data, conv_config, training)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(output, training, 'bn', **kwargs)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output, dropout, training=training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(context, data.shape[1], activation=self.activation, kernel_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "output + data",
                            "BinOp"
                        ],
                        [
                            "c.element(activation=c.activation, batch_norm=self.batch_norm, regularizer=regularizer).run(cur, c, dropout=dropout, training=training, name=conv_name)",
                            "Call"
                        ],
                        [
                            "c.build(cur, dropout, training, conv_name, regularizer)",
                            "Call"
                        ],
                        [
                            "output[3]",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_116": {
                "values": {
                    "value": "(data, prev_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_184": {
                "values": {
                    "value": "retVal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_240": {
                "x": {
                    "value": "bools",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(pre_max, self.ready_threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(training, lambda : self.training_prepare(bools, pre_max), lambda : bools)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(bools)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_245": {
                "x": {
                    "value": "passed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(bools, tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(total * tf.constant(self.min), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_249": {
                "control_inputs": {
                    "value": "[new_threshold]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_360": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_425": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_473": {
                "name_or_scope": {
                    "value": "self.base_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_488": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_511": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'context_dense'",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'resconv'",
                            "MethodArgument"
                        ],
                        [
                            "'dropout'",
                            "MethodArgument"
                        ],
                        [
                            "'finish'",
                            "MethodArgument"
                        ],
                        [
                            "'preliminary'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ],
                        [
                            "'activation'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_minibatch'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator_add'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_25": {
                "input": {
                    "value": "l1norm(code)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "shape": {
                    "value": "[tf.shape(input)[0], self.context_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_152": {
                "input": {
                    "value": "input if not isinstance(input, tuple) else input[0]",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "boolean_mask_167": {
                "variable": {
                    "value": "out_bools",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_bools",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(tf.shape(input if not isinstance(input, tuple) else input[0])[0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(out_bools, output[2])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "output[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_180": {
                "values": {
                    "value": "pre_bools",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_180": {
                "input": {
                    "value": "tf.contrib.framework.argsort(tf.concat(pre_bools, axis=0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_229": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(data, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ],
                        [
                            "tf.concat((data, self.ref_batch), 0)",
                            "Call"
                        ],
                        [
                            "data[:-ref_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_241": {
                "input": {
                    "value": "bools",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(pre_max, self.ready_threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(training, lambda : self.training_prepare(bools, pre_max), lambda : bools)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(bools)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_242": {
                "value": {
                    "value": "self.percent_ready",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_243": {
                "value": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_244": {
                "value": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_247": {
                "input": {
                    "value": "pre_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(pre_percent, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "expected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(total * tf.constant(self.percent_ready), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_260": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_296": {
                "input": {
                    "value": "self.ref_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_393": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_394": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_487": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=training, name=name, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.concat((x, bn_data), 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_output, [-1, lstm_output.shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_492": {
                "input": {
                    "value": "minibatch_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_492": {
                "a": {
                    "value": "minibatch_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_496": {
                "input_tensor": {
                    "value": "tf.exp(-diff_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argsort_180": {
                "values": {
                    "value": "tf.concat(pre_bools, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_245": {
                "x": {
                    "value": "passed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(bools, tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(total * tf.constant(self.max), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_348": {
                "input": {
                    "value": "lstm_output",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_366": {
                "a": {
                    "value": "cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.gather(tf.concat(pre_vals, axis=0), tf.stop_gradient(tf.contrib.framework.argsort(tf.concat(pre_bools, axis=0))))",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "reshaped",
                            "Name"
                        ],
                        [
                            "deconv.run(cur, conv_info, training=training, dropout=0.0, name='deconv%d' % i, ref_size=ref_size)",
                            "Call"
                        ],
                        [
                            "self.convs.build(inputs, 0.0, training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=-1)",
                            "Call"
                        ],
                        [
                            "outputs2[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.convs.build(inputs, 0.0, training, regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "element(regularizer).run(cur, *dense, training=training, name='dense%d' % i)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_496": {
                "x": {
                    "value": "-diff_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=training, name=name, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.concat((x, bn_data), 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_output, [-1, lstm_output.shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_166": {
                "tensor": {
                    "value": "out_bools",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(tf.shape(input if not isinstance(input, tuple) else input[0])[0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(out_bools, output[2])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "output[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_115": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "common/elements/InfoBasedElements.py": {
        "tensorflow": {
            "sigmoid_49": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.33",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "world_dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Print_51": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[world_info[0], world_info[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "summarize": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_58": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_features * kw * kh * num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * self.conv_param_size, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, self.conv_param_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, kw, kh, num_channels, n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_60": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_features",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_63": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(data, conv_kernels, conv_biases)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (preconv, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=10000)",
                            "Call"
                        ],
                        [
                            "tf.reshape(convolution, [-1, n_features, h1, w1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(convolution, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_88": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_features * kw * kh * num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * self.conv_param_size, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, self.conv_param_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, kw, kh, num_channels, n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_90": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_features",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_92": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(data, conv_kernels, conv_biases)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (preconv, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=10000)",
                            "Call"
                        ],
                        [
                            "tf.reshape(convolution, [-1, n_features, h1, w1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(convolution, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_features, self.world_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_117": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "kw * kh * num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x)))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * self.conv_param_size, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, self.conv_param_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * self.conv_param_size, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, self.conv_param_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, kw, kh, num_channels, n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_120": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, 1, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv_biases, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, 1, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv_biases, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, 1, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_biases, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_124": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(data, conv_kernels, conv_biases)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (preconv, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=10000)",
                            "Call"
                        ],
                        [
                            "tf.reshape(convolution, [-1, n_features, h1, w1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(convolution, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_140": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_features * self.param_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x)))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_features, self.param_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_151": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "kw * kh * num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_152": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * self.conv_param_size, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, self.conv_param_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * self.conv_param_size, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, self.conv_param_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, kw, kh, num_channels, n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_154": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_155": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, 1, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv_biases, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, 1, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv_biases, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, 1, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_biases, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_158": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(data, conv_kernels, conv_biases)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_160": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (preconv, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=10000)",
                            "Call"
                        ],
                        [
                            "tf.reshape(convolution, [-1, n_features, h1, w1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(convolution, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_177": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_features * self.dense_param_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "choice_regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x)))",
                            "Lambda"
                        ]
                    ]
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_features, self.dense_param_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_186": {
                "variable": {
                    "value": "preconv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.conv_param_size * n_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "preconv",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "choice_regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x)))",
                            "Lambda"
                        ]
                    ]
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "preconv",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "preconv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(data, self.conv_param_size * n_features, 1, name='preconv', kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(preconv, [-1, h, w, self.conv_param_size, n_features])",
                            "Call"
                        ],
                        [
                            "tf.transpose(preconv, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(preconv, [-1, h, w, self.conv_param_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, self.conv_param_size, n_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_190": {
                "variable": {
                    "value": "preconv",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "preconv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(data, self.conv_param_size * n_features, 1, name='preconv', kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(preconv, [-1, h, w, self.conv_param_size, n_features])",
                            "Call"
                        ],
                        [
                            "tf.transpose(preconv, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(preconv, [-1, h, w, self.conv_param_size])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "preconv",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "preconv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(data, self.conv_param_size * n_features, 1, name='preconv', kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(preconv, [-1, h, w, self.conv_param_size, n_features])",
                            "Call"
                        ],
                        [
                            "tf.transpose(preconv, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(preconv, [-1, h, w, self.conv_param_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, self.conv_param_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_195": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "kw * kh * self.conv_param_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_kernels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * kw * kh * num_channels, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * num_channels, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv_kernels, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, num_channels, n_features])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, kw * kh * self.conv_param_size, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_kernels, [-1, kw, kh, self.conv_param_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, kw, kh, self.conv_param_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_197": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv_biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, n_features, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features, activation=activation, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, 1, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv_biases, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, 1, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv_biases, 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, 1, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv_biases, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_200": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(preconv, conv_kernels, conv_biases)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (preconv, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=10000)",
                            "Call"
                        ],
                        [
                            "tf.reshape(convolution, [-1, n_features, h1, w1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(convolution, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_features, h1, w1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_204": {
                "variable": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "convolution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (data, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=1000)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(convolution, [1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.nn.convolution([x[0]], x[1], padding.upper(), [sw, sh]) + x[2], (preconv, conv_kernels, conv_biases), dtype=tf.float32, name='conv', parallel_iterations=10000)",
                            "Call"
                        ],
                        [
                            "tf.reshape(convolution, [-1, n_features, h1, w1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(convolution, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_26": {
                "variable": {
                    "value": "flattened",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dense_28": {
                "variable": {
                    "value": "dense_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "input_size * num_outputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "dense_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, input_size * num_outputs, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dense_weights, [-1, input_size, num_outputs])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_size, num_outputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_30": {
                "variable": {
                    "value": "dense_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "world_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BatchNormElement().run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(world_info, 0.33, training=training, name='world_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(world_info, [world_info[0], world_info[1]], summarize=4)",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(world_info)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.world_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.param_size, tf.sigmoid, kernel_regularizer=lambda x: tf.reduce_sum(tf.sqrt(tf.abs(x))))",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(world_info, n_features * self.dense_param_size, kernel_regularizer=choice_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(world_info, [-1, n_features, self.dense_param_size])",
                            "Call"
                        ],
                        [
                            "self.batch_norm.run(world_info, training, 'world_norm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_31": {
                "variable": {
                    "value": "input_data",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.flatten(data)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_16": {
                "inputs": {
                    "value": "tf.layers.flatten(inputs[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "world_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'weird_dense'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_175": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.abs(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_16": {
                "structure": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "input": {
                    "value": "tf.matmul(input_data, dense_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_175": {
                "x": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "a": {
                    "value": "input_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(flattened, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "dense_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(world_info, input_size * num_outputs, kernel_regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dense_weights, [-1, input_size, num_outputs])",
                            "Call"
                        ]
                    ]
                }
            },
            "convolution_63": {
                "input": {
                    "value": "[x[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "filters": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "padding.upper()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "[sw, sh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convolution_92": {
                "input": {
                    "value": "[x[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "filters": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "padding.upper()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "[sw, sh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.abs(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convolution_124": {
                "input": {
                    "value": "[x[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "filters": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "padding.upper()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "[sw, sh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.abs(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convolution_158": {
                "input": {
                    "value": "[x[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "filters": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "padding.upper()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "[sw, sh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_175": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "convolution_200": {
                "input": {
                    "value": "[x[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "filters": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "padding.upper()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "[sw, sh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_117": {
                "x": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_140": {
                "x": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_117": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "abs_140": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "common/elements/LinearProgrammingElement.py": {
        "tensorflow": {
            "Variable_11": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(input_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_46": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.flatten(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_54": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: self.step(x[0], x[1], training)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lp",
                    "type": "Constant",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(X)[0], self.num_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_11": {
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_50": {
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.flatten(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "common/elements/SelfEducatingElements.py": {
        "tensorflow": {
            "less_24": {
                "variable": {
                    "value": "dropins_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "randoms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(outputs))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.dropin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Print_25": {
                "variable": {
                    "value": "dropins_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "dropins_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(randoms, self.dropin)",
                            "Call"
                        ],
                        [
                            "tf.Print(dropins_mask, [tf.reduce_sum(tf.cast(dropins_mask, tf.float32))], message='Dropin cells:')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.reduce_sum(tf.cast(dropins_mask, tf.float32))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Dropin cells:",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.inputs, tf.ones((tf.shape(self.inputs)[0], 1), tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "variable": {
                    "value": "results_f",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(results, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "out_proj_coef",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out_for_proj / inputs_squared_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_41": {
                "variable": {
                    "value": "out_transposed",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs_correct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.outputs * results_f + self.outputs_deleted * results_wrong",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_42": {
                "variable": {
                    "value": "activated",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "out_transposed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(outputs_correct)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "activation_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "activated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(out_transposed, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_45": {
                "variable": {
                    "value": "inputs_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.inputs, tf.ones((tf.shape(self.inputs)[0], 1), tf.float32)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(input)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logical_not_46": {
                "variable": {
                    "value": "inputs_mask_neg",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(inputs, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_49": {
                "variable": {
                    "value": "inputs_activation",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.inputs, tf.ones((tf.shape(self.inputs)[0], 1), tf.float32)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "correlations",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_activation * tf.expand_dims(outputs_correct, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "correlations_wrong",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ortho",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.weights, tf.expand_dims(self.biases, axis=0)], axis=0) - proj",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "variable": {
                    "value": "updates_norms",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(updates), axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_61": {
                "variable": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "updates / updates_norms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Print_62": {
                "variable": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.assign(self.weights, updates / updates_norms)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.transpose(correlations)], message='First input correlations:', summarize=20)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.transpose(correlations_wrong)], message='First input correlations wrong:', summarize=20)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.reduce_sum(results_f)], 'Correct results:')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.transpose(correlations)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "First input correlations:",
                    "type": "Constant",
                    "possible_values": []
                },
                "summarize": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Print_63": {
                "variable": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.assign(self.weights, updates / updates_norms)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.transpose(correlations)], message='First input correlations:', summarize=20)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.transpose(correlations_wrong)], message='First input correlations wrong:', summarize=20)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.reduce_sum(results_f)], 'Correct results:')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.transpose(correlations_wrong)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "First input correlations wrong:",
                    "type": "Constant",
                    "possible_values": []
                },
                "summarize": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Print_64": {
                "variable": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.assign(self.weights, updates / updates_norms)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.transpose(correlations)], message='First input correlations:', summarize=20)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.transpose(correlations_wrong)], message='First input correlations wrong:', summarize=20)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.reduce_sum(results_f)], 'Correct results:')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.reduce_sum(results_f)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Correct results:",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_66": {
                "variable": {
                    "value": "update2",
                    "type": "Name",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "update_biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decay * self.biases + 0.5 * (1.0 - self.decay) * correlations[-1] + 0.5 * (1.0 - self.decay) * correlations_wrong[-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_67": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.assign(self.weights, updates / updates_norms)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.transpose(correlations)], message='First input correlations:', summarize=20)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.transpose(correlations_wrong)], message='First input correlations wrong:', summarize=20)",
                            "Call"
                        ],
                        [
                            "tf.Print(update, [tf.reduce_sum(results_f)], 'Correct results:')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_68": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "update2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.assign(self.biases, update_biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_76": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputs.shape[1], self.num_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_84": {
                "variable": {
                    "value": "masked",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs + self.threshold * tf.cast(dropins_mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inputs, self.weights) + self.biases",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Print_87": {
                "variable": {
                    "value": "masked",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(outputs, self.threshold)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked, [inputs], 'Input:', summarize=4)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked, [tf.reduce_sum(tf.cast(masked, tf.float32))], message='Activated cells:')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Input:",
                    "type": "Constant",
                    "possible_values": []
                },
                "summarize": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Print_88": {
                "variable": {
                    "value": "masked",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(outputs, self.threshold)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked, [inputs], 'Input:', summarize=4)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked, [tf.reduce_sum(tf.cast(masked, tf.float32))], message='Activated cells:')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.reduce_sum(tf.cast(masked, tf.float32))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Activated cells:",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_91": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self.add_dropin(result)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : result",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "maximum_95": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(result, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Print_96": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs * tf.cast(masked, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.cond(training, lambda : self.add_dropin(result), lambda : result)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(result, 1.0), 0.0)",
                            "Call"
                        ],
                        [
                            "tf.Print(result, [tf.transpose(self.weights), self.biases], message='First input cell weights:', summarize=16)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.transpose(self.weights), self.biases]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "First input cell weights:",
                    "type": "Constant",
                    "possible_values": []
                },
                "summarize": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_23": {
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs + self.threshold * tf.cast(dropins_mask, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inputs, self.weights) + self.biases",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_27": {
                "x": {
                    "value": "tf.logical_not(dropins_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_33": {
                "x": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "inputs_mask_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.logical_not(inputs_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_51": {
                "values": {
                    "value": "[self.weights, tf.expand_dims(self.biases, axis=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "input": {
                    "value": "outputs_correct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.outputs * results_f + self.outputs_deleted * results_wrong",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "tf.square(updates)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'se_dense'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_25": {
                "input_tensor": {
                    "value": "tf.cast(dropins_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_26": {
                "x": {
                    "value": "dropins_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(randoms, self.dropin)",
                            "Call"
                        ],
                        [
                            "tf.Print(dropins_mask, [tf.reduce_sum(tf.cast(dropins_mask, tf.float32))], message='Dropin cells:')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_27": {
                "x": {
                    "value": "dropins_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(randoms, self.dropin)",
                            "Call"
                        ],
                        [
                            "tf.Print(dropins_mask, [tf.reduce_sum(tf.cast(dropins_mask, tf.float32))], message='Dropin cells:')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_31": {
                "shape": {
                    "value": "(tf.shape(self.inputs)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "updates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decay * self.weights + 0.5 * (1.0 - self.decay) * correlations[:-1] + 0.5 * (1.0 - self.decay) * correlations_wrong[:-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_62": {
                "a": {
                    "value": "correlations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(vectors, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_63": {
                "a": {
                    "value": "correlations_wrong",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(ortho, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "results_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.cast(results, tf.float32), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_81": {
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.inputs, tf.ones((tf.shape(self.inputs)[0], 1), tf.float32)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(input)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_89": {
                "x": {
                    "value": "masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(outputs, self.threshold)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked, [inputs], 'Input:', summarize=4)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked, [tf.reduce_sum(tf.cast(masked, tf.float32))], message='Activated cells:')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_95": {
                "x": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs * tf.cast(masked, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.cond(training, lambda : self.add_dropin(result), lambda : result)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(result, 1.0), 0.0)",
                            "Call"
                        ],
                        [
                            "tf.Print(result, [tf.transpose(self.weights), self.biases], message='First input cell weights:', summarize=16)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_25": {
                "x": {
                    "value": "dropins_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(randoms, self.dropin)",
                            "Call"
                        ],
                        [
                            "tf.Print(dropins_mask, [tf.reduce_sum(tf.cast(dropins_mask, tf.float32))], message='Dropin cells:')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "tf.cast(masked, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_96": {
                "a": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(outputs, self.threshold)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked, [inputs], 'Input:', summarize=4)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked, [tf.reduce_sum(tf.cast(masked, tf.float32))], message='Activated cells:')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "common/tools/CapsTools.py": {
        "tensorflow": {
            "shape_11": {
                "variable": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "arr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "concat_17": {
                "variable": {
                    "value": "tmp_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[shape[:axis], [shape[axis] // ndim, ndim], shape[axis + 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "arr2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arr",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "tmp_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([shape[:axis], [shape[axis] // ndim, ndim], shape[axis + 1:]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_23": {
                "variable": {
                    "value": "result_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tmp_shape[:axis], [total, ndim]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "variable": {
                    "value": "norm_",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "squared_norm + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_32": {
                "variable": {
                    "value": "coef",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "norm_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(squared_norm + epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(squared_norm, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_47": {
                "variable": {
                    "value": "max_capsules",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "arr",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_57": {
                "variable": {
                    "value": "abs_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "tensor": {
                    "value": "tf.transpose(arr2, reorder)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "result_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tmp_shape[:axis], [total, ndim]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_33": {
                "x": {
                    "value": "arr",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "coef",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.divide(norm_, tf.add(squared_norm, 1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "tf.abs(arr)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "axis if axis != -1 else shape_size - 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_39": {
                "input_tensor": {
                    "value": "tf.square(arr)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "axis if axis != -1 else shape_size - 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keep_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_42": {
                "x": {
                    "value": "l2_squared_norm(arr, axis, keep_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "tf.one_hot(max_capsules, num_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_54": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - x.min()) * ((max - min) / (255 - x.min())) + min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_24": {
                "a": {
                    "value": "arr2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(arr, tmp_shape)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "reorder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(range(shape_size + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_32": {
                "x": {
                    "value": "squared_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "l2_squared_norm(arr, axis, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_36": {
                "x": {
                    "value": "arr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "square_39": {
                "x": {
                    "value": "arr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "one_hot_48": {
                "indices": {
                    "value": "max_capsules",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(arr, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "arr.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_58": {
                "x": {
                    "value": "1 + tf.exp(-2.0 * abs_logits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_58": {
                "x": {
                    "value": "-2.0 * abs_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/CapsTests.py": {
        "tensorflow": {
            "Variable_16": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_19": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(self.y, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([2], 3.0, 1.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_30": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "placeholder",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_64": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([2], 3.0, 1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_65": {
                "variable": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.addY(x)",
                            "Call"
                        ],
                        [
                            "tf.square(x)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([2], 3.0, 1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 2])",
                            "Call"
                        ],
                        [
                            "sess.run(norm(ext - tf.transpose(x, [1, 0]), axis=-2), feed_dict={x: [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]})",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_66": {
                "variable": {
                    "value": "grads2",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(z, x, grad_ys=y)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([2], 3.0, 1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_20": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([2], 3.0, 1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "variable": {
                    "value": "ext",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([2], 3.0, 1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_19": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_24": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_31": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.addY(x)",
                            "Call"
                        ],
                        [
                            "tf.square(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_76": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([2], 3.0, 1.0, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/TestCapsLayer.py": {
        "tensorflow": {
            "placeholder_12": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 8, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/TestLPElements.py": {
        "tensorflow": {
            "Variable_118": {
                "variable": {
                    "value": "self.num_ex",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reset_default_graph_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_122": {
                "variable": {
                    "value": "num_ex_update",
                    "type": "Name",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.num_ex",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.num_ex + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_124": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_123": {
                "control_inputs": {
                    "value": "[num_ex_update]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/TestReshape.py": {
        "tensorflow": {
            "placeholder_12": {
                "variable": {
                    "value": "input_arr",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "_arr.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/TestSquash.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "input_arr",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "_arr.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}