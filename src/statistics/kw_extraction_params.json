{
    "src/extractors/tfidf_model.py": {
        "sklearn": {
            "TfidfVectorizer_18": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 2)",
                    "possible_values": []
                },
                "min_df": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "src/extractors/lstm_model.py": {
        "tensorflow": {
            "identity_14": {
                "variable": {
                    "value": "self.encoder_input",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_input",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_input",
                    "possible_values": []
                }
            },
            "identity_15": {
                "variable": {
                    "value": "self.encoder_input_length",
                    "possible_values": []
                },
                "input": {
                    "value": "input_length",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_input_length",
                    "possible_values": []
                }
            },
            "identity_16": {
                "variable": {
                    "value": "self.expected_output",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_output",
                    "possible_values": []
                },
                "name": {
                    "value": "expected_output",
                    "possible_values": []
                }
            },
            "identity_17": {
                "variable": {
                    "value": "self.output_length",
                    "possible_values": []
                },
                "input": {
                    "value": "input_length",
                    "possible_values": []
                },
                "name": {
                    "value": "output_length",
                    "possible_values": []
                }
            },
            "placeholder_with_default_19": {
                "variable": {
                    "value": "self.keep_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "0.7",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "self.cross_entropy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.outputs, labels=self.expected_output)",
                    "possible_values": []
                }
            },
            "AdamOptimizer_23": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "round_24": {
                "variable": {
                    "value": "self.predicted",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.sigmoid(self.outputs)",
                    "possible_values": []
                }
            },
            "equal_25": {
                "variable": {
                    "value": "self.correct_pred",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted",
                    "possible_values": []
                },
                "y": {
                    "value": "self.expected_output",
                    "possible_values": []
                }
            },
            "reduce_mean_26": {
                "variable": {
                    "value": "self.accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_pred, tf.float32)",
                    "possible_values": []
                }
            },
            "Saver_27": {
                "variable": {
                    "value": "self.saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_28": {
                "variable": {
                    "value": "self.session",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto()",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "variable": {
                    "value": "transposed_input",
                    "possible_values": []
                },
                "a": {
                    "value": "self.encoder_input",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "possible_values": []
                }
            },
            "reverse_sequence_43": {
                "variable": {
                    "value": "reversed_inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "transposed_input",
                    "possible_values": [
                        [
                            "tf.transpose(self.encoder_input, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "self.encoder_input_length",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "0",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reverse_sequence_46": {
                "variable": {
                    "value": "bw_output",
                    "possible_values": []
                },
                "input": {
                    "value": "bw_output",
                    "possible_values": [
                        [
                            "tf.reverse_sequence(bw_output, self.encoder_input_length, seq_axis=0, batch_axis=1)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "self.encoder_input_length",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "0",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_47": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_output, bw_output]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "transpose_48": {
                "variable": {
                    "value": "transposed_outputs",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.concat([fw_output, bw_output], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "possible_values": []
                }
            },
            "dropout_49": {
                "variable": {
                    "value": "encoder_outputs",
                    "possible_values": []
                },
                "x": {
                    "value": "transposed_outputs",
                    "possible_values": [
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask(self.output_length, dtype=tf.float32)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "variable": {
                    "value": "self.init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "shape_18": {
                "input": {
                    "value": "self.encoder_input",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_22": {
                "logits": {
                    "value": "self.outputs",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.expected_output",
                    "possible_values": []
                }
            },
            "sigmoid_24": {
                "x": {
                    "value": "self.outputs",
                    "possible_values": []
                }
            },
            "cast_26": {
                "x": {
                    "value": "self.correct_pred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "fw",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "bw",
                    "possible_values": []
                }
            },
            "sequence_mask_52": {
                "lengths": {
                    "value": "self.output_length",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "ConfigProto_28": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/kw_extractors.py": {
        "tensorflow": {}
    }
}