{
    "finetune-ImageNet/autopanopticbody.py": {
        "torch": {
            "AutoPanopticBody_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.stage_repeats": {
                    "value": "stage_repeats",
                    "possible_values": [
                        [
                            "[4, 4, 8, 4]",
                            "List"
                        ],
                        [
                            "[8, 8, 16, 8]",
                            "List"
                        ],
                        [
                            "[8, 8, 16, 8]",
                            "List"
                        ]
                    ]
                },
                "Sequential_55": {
                    "variable": {
                        "value": "self.features",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.features",
                        "possible_values": []
                    }
                },
                "Dropout2d_58": {
                    "variable": {
                        "value": "self.drop_out",
                        "possible_values": []
                    },
                    "p": {
                        "value": "0.2",
                        "possible_values": []
                    }
                },
                "AvgPool2d_59": {
                    "variable": {
                        "value": "self.global_pool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "finetune-ImageNet/flops.py": {
        "torch": {
            "Shufflenet_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "self.base_mid_channel": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "self.ksize": {
                    "value": "ksize",
                    "possible_values": []
                },
                "self.pad": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "ksize // 2",
                            "BinOp"
                        ]
                    ]
                },
                "self.inp": {
                    "value": "inp",
                    "possible_values": []
                },
                "Sequential_36": {
                    "variable": {
                        "value": "self.branch_main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*branch_main",
                        "possible_values": []
                    }
                }
            },
            "Shuffle_Xception_61": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.base_mid_channel": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "self.inp": {
                    "value": "inp",
                    "possible_values": []
                },
                "Sequential_101": {
                    "variable": {
                        "value": "self.branch_main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*branch_main",
                        "possible_values": []
                    }
                }
            },
            "ShuffleNetV2_OneShot_134": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_147": {
                    "variable": {
                        "value": "self.first_conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(3, input_channel, 3, 2, 1, bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_187": {
                    "variable": {
                        "value": "self.features",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.features",
                        "possible_values": []
                    }
                },
                "Sequential_189": {
                    "variable": {
                        "value": "self.conv_last",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(input_channel, self.stage_out_channels[-1], 1, 1, 0, bias=False)",
                        "possible_values": []
                    }
                },
                "AvgPool2d_196": {
                    "variable": {
                        "value": "self.globalpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    }
                },
                "Dropout_197": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "0.1",
                        "possible_values": []
                    }
                },
                "Sequential_198": {
                    "variable": {
                        "value": "self.classifier",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(self.stage_out_channels[-1], n_class, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.branch_proj",
                    "possible_values": []
                },
                "*args": {
                    "value": "*branch_proj",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.branch_proj",
                    "possible_values": []
                },
                "*args": {
                    "value": "*branch_proj",
                    "possible_values": []
                }
            },
            "rand_278": {
                "*size": {
                    "value": "*input_shape",
                    "possible_values": []
                }
            },
            "unsqueeze_278": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "ksize // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "oup - inp",
                            "BinOp"
                        ],
                        [
                            "oup - inp",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "oup - inp",
                            "BinOp"
                        ],
                        [
                            "oup - inp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "(x_proj, self.branch_main(x))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "inp",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "num_features": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "int(base_mid_channels * channels_scales[archIndex])",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "oup - inp",
                            "BinOp"
                        ],
                        [
                            "oup - inp",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "oup - inp",
                            "BinOp"
                        ],
                        [
                            "oup - inp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "(x_proj, self.branch_main(x))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channel",
                    "possible_values": [
                        [
                            "self.stage_out_channels[1]",
                            "Subscript"
                        ],
                        [
                            "output_channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "num_features": {
                    "value": "input_channel",
                    "possible_values": [
                        [
                            "self.stage_out_channels[1]",
                            "Subscript"
                        ],
                        [
                            "output_channel",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "input_channel",
                    "possible_values": [
                        [
                            "self.stage_out_channels[1]",
                            "Subscript"
                        ],
                        [
                            "output_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.stage_out_channels[-1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "num_features": {
                    "value": "self.stage_out_channels[-1]",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "self.stage_out_channels[-1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "ksize // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "inp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "inp",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "inp",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "(self.branch_proj(x_proj), self.branch_main(x))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "inp",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "num_features": {
                    "value": "inp",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "(self.branch_proj(x_proj), self.branch_main(x))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "finetune-ImageNet/shuffle_blocks.py": {
        "torch": {
            "ConvBNReLU_121": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_126": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "k_size",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ],
                            [
                                "0",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "groups": {
                        "value": "groups",
                        "possible_values": [
                            [
                                "2",
                                "Constant"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.has_bn": {
                    "value": "has_bn",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.has_relu": {
                    "value": "has_relu",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "ReLU_137": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "FC_148": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_151": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "out_channels",
                        "possible_values": []
                    }
                }
            },
            "ShuffleNetV2BlockSearched_186": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "ReLU_203": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "self.channel_shuffle": {
                    "value": "channel_shuffle1",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "transpose_165": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0] * channels // 2, 2, height * width)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape(2, -1, channels // 2, height, width)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x_in",
                            "Name"
                        ],
                        [
                            "self.relu(self.conv(x))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "*layer",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "*args": {
                    "value": "*layer",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "(x_proj, x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "finetune-ImageNet/train.py": {
        "torch": {
            "DataLoader_126": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(args.train_dir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4), transforms.RandomHorizontalFlip(0.5), ToBGRTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "use_gpu",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(args.val_dir, transforms.Compose([OpencvResize(256), transforms.CenterCrop(224), ToBGRTensor()]))",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "200",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "use_gpu",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "SGD_151": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "get_parameters(model)",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "LambdaLR_165": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.SGD(get_parameters(model), lr=args.learning_rate, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "args.optimizer",
                            "Attribute"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda step: 1.0 - step / args.total_iters if step <= args.total_iters else 0",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "possible_values": [
                        [
                            "np.asarray(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, target_size, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img)",
                            "Call"
                        ],
                        [
                            "np.asarray(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(img, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_158": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "AutoPanopticBody(args.model_size)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_160": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "device_163": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_175": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "lastest_model",
                    "possible_values": []
                },
                "map_location": {
                    "value": "None if use_gpu else 'cpu'",
                    "possible_values": []
                }
            },
            "load_189": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.eval_resume",
                    "possible_values": []
                },
                "map_location": {
                    "value": "None if use_gpu else 'cpu'",
                    "possible_values": []
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "finetune-ImageNet/utils.py": {
        "torch": {
            "CrossEntropyLabelSmooth_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "self.epsilon": {
                    "value": "epsilon",
                    "possible_values": []
                },
                "LogSoftmax_13": {
                    "variable": {
                        "value": "self.logsoftmax",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "zeros_like_17": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_63": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "os.path.join('./supernet_models/{}checkpoint-{:06}.pth.tar'.format(tag, iters))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "latestfilename",
                    "possible_values": [
                        [
                            "os.path.join('./supernet_models/{}checkpoint-latest.pth.tar'.format(tag))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/build.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/abstract.py": {
        "torch": {
            "AbstractDataset_3": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/cityscapes.py": {
        "torch": {
            "from_numpy_94": {
                "variable": {
                    "value": "ann",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(Image.open(ann_path))",
                    "possible_values": []
                }
            },
            "empty_143": {
                "variable": {
                    "value": "filtered_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "empty_187": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sort_208": {
                "input": {
                    "value": "torch.unique(ann)",
                    "possible_values": []
                }
            },
            "min_199": {
                "input": {
                    "value": "a[:, 1]",
                    "possible_values": []
                }
            },
            "min_200": {
                "input": {
                    "value": "a[:, 0]",
                    "possible_values": []
                }
            },
            "max_201": {
                "input": {
                    "value": "a[:, 1]",
                    "possible_values": []
                }
            },
            "max_202": {
                "input": {
                    "value": "a[:, 0]",
                    "possible_values": []
                }
            },
            "unique_208": {
                "input": {
                    "value": "ann",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.asarray(Image.open(ann_path)))",
                            "Call"
                        ],
                        [
                            "json.load(ann_file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/coco.py": {
        "torch": {
            "as_tensor_63": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "classes",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/concat_dataset.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/evaluation/cityscapes/cityscapes_eval.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/evaluation/cityscapes/eval_instances.py": {
        "torch": {
            "sum_219": {
                "variable": {
                    "value": "intersection",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(gtMask_crop, predMask_crop)",
                    "possible_values": []
                }
            },
            "mul_219": {
                "input": {
                    "value": "gtMask_crop",
                    "possible_values": [
                        [
                            "gtMask[ymin:ymax, xmin:xmax]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "predMask_crop",
                    "possible_values": [
                        [
                            "predMask[ymin:ymax, xmin:xmax]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/evaluation/coco/abs_to_coco.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/evaluation/coco/coco_eval.py": {
        "torch": {
            "cat_284": {
                "variable": {
                    "value": "gt_overlaps",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_overlaps",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sort_285": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_290": {
                "variable": {
                    "value": "recalls",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_239": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "BoxList(gt_boxes, (image_width, image_height), mode='xywh').convert('xyxy')",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "as_tensor_243": {
                "variable": {
                    "value": "gt_areas",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "_gt_overlaps",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "possible_values": []
                }
            },
            "arange_289": {
                "variable": {
                    "value": "thresholds",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "results",
                    "possible_values": [
                        [
                            "COCOResults(*iou_types)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "'\\n'",
                            "Constant"
                        ],
                        [
                            "results + (', '.join(metric_vals) + '\\n')",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'coco_results.pth')",
                    "possible_values": []
                }
            },
            "save_38": {
                "obj": {
                    "value": "res",
                    "possible_values": [
                        [
                            "COCOResults('box_proposal')",
                            "Call"
                        ],
                        [
                            "evaluate_predictions_on_coco(dataset.coco, coco_results[iou_type], file_path, iou_type)",
                            "Call"
                        ],
                        [
                            "self.results[iou_type]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'box_proposals.pth')",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/voc.py": {
        "torch": {
            "PascalVOCDataset_17": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "data_dir",
                    "possible_values": []
                },
                "self.image_set": {
                    "value": "split",
                    "possible_values": []
                },
                "self.keep_difficult": {
                    "value": "use_difficult",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.transforms": {
                    "value": "transforms",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_120": {
                "data": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "gt_classes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "data": {
                    "value": "difficult_boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/samplers/distributed.py": {
        "torch": {
            "DistributedSampler_10": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "self.num_replicas": {
                    "value": "num_replicas",
                    "possible_values": [
                        [
                            "dist.get_world_size()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.rank": {
                    "value": "rank",
                    "possible_values": [
                        [
                            "dist.get_rank()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Generator_45": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_49": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "GroupedBatchSampler_9": {
                "base_class_0": {
                    "value": "torch.utils.data.BatchSampler",
                    "possible_values": []
                },
                "self.sampler": {
                    "value": "sampler",
                    "possible_values": []
                },
                "as_tensor_31": {
                    "variable": {
                        "value": "self.group_ids",
                        "possible_values": []
                    },
                    "data": {
                        "value": "group_ids",
                        "possible_values": []
                    }
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "self.drop_uneven": {
                    "value": "drop_uneven",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_43": {
                "variable": {
                    "value": "sampled_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "possible_values": []
                }
            },
            "full_51": {
                "variable": {
                    "value": "order",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "arange_52": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "possible_values": []
                }
            },
            "as_tensor_84": {
                "variable": {
                    "value": "first_index_of_batch",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "possible_values": []
                }
            },
            "unique_36": {
                "input": {
                    "value": "self.group_ids",
                    "possible_values": []
                }
            },
            "sort_36": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/samplers/iteration_based_batch_sampler.py": {
        "torch": {
            "IterationBasedBatchSampler_5": {
                "base_class_0": {
                    "value": "torch.utils.data.BatchSampler",
                    "possible_values": []
                },
                "self.batch_sampler": {
                    "value": "batch_sampler",
                    "possible_values": []
                },
                "self.num_iterations": {
                    "value": "num_iterations",
                    "possible_values": []
                },
                "self.start_iter": {
                    "value": "start_iter",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/data/transforms/transforms.py": {
        "torch": {
            "from_numpy_171": {
                "ndarray": {
                    "value": "np.array(seg_target)",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/engine/architecture_search.py": {
        "torch": {
            "stack_217": {
                "variable": {
                    "value": "new_model_enc",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m.encode() for m in new_model_list]",
                    "possible_values": []
                }
            },
            "broadcast_220": {
                "tensor": {
                    "value": "new_model_enc",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.stack([m.encode() for m in new_model_list]).cuda().detach()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/engine/bbox_aug.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist_t.bbox for boxlist_t in boxlist_ts]",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist_t.get_field('scores') for boxlist_t in boxlist_ts]",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/engine/inference.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_152": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "possible_values": [
                        [
                            "cfg.MODEL.DEVICE",
                            "Attribute"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_190": {
                "obj": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[predictions[i] for i in image_ids]",
                            "ListComp"
                        ],
                        [
                            "_accumulate_predictions_from_multiple_gpus(predictions, seg_result)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'predictions.pth')",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "synchronize_64": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/engine/trainer.py": {
        "torch": {
            "stack_36": {
                "variable": {
                    "value": "all_losses",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "data_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "data + [0]",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "data_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "data + [1]",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "broadcast_54": {
                "tensor": {
                    "value": "data_tensor",
                    "possible_values": [
                        [
                            "torch.tensor(data + [0], device='cuda')",
                            "Call"
                        ],
                        [
                            "torch.tensor(data + [1], device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_47": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_memory_allocated_218": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_memory_allocated_274": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/__init__.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/_utils.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/batch_norm.py": {
        "torch": {
            "FrozenBatchNorm2d_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "n",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "n",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "n",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "n",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/dcn/deform_conv.py": {
        "torch": {
            "DeformConvFunction_13": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "ModulatedDeformConvFunction_115": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "DeformConv_192": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_226": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                        "possible_values": []
                    }
                }
            },
            "ModulatedDeformConv_312": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_338": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                        "possible_values": []
                    }
                }
            },
            "zeros_like_158": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "zeros_like_159": {
                "variable": {
                    "value": "grad_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "grad_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_161": {
                "variable": {
                    "value": "grad_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "possible_values": []
                }
            },
            "zeros_like_162": {
                "variable": {
                    "value": "grad_bias",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_265": {
                "variable": {
                    "value": "self.conv_offset",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_383": {
                "variable": {
                    "value": "self.conv_offset",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "chunk_399": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "offset",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_401": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_342": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "grad_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "grad_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/dcn/deform_pool.py": {
        "torch": {
            "DeformRoIPoolingFunction_10": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "DeformRoIPooling_82": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.spatial_scale": {
                    "value": "spatial_scale",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.no_trans": {
                    "value": "no_trans",
                    "possible_values": []
                },
                "self.group_size": {
                    "value": "group_size",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sample_per_part": {
                    "value": "sample_per_part",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.trans_std": {
                    "value": "trans_std",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_66": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "grad_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "possible_values": [
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.offset_fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.offset_fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "*offset_fc_seq",
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.mask_fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_fc_seq",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "ic",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "ic",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_219": {
                "in_features": {
                    "value": "ic",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_222": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sigmoid_224": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/misc.py": {
        "torch": {
            "_NewEmptyTensorOp_18": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_45": {
                "base_class_0": {
                    "value": "torch.nn.ConvTranspose2d",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "base_class_0": {
                    "value": "torch.nn.BatchNorm2d",
                    "possible_values": []
                }
            },
            "interpolate_79": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/roi_align.py": {
        "torch": {
            "_ROIAlign_12": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "ROIAlign_50": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_size": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "ctx.output_size",
                            "Attribute"
                        ]
                    ]
                },
                "self.spatial_scale": {
                    "value": "spatial_scale",
                    "possible_values": [
                        [
                            "ctx.spatial_scale",
                            "Attribute"
                        ]
                    ]
                },
                "self.sampling_ratio": {
                    "value": "sampling_ratio",
                    "possible_values": [
                        [
                            "ctx.sampling_ratio",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/roi_pool.py": {
        "torch": {
            "_ROIPool_12": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "ROIPool_50": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_size": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "ctx.output_size",
                            "Attribute"
                        ]
                    ]
                },
                "self.spatial_scale": {
                    "value": "spatial_scale",
                    "possible_values": [
                        [
                            "ctx.spatial_scale",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/sigmoid_focal_loss.py": {
        "torch": {
            "_SigmoidFocalLoss_9": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "SigmoidFocalLoss_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.gamma": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "ctx.gamma",
                            "Attribute"
                        ]
                    ]
                },
                "self.alpha": {
                    "value": "alpha",
                    "possible_values": [
                        [
                            "ctx.alpha",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "class_range",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "possible_values": []
                },
                "end": {
                    "value": "num_classes + 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "targets.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ],
                        [
                            "logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "class_range",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_49": {
                "input": {
                    "value": "1 - p",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/layers/smooth_l1_loss.py": {
        "torch": {
            "abs_11": {
                "variable": {
                    "value": "n",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "possible_values": []
                }
            },
            "where_13": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/autopanoptic_inter_module.py": {
        "torch": {
            "AutoPanoptic_Inter_module_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.inchannel": {
                    "value": "inchannel",
                    "possible_values": []
                },
                "self.outchannel": {
                    "value": "outchannel",
                    "possible_values": []
                },
                "self.outlayer": {
                    "value": "outlayer",
                    "possible_values": []
                },
                "self.architecture": {
                    "value": "architecture",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "inter_block",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/autopanopticbody.py": {
        "torch": {
            "AutoPanopticBody_4": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.architecture": {
                    "value": "architecture",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_53": {
                    "variable": {
                        "value": "self.features",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.features",
                        "possible_values": []
                    }
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "_ops",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/backbone.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/fbnet.py": {
        "torch": {
            "FBNetTrunk_79": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "FBNetRPNHead_121": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "FBNetROIHead_174": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "last_info[1]": {
                    "value": "last_layer_scale",
                    "possible_values": []
                },
                "Sequential_197": {
                    "variable": {
                        "value": "self.head",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "OrderedDict([('blocks', blocks), ('last', last)])",
                        "possible_values": []
                    }
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "rpn_feature",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/fbnet_builder.py": {
        "torch": {
            "Identity_195": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "CascadeConv3x3_221": {
                "base_class_0": {
                    "value": "torch.nn.Sequential",
                    "possible_values": []
                }
            },
            "Shift_241": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.C": {
                    "value": "C",
                    "possible_values": []
                },
                "zeros_245": {
                    "variable": {
                        "value": "kernel",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "(C, 1, kernel_size, kernel_size)",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "torch.float32",
                        "possible_values": []
                    }
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "stage_info[1]",
                            "Subscript"
                        ]
                    ]
                },
                "self.padding": {
                    "value": "padding",
                    "possible_values": []
                },
                "self.kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "Parameter_267": {
                    "variable": {
                        "value": "self.kernel",
                        "possible_values": []
                    },
                    "data": {
                        "value": "kernel",
                        "possible_values": [
                            [
                                "torch.zeros((C, 1, kernel_size, kernel_size), dtype=torch.float32)",
                                "Call"
                            ],
                            [
                                "3",
                                "Constant"
                            ],
                            [
                                "stage_info[2]",
                                "Subscript"
                            ],
                            [
                                "3",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "requires_grad": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "ShiftBlock5x5_295": {
                "base_class_0": {
                    "value": "torch.nn.Sequential",
                    "possible_values": []
                }
            },
            "ChannelShuffle_322": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": []
                }
            },
            "ConvBNRelu_342": {
                "base_class_0": {
                    "value": "torch.nn.Sequential",
                    "possible_values": []
                }
            },
            "SEModule_397": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_406": {
                    "variable": {
                        "value": "self.op",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.AdaptiveAvgPool2d(1)",
                        "possible_values": []
                    }
                }
            },
            "Upsample_414": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.scale": {
                    "value": "scale_factor",
                    "possible_values": []
                },
                "self.mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "self.align_corners": {
                    "value": "align_corners",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "IRFBlock_445": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_depth": {
                    "value": "output_depth",
                    "possible_values": []
                },
                "self.shuffle_type": {
                    "value": "shuffle_type",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_751": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "*args": {
                    "value": "modules",
                    "possible_values": []
                }
            },
            "Sequential_490": {
                "variable": {
                    "value": "self.dw",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "conv2d_271": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "stage_cfg",
                            "Name"
                        ],
                        [
                            "stage_cfgs",
                            "Name"
                        ],
                        [
                            "arch_def['stages']",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.stride, self.stride)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, self.padding)",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.C",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "GroupNorm_387": {
                "variable": {
                    "value": "bn_op",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "gn_group",
                    "possible_values": [
                        [
                            "bn_type[1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "output_depth",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_407": {
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_407": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sigmoid_407": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_514": {
                "variable": {
                    "value": "self.dw",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('dw1', dw1), ('dw2', dw2)])",
                    "possible_values": []
                }
            },
            "Sequential_545": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_763": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_775": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_394": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/fpn.py": {
        "torch": {
            "FPN_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.top_blocks": {
                    "value": "top_blocks",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LastLevelMaxPool_76": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "LastLevelP6P7_81": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_87": {
                    "variable": {
                        "value": "self.p6",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_88": {
                    "variable": {
                        "value": "self.p7",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "interpolate_59": {
                "variable": {
                    "value": "inner_top_down",
                    "possible_values": []
                },
                "input": {
                    "value": "last_inner",
                    "possible_values": [
                        [
                            "getattr(self, self.inner_blocks[-1])(x[-1])",
                            "Call"
                        ],
                        [
                            "inner_lateral + inner_top_down",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "max_pool2d_78": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "p5 if self.use_P5 else c5",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "relu_97": {
                "input": {
                    "value": "p6",
                    "possible_values": [
                        [
                            "self.p6(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/resnet.py": {
        "torch": {
            "ResNet_81": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ResNetHead_155": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride_init",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "stage2_out_channels * stage2_relative_factor",
                            "BinOp"
                        ],
                        [
                            "res2_out_channels * stage2_relative_factor",
                            "BinOp"
                        ],
                        [
                            "cfg.MODEL.RESNETS.STEM_OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Bottleneck_239": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "BaseStem_347": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "*args": {
                    "value": "*blocks",
                    "possible_values": []
                }
            },
            "relu__329": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__333": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__342": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__364": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_365": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, kernel_size=1, stride=down_stride, bias=False)",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/search_space.py": {
        "torch": {
            "ShuffleNetV2BlockSearched_166": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "ReLU_183": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "ConvBNReLU_197": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_202": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "k_size",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ],
                            [
                                "0",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "groups": {
                        "value": "groups",
                        "possible_values": [
                            [
                                "2",
                                "Constant"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.has_bn": {
                    "value": "has_bn",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.has_relu": {
                    "value": "has_relu",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "ReLU_213": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0] * channels // 2, 2, height * width)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape(2, -1, channels // 2, height, width)",
                            "Call"
                        ],
                        [
                            "x_in",
                            "Name"
                        ],
                        [
                            "self.relu(self.conv(x))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "*layer",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "*layer",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_195": {
                "tensors": {
                    "value": "(x_proj, x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/balanced_positive_negative_sampler.py": {
        "torch": {
            "nonzero_38": {
                "variable": {
                    "value": "positive",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image >= 1",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "positive",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "negative",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image == 0",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "negative",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "pos_idx_per_image_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "neg_idx_per_image_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "randperm_49": {
                "n": {
                    "value": "positive.numel()",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "n": {
                    "value": "negative.numel()",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/box_coder.py": {
        "torch": {
            "stack_49": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_77": {
                "variable": {
                    "value": "dw",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "possible_values": []
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "dh",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "pred_boxes",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_codes",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "gt_widths / ex_widths",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "gt_heights / ex_heights",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "dw",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_83": {
                "input": {
                    "value": "dh",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/detector/generalized_rcnn.py": {
        "torch": {
            "GeneralizedRCNN_22": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.head_ss_keys": {
                    "value": "head_ss_keys",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "rpn_upsample_f",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rpn_upsample_f",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rpn_upsample_f, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_108": {
                "input": {
                    "value": "features[i]",
                    "possible_values": []
                },
                "size": {
                    "value": "features[0].size()[-2:]",
                    "possible_values": [
                        [
                            "self.backbone(images.tensors)",
                            "Call"
                        ],
                        [
                            "self.backbone(images.tensors, backbone_rngs)",
                            "Call"
                        ],
                        [
                            "self.fpn(features)",
                            "Call"
                        ],
                        [
                            "self.backbone(images.tensors)",
                            "Call"
                        ],
                        [
                            "list(features)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/make_layers.py": {
        "torch": {
            "GroupNorm_48": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                }
            },
            "GroupNorm_40": {
                "num_groups": {
                    "value": "get_group_gn(out_channels, dim_per_gp, num_groups)",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "out_channels // divisor",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "cfg.MODEL.GROUP_NORM.EPSILON",
                            "Attribute"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*module",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "fc",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "*args": {
                    "value": "*module",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/matcher.py": {
        "torch": {
            "nonzero_94": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/poolers.py": {
        "torch": {
            "Pooler_45": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_70": {
                    "variable": {
                        "value": "self.poolers",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "poolers",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "self.output_size": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "self.output_size[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_37": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input": {
                    "value": "cat([boxlist.area() for boxlist in boxlists])",
                    "possible_values": []
                }
            },
            "floor_40": {
                "variable": {
                    "value": "target_lvls",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lvl0 + torch.log2(s / self.s0 + self.eps)",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target_lvls",
                    "possible_values": []
                },
                "input": {
                    "value": "target_lvls",
                    "possible_values": [
                        [
                            "torch.floor(self.lvl0 + torch.log2(s / self.s0 + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.clamp(target_lvls, min=self.k_min, max=self.k_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.k_min",
                    "possible_values": []
                },
                "max": {
                    "value": "self.k_max",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, concat_boxes]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, num_channels, output_size, output_size)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "idx_in_level",
                    "possible_values": []
                },
                "input": {
                    "value": "levels == level",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "idx_in_level",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log2_74": {
                "input": {
                    "value": "torch.tensor(scales[0], dtype=torch.float32)",
                    "possible_values": []
                }
            },
            "log2_75": {
                "input": {
                    "value": "torch.tensor(scales[-1], dtype=torch.float32)",
                    "possible_values": []
                }
            },
            "log2_40": {
                "input": {
                    "value": "s / self.s0 + self.eps",
                    "possible_values": []
                }
            },
            "full_83": {
                "size": {
                    "value": "(len(b), 1)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "scales[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "scales[-1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/box_head.py": {
        "torch": {
            "ROIBoxHead_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/inference.py": {
        "torch": {
            "PostProcessor_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.score_thresh": {
                    "value": "score_thresh",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_HEADS.SCORE_THRESH",
                            "Attribute"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.nms": {
                    "value": "nms",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.detections_per_img": {
                    "value": "detections_per_img",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_HEADS.DETECTIONS_PER_IMG",
                            "Attribute"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.box_coder": {
                    "value": "box_coder",
                    "possible_values": [
                        [
                            "BoxCoder(weights=bbox_reg_weights)",
                            "Call"
                        ],
                        [
                            "BoxCoder(weights=(10.0, 10.0, 5.0, 5.0))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.cls_agnostic_bbox_reg": {
                    "value": "cls_agnostic_bbox_reg",
                    "possible_values": [
                        [
                            "cfg.MODEL.CLS_AGNOSTIC_BBOX_REG",
                            "Attribute"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.bbox_aug_enabled": {
                    "value": "bbox_aug_enabled",
                    "possible_values": [
                        [
                            "cfg.TEST.BBOX_AUG.ENABLED",
                            "Attribute"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "class_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "concat_boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in boxes]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "kthvalue_143": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.detections_per_img + 1",
                    "possible_values": []
                }
            },
            "nonzero_147": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_147": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "full_133": {
                "size": {
                    "value": "(num_labels,)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "possible_values": [
                        [
                            "range(1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/loss.py": {
        "torch": {
            "cross_entropy_146": {
                "variable": {
                    "value": "classification_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_151": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "nonzero_111": {
                "variable": {
                    "value": "img_sampled_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img | neg_inds_img",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "img_sampled_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "map_inds",
                    "possible_values": []
                },
                "data": {
                    "value": "[4, 5, 6, 7]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_156": {
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_feature_extractors.py": {
        "torch": {
            "ResNet50Conv5ROIFeatureExtractor_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.pooler": {
                    "value": "pooler",
                    "possible_values": [
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ],
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ],
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ]
                    ]
                },
                "self.head": {
                    "value": "head",
                    "possible_values": [
                        [
                            "resnet.ResNetHead(block_module=config.MODEL.RESNETS.TRANS_FUNC, stages=(stage,), num_groups=config.MODEL.RESNETS.NUM_GROUPS, width_per_group=config.MODEL.RESNETS.WIDTH_PER_GROUP, stride_in_1x1=config.MODEL.RESNETS.STRIDE_IN_1X1, stride_init=None, res2_out_channels=config.MODEL.RESNETS.RES2_OUT_CHANNELS, dilation=config.MODEL.RESNETS.RES5_DILATION)",
                            "Call"
                        ]
                    ]
                }
            },
            "FPN2MLPFeatureExtractor_50": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.pooler": {
                    "value": "pooler",
                    "possible_values": [
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ],
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ],
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ]
                    ]
                },
                "self.out_channels": {
                    "value": "representation_size",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "FPNXconv1fcFeatureExtractor_85": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.pooler": {
                    "value": "pooler",
                    "possible_values": [
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ],
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ],
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ]
                    ]
                },
                "self.out_channels": {
                    "value": "representation_size",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*xconvs",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_predictors.py": {
        "torch": {
            "FastRCNNPredictor_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "num_inputs": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "AdaptiveAvgPool2d_15": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_16": {
                    "variable": {
                        "value": "self.cls_score",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "num_inputs",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                                "Attribute"
                            ],
                            [
                                "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                                "Attribute"
                            ]
                        ]
                    }
                },
                "Linear_18": {
                    "variable": {
                        "value": "self.bbox_pred",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "num_inputs",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "num_bbox_reg_classes * 4",
                        "possible_values": []
                    }
                }
            },
            "FPNPredictor_35": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "representation_size": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "Linear_41": {
                    "variable": {
                        "value": "self.cls_score",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "representation_size",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                                "Attribute"
                            ],
                            [
                                "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                                "Attribute"
                            ]
                        ]
                    }
                },
                "Linear_43": {
                    "variable": {
                        "value": "self.bbox_pred",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "representation_size",
                        "possible_values": [
                            [
                                "in_channels",
                                "Name"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "num_bbox_reg_classes * 4",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/inference.py": {
        "torch": {
            "KeypointPostProcessor_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.keypointer": {
                    "value": "keypointer",
                    "possible_values": [
                        [
                            "Keypointer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_119": {
                "ndarray": {
                    "value": "result",
                    "possible_values": []
                }
            },
            "as_tensor_119": {
                "data": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "scores.split(boxes_per_image, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "masks.device",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/keypoint_head.py": {
        "torch": {
            "ROIKeypointHead_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/loss.py": {
        "torch": {
            "nonzero_158": {
                "variable": {
                    "value": "valid",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(valid, dim=0).to(dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(valid).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_158": {
                "variable": {
                    "value": "valid",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cross_entropy_168": {
                "variable": {
                    "value": "keypoint_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoint_logits[valid]",
                    "possible_values": []
                },
                "target": {
                    "value": "keypoint_targets[valid]",
                    "possible_values": []
                }
            },
            "nonzero_138": {
                "variable": {
                    "value": "img_sampled_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "img_sampled_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/roi_keypoint_feature_extractors.py": {
        "torch": {
            "KeypointRCNNFeatureExtractor_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.pooler": {
                    "value": "pooler",
                    "possible_values": [
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ]
                    ]
                },
                "input_features": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "next_feature": {
                    "value": "input_features",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "self.out_channels": {
                    "value": "layer_features",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/roi_keypoint_predictors.py": {
        "torch": {
            "KeypointRCNNPredictor_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "input_features": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "num_keypoints",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_KEYPOINT_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/inference.py": {
        "torch": {
            "MaskPostProcessor_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.masker": {
                    "value": "masker",
                    "possible_values": [
                        [
                            "Masker(threshold=mask_threshold, padding=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "boxes_exp",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "boxes.convert('xyxy')",
                            "Call"
                        ],
                        [
                            "[boxes]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "im_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(im_h, im_w)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "index",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "possible_values": []
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "res",
                    "possible_values": [
                        [
                            "[paste_mask_in_image(mask[0], box, im_h, im_w, self.threshold, self.padding) for (mask, box) in zip(masks, boxes.bbox)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(res, dim=0)[:, None]",
                            "Subscript"
                        ],
                        [
                            "masks.new_empty((0, 1, masks.shape[-2], masks.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/loss.py": {
        "torch": {
            "stack_42": {
                "tensors": {
                    "value": "masks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "positive_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "positive_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_125": {
                "variable": {
                    "value": "mask_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits[positive_inds, labels_pos]",
                    "possible_values": []
                },
                "target": {
                    "value": "mask_targets",
                    "possible_values": [
                        [
                            "cat(mask_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "empty_41": {
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "proposals.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_86": {
                "variable": {
                    "value": "positive_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "positive_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/mask_head.py": {
        "torch": {
            "ROIMaskHead_36": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "positive_inds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_feature_extractors.py": {
        "torch": {
            "AutoPanoptic_MaskRCNNFPNFeatureExtractor_19": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "input_size": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.pooler": {
                    "value": "pooler",
                    "possible_values": [
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ],
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ]
                    ]
                },
                "next_feature": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "self.out_channels": {
                    "value": "layer_features",
                    "possible_values": []
                }
            },
            "MaskRCNNFPNFeatureExtractor_77": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "input_size": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.pooler": {
                    "value": "pooler",
                    "possible_values": [
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ],
                        [
                            "Pooler(output_size=(resolution, resolution), scales=scales, sampling_ratio=sampling_ratio)",
                            "Call"
                        ]
                    ]
                },
                "next_feature": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "self.out_channels": {
                    "value": "layer_features",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "block(x) if rngs is None else block[rngs[i]](x)",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "_ops",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_predictors.py": {
        "torch": {
            "MaskRCNNC4Predictor_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "num_inputs": {
                    "value": "in_channels",
                    "possible_values": []
                }
            },
            "MaskRCNNConv1x1Predictor_35": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "num_inputs": {
                    "value": "in_channels",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_mask(x)",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/roi_heads.py": {
        "torch": {
            "CombinedROIHeads_9": {
                "base_class_0": {
                    "value": "torch.nn.ModuleDict",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/anchor_generator.py": {
        "torch": {
            "BufferList_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "AnchorGenerator_34": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.strides": {
                    "value": "anchor_strides",
                    "possible_values": [
                        [
                            "config.MODEL.RETINANET.ANCHOR_STRIDES",
                            "Attribute"
                        ],
                        [
                            "(8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.straddle_thresh": {
                    "value": "straddle_thresh",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.STRADDLE_THRESH",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RETINANET.STRADDLE_THRESH",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_243": {
                "ndarray": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "_ratio_enum(anchor, aspect_ratios)",
                            "Call"
                        ],
                        [
                            "np.vstack([_scale_enum(anchors[i, :], scales) for i in range(anchors.shape[0])])",
                            "Call"
                        ],
                        [
                            "np.hstack((x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)))",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "boxlist.bbox",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "arange_80": {
                "variable": {
                    "value": "shifts_x",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_83": {
                "variable": {
                    "value": "shifts_y",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_86": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "shifts",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_109": {
                "variable": {
                    "value": "inds_inside",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/inference.py": {
        "torch": {
            "RPNPostProcessor_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.pre_nms_top_n": {
                    "value": "pre_nms_top_n",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.PRE_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.PRE_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.pre_nms_top_n, num_anchors)",
                            "Call"
                        ]
                    ]
                },
                "self.post_nms_top_n": {
                    "value": "post_nms_top_n",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "self.nms_thresh": {
                    "value": "nms_thresh",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.NMS_THRESH",
                            "Attribute"
                        ]
                    ]
                },
                "self.min_size": {
                    "value": "min_size",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.MIN_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "self.box_coder": {
                    "value": "box_coder",
                    "possible_values": [
                        [
                            "BoxCoder(weights=(1.0, 1.0, 1.0, 1.0))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fpn_post_nms_top_n": {
                    "value": "fpn_post_nms_top_n",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.FPN_POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "post_nms_top_n",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fpn_post_nms_per_batch": {
                    "value": "fpn_post_nms_per_batch",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.FPN_POST_NMS_PER_BATCH",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_101": {
                "variable": {
                    "value": "concat_anchors",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in anchors]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "objectness",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist.get_field('objectness') for boxlist in boxlists]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "topk_167": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_like_168": {
                "variable": {
                    "value": "inds_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                }
            },
            "arange_97": {
                "start": {
                    "value": "N",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "topk_177": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "len(gt_box)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/loss.py": {
        "torch": {
            "nonzero_107": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_pos_inds, dim=0)",
                    "possible_values": []
                }
            },
            "squeeze_107": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "nonzero_108": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_neg_inds, dim=0)",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "sampled_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "regression_targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_127": {
                "variable": {
                    "value": "objectness_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness[sampled_inds]",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[sampled_inds]",
                    "possible_values": []
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "sampled_pos_inds",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "sampled_neg_inds",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/retinanet/inference.py": {
        "torch": {
            "kthvalue_165": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.fpn_post_nms_top_n + 1",
                    "possible_values": []
                }
            },
            "nonzero_170": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_170": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "full_153": {
                "size": {
                    "value": "(num_labels,)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "possible_values": [
                        [
                            "range(1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/retinanet/loss.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "labels.int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "regression_targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "possible_values": [
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "nonzero_64": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/retinanet/retinanet.py": {
        "torch": {
            "RetinaNetHead_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_56": {
                    "variable": {
                        "value": "self.cls_logits",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_anchors * num_classes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_60": {
                    "variable": {
                        "value": "self.bbox_pred",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_anchors * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "RetinaNetModule_88": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.anchor_generator": {
                    "value": "anchor_generator",
                    "possible_values": [
                        [
                            "make_anchor_generator_retinanet(cfg)",
                            "Call"
                        ]
                    ]
                },
                "self.head": {
                    "value": "head",
                    "possible_values": [
                        [
                            "RetinaNetHead(cfg, in_channels)",
                            "Call"
                        ]
                    ]
                },
                "self.box_selector_test": {
                    "value": "box_selector_test",
                    "possible_values": [
                        [
                            "make_retinanet_postprocessor(cfg, box_coder, is_train=False)",
                            "Call"
                        ]
                    ]
                },
                "self.loss_evaluator": {
                    "value": "loss_evaluator",
                    "possible_values": [
                        [
                            "make_retinanet_loss_evaluator(cfg, box_coder)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "*cls_tower",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "*bbox_tower",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/rpn.py": {
        "torch": {
            "RPNHeadConvRegressor_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_27": {
                    "variable": {
                        "value": "self.cls_logits",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_anchors",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_28": {
                    "variable": {
                        "value": "self.bbox_pred",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_anchors * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "RPNHeadFeatureSingleConv_44": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_56": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "self.out_channels": {
                    "value": "in_channels",
                    "possible_values": []
                }
            },
            "RPNHead_74": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_87": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_90": {
                    "variable": {
                        "value": "self.cls_logits",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_anchors",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_91": {
                    "variable": {
                        "value": "self.bbox_pred",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_anchors * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "RPNModule_109": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.anchor_generator": {
                    "value": "anchor_generator",
                    "possible_values": [
                        [
                            "make_anchor_generator(cfg)",
                            "Call"
                        ]
                    ]
                },
                "self.head": {
                    "value": "head",
                    "possible_values": [
                        [
                            "rpn_head(cfg, in_channels, anchor_generator.num_anchors_per_location()[0])",
                            "Call"
                        ]
                    ]
                },
                "self.box_selector_train": {
                    "value": "box_selector_train",
                    "possible_values": [
                        [
                            "make_rpn_postprocessor(cfg, rpn_box_coder, is_train=True)",
                            "Call"
                        ]
                    ]
                },
                "self.box_selector_test": {
                    "value": "box_selector_test",
                    "possible_values": [
                        [
                            "make_rpn_postprocessor(cfg, rpn_box_coder, is_train=False)",
                            "Call"
                        ]
                    ]
                },
                "self.loss_evaluator": {
                    "value": "loss_evaluator",
                    "possible_values": [
                        [
                            "make_rpn_loss_evaluator(cfg, rpn_box_coder)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_103": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(feature)",
                    "possible_values": []
                }
            },
            "relu_68": {
                "input": {
                    "value": "self.conv(z)",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/utils.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/search_space.py": {
        "torch": {
            "dwconv_30": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "atconv_52": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "dfconv_70": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "int(layer_name.split('x')[1][0])",
                            "Call"
                        ]
                    ]
                },
                "self.in_channels": {
                    "value": "inchannel",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "outchannel",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dialtion": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SELayer_114": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "AdaptiveAvgPool2d_117": {
                    "variable": {
                        "value": "self.avg_pool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "self.inchannel": {
                    "value": "inchannel",
                    "possible_values": []
                },
                "self.outchannel": {
                    "value": "outchannel",
                    "possible_values": []
                },
                "Sequential_121": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(inchannel, fc_dim)",
                        "possible_values": []
                    }
                }
            },
            "Sequential_111": {
                "*args": {
                    "value": "*layer",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "inchannel",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "outchannel // reduction",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "outchannel // reduction",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "outchannel",
                    "possible_values": []
                }
            },
            "Sigmoid_125": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "y.size()",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/seg_branch/seg_branch.py": {
        "torch": {
            "AutoPanoptic_Segmentation_Branch_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_80": {
                    "variable": {
                        "value": "self.score",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "cfg.MODEL.SEG_BRANCH.CLS_NUM",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "FCNSubNet_252": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_layers": {
                    "value": "num_layers",
                    "possible_values": []
                },
                "ModuleList_268": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "UPS_Segmentation_Branch_300": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_307": {
                    "variable": {
                        "value": "self.score",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "cfg.MODEL.SEG_BRANCH.CLS_NUM",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "Panoptic_FPN_Segmentation_Branch_410": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_417": {
                    "variable": {
                        "value": "self.upsample_level1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2d(cfg.MODEL.RESNETS.BACKBONE_OUT_CHANNELS, cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL, 3, 1, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_423": {
                    "variable": {
                        "value": "self.upsample_level2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2d(cfg.MODEL.RESNETS.BACKBONE_OUT_CHANNELS, cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL, 3, 1, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_430": {
                    "variable": {
                        "value": "self.upsample_level3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2d(cfg.MODEL.RESNETS.BACKBONE_OUT_CHANNELS, cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL, 3, 1, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_441": {
                    "variable": {
                        "value": "self.upsample_level4",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Conv2d(cfg.MODEL.RESNETS.BACKBONE_OUT_CHANNELS, cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL, 3, 1, 1)",
                        "possible_values": []
                    }
                },
                "Upsample_461": {
                    "variable": {
                        "value": "self.to_segment_upsample",
                        "possible_values": []
                    },
                    "scale_factor": {
                        "value": "4",
                        "possible_values": []
                    },
                    "mode": {
                        "value": "bilinear",
                        "possible_values": []
                    },
                    "align_corners": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "interpolate_333": {
                "variable": {
                    "value": "fpn_p3",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_p3",
                    "possible_values": [
                        [
                            "self.subnets[1](fpn_p3)",
                            "Call"
                        ],
                        [
                            "self.subnets[0](fpn_p3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p3, None, 2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.fcn_subnet(fpn_p3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p3, None, 2, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_334": {
                "variable": {
                    "value": "fpn_p4",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_p4",
                    "possible_values": [
                        [
                            "self.subnets[2](fpn_p4)",
                            "Call"
                        ],
                        [
                            "self.subnets[0](fpn_p4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p4, None, 4, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.fcn_subnet(fpn_p4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p4, None, 4, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_335": {
                "variable": {
                    "value": "fpn_p5",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_p5",
                    "possible_values": [
                        [
                            "self.subnets[3](fpn_p5)",
                            "Call"
                        ],
                        [
                            "self.subnets[0](fpn_p5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p5, None, 8, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.fcn_subnet(fpn_p5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p5, None, 8, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "8",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "feat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fpn_p2, fpn_p3, fpn_p4, fpn_p5]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_142": {
                "variable": {
                    "value": "fpn_p3",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_p3",
                    "possible_values": [
                        [
                            "self.subnets[1](fpn_p3)",
                            "Call"
                        ],
                        [
                            "self.subnets[0](fpn_p3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p3, None, 2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.fcn_subnet(fpn_p3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p3, None, 2, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_143": {
                "variable": {
                    "value": "fpn_p4",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_p4",
                    "possible_values": [
                        [
                            "self.subnets[2](fpn_p4)",
                            "Call"
                        ],
                        [
                            "self.subnets[0](fpn_p4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p4, None, 4, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.fcn_subnet(fpn_p4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p4, None, 4, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "variable": {
                    "value": "fpn_p5",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_p5",
                    "possible_values": [
                        [
                            "self.subnets[3](fpn_p5)",
                            "Call"
                        ],
                        [
                            "self.subnets[0](fpn_p5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p5, None, 8, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.fcn_subnet(fpn_p5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(fpn_p5, None, 8, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "8",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_341": {
                "variable": {
                    "value": "segments",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "possible_values": [
                        [
                            "self.score(feat)",
                            "Call"
                        ],
                        [
                            "self.score(feat)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.upsample_rate",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_398": {
                "variable": {
                    "value": "Cross_entropy_loss",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "possible_values": []
                }
            },
            "add_486": {
                "input": {
                    "value": "features_level3_upsampled",
                    "possible_values": [
                        [
                            "self.upsample_level3(features[2])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "features_level4_upsampled",
                    "possible_values": [
                        [
                            "self.upsample_level4(features[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_548": {
                "variable": {
                    "value": "Cross_entropy_loss",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "action_per_depth",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Tensor_355": {
                "variable": {
                    "value": "features_one_channel",
                    "possible_values": []
                }
            },
            "sum_391": {
                "input": {
                    "value": "t.detach().eq(255)",
                    "possible_values": []
                }
            },
            "GroupNorm_419": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL",
                    "possible_values": []
                }
            },
            "ReLU_420": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "GroupNorm_425": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL",
                    "possible_values": []
                }
            },
            "ReLU_426": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_427": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "GroupNorm_432": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL",
                    "possible_values": []
                }
            },
            "ReLU_433": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_434": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "GroupNorm_436": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL",
                    "possible_values": []
                }
            },
            "ReLU_437": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_438": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "GroupNorm_443": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL",
                    "possible_values": []
                }
            },
            "ReLU_444": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_445": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "GroupNorm_447": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL",
                    "possible_values": []
                }
            },
            "ReLU_448": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_449": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "GroupNorm_451": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "cfg.MODEL.SEG_BRANCH.DECODER_CHANNEL",
                    "possible_values": []
                }
            },
            "ReLU_452": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_453": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "merge_features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features_level1_upsampled, features_level2_upsampled, features_level3_upsampled, features_level4_upsampled]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Tensor_505": {
                "variable": {
                    "value": "features_one_channel",
                    "possible_values": []
                }
            },
            "sum_541": {
                "input": {
                    "value": "t.detach().eq(255)",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "feat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat",
                    "possible_values": [
                        [
                            "seg_arguments['feat']",
                            "Subscript"
                        ],
                        [
                            "torch.cat(feat, dim=1)",
                            "Call"
                        ],
                        [
                            "[fpn_p2, fpn_p3, fpn_p4, fpn_p5]",
                            "List"
                        ],
                        [
                            "torch.cat([fpn_p2, fpn_p3, fpn_p4, fpn_p5], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_184": {
                "variable": {
                    "value": "segments",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "possible_values": [
                        [
                            "self.score(feat)",
                            "Call"
                        ],
                        [
                            "self.score(feat)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "None",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.upsample_rate",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_242": {
                "variable": {
                    "value": "Cross_entropy_loss",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "possible_values": []
                }
            },
            "ReLU_278": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "*args": {
                    "value": "*conv",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*subnet_per_layer",
                    "possible_values": []
                }
            },
            "Tensor_198": {
                "variable": {
                    "value": "features_one_channel",
                    "possible_values": []
                }
            },
            "sum_235": {
                "input": {
                    "value": "t.detach().eq(255)",
                    "possible_values": []
                }
            },
            "GroupNorm_264": {
                "num_groups": {
                    "value": "32",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "in_channel",
                    "possible_values": []
                }
            },
            "max_353": {
                "input": {
                    "value": "features_of_origin_size[i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_503": {
                "input": {
                    "value": "features_of_origin_size[i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_196": {
                "input": {
                    "value": "features_of_origin_size[i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/modeling/utils.py": {
        "torch": {
            "cat_16": {
                "tensors": {
                    "value": "tensors",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/pytorch_distributed_syncbn/lib/cpu/setup.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/pytorch_distributed_syncbn/lib/gpu/setup.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/pytorch_distributed_syncbn/syncbn.py": {
        "torch": {
            "DistributedSyncBNFucntion_16": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "batch_norm_118": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / float(self.num_batches_tracked)",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/pytorch_distributed_syncbn/test.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.rand(2, 3, 2, 2)",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_56": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "DistributedSyncBN(3).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "set_device_46": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/solver/build.py": {
        "torch": {
            "SGD_57": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "cfg.SOLVER.BASE_LR",
                            "Attribute"
                        ],
                        [
                            "cfg.SOLVER.BASE_LR * cfg.SOLVER.BIAS_LR_FACTOR",
                            "BinOp"
                        ],
                        [
                            "lr / lcm",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/solver/lr_scheduler.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/structures/bounding_box.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox",
                    "possible_values": [
                        [
                            "BoxList([[0, 0, 10, 10], [0, 0, 5, 5]], (10, 10))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(bbox, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(transposed_boxes, self.size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(cropped_box, (w, h), mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox.to(device), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox[item], self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox, self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox.device if isinstance(bbox, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "scaled_box",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scaled_xmin, scaled_ymin, scaled_xmax, scaled_ymax)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "transposed_boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transposed_xmin, transposed_ymin, transposed_xmax, transposed_ymax)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "cropped_box",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cropped_xmin, cropped_ymin, cropped_xmax, cropped_ymax)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/structures/boxlist_ops.py": {
        "torch": {
            "max_80": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, :2]",
                    "possible_values": []
                }
            },
            "min_81": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, 2:]",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "tensors",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/structures/image_list.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/structures/keypoint.py": {
        "torch": {
            "as_tensor_13": {
                "variable": {
                    "value": "keypoints",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "possible_values": [
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "type(self)(resized_data, size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(flipped_data, self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints.to(*args, **kwargs), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints[item], self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "keypoints.device if isinstance(keypoints, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "data": {
                    "value": "flip_indices",
                    "possible_values": [
                        [
                            "[names.index(i) for i in flipped_names]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_12": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/structures/segmentation_mask.py": {
        "torch": {
            "from_numpy_334": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "masks",
                            "Name"
                        ],
                        [
                            "cv2.UMat(mask)",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(rle)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_439": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.convert_to_binarymask() for p in self.polygons]",
                    "possible_values": []
                }
            },
            "empty_444": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, size[1], size[0]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "as_tensor_225": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "data": {
                    "value": "p",
                    "possible_values": [
                        [
                            "polygons",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(p, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "polygons",
                            "Name"
                        ],
                        [
                            "PolygonInstance(p, size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "empty_59": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, size[1], size[0]]",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]])",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "torch.stack(masks, dim=0).clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.frPyObjects(masks, size[1], size[0])",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "interpolate(input=masks[None].float(), size=(height, width), mode='bilinear', align_corners=False)[0].type_as(masks)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clone_61": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]])",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "torch.stack(masks, dim=0).clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.frPyObjects(masks, size[1], size[0])",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "interpolate(input=masks[None].float(), size=(height, width), mode='bilinear', align_corners=False)[0].type_as(masks)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_69": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/utils/c2_model_loading.py": {
        "torch": {
            "from_numpy_124": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "possible_values": [
                        [
                            "weights[k]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_207": {
                "f": {
                    "value": "f",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/utils/checkpoint.py": {
        "torch": {
            "save_49": {
                "obj": {
                    "value": "data",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_95": {
                "f": {
                    "value": "f",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "catalog_f",
                            "Name"
                        ],
                        [
                            "cached_f",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "possible_values": []
                }
            },
            "device_95": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/utils/collect_env.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/utils/comm.py": {
        "torch": {
            "cat_80": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/utils/imports.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/utils/metric_logger.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/utils/model_serialization.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "match_matrix",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "possible_values": [
                        [
                            "[len(j) if i.endswith(j) else 0 for i in current_keys for j in loaded_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(current_keys), len(loaded_keys))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/maskrcnn_benchmark/utils/model_zoo.py": {
        "torch": {}
    },
    "maskrcnn-benchmark/setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/checkpoint.py": {
        "torch": {
            "Module_19": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Module_20": {
                "variable": {
                    "value": "m.block1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "m.block1.layer1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "m.layer2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Module_23": {
                "variable": {
                    "value": "m.res",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "m.res.layer2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "state_dict[layer1.weight]",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "state_dict[layer1.bias]",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "state_dict[layer2.weight]",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "state_dict[layer2.bias]",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "state_dict[res.layer2.weight]",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "state_dict[res.layer2.bias]",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Linear(2, 3)",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "3",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_40": {
                "module": {
                    "value": "self.create_model()",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "module": {
                    "value": "self.create_model()",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "module": {
                    "value": "self.create_model()",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "module": {
                    "value": "self.create_model()",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "module": {
                    "value": "self.create_model()",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "module": {
                    "value": "self.create_model()",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "module": {
                    "value": "self.create_model()",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "module": {
                    "value": "self.create_model()",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_backbones.py": {
        "torch": {
            "rand_45": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_box_coder.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([175.62031555, 20.91103172, 253.352005, 155.0145874, 169.24636841, 4.85241556, 228.8605957, 105.02092743, 181.77426147, 199.82876587, 192.88427734, 214.0255127, 174.36262512, 186.75761414, 296.19091797, 231.27906799, 22.73153877, 92.02596283, 135.5695343, 208.80291748]).astype(np.float32).reshape(-1, 4)",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "deltas",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.47861834, 0.13992102, 0.14961673, 0.71495209, 0.29915856, -0.35664671, 0.89018666, 0.70815367, -0.03852064, 0.44466892, 0.49492538, 0.71409376, 0.28052918, 0.02184832, 0.65289006, 1.05060139, -0.38172557, -0.08533806, -0.60335309, 0.79052375]).astype(np.float32).reshape(-1, 4)",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_data_samplers.py": {
        "torch": {
            "SubsetSampler_15": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.indices": {
                    "value": "indices",
                    "possible_values": []
                }
            },
            "SequentialSampler_31": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_44": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_64": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "RandomSampler_116": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_136": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "BatchSampler_137": {
                "variable": {
                    "value": "batch_sampler",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SubsetSampler([0, 3, 5, 6, 7, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "[1, 3, 5, 6]",
                            "List"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "[2, 3, 4]",
                            "List"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "possible_values": [
                        [
                            "[False, True]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_detectors.py": {
        "torch": {
            "is_available_49": {
                "variable": {
                    "value": "TEST_CUDA",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_80": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "x",
                    "possible_values": [
                        [
                            "cfg.INPUT.MIN_SIZE_TRAIN",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(x * 1.2)",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_fbnet.py": {
        "torch": {
            "is_available_10": {
                "variable": {
                    "value": "TEST_CUDA",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, 7, 7]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 20, 7, 7]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 20, 7, 7]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_feature_extractors.py": {
        "torch": {
            "rand_52": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_nms.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs[:, :4]",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs[:, 4]",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[350.9821, 161.82, 369.9685, 205.2372], [250.5236, 154.2844, 274.1773, 204.981], [471.492, 160.4118, 496.0094, 213.4244], [352.0421, 164.5933, 366.4458, 205.9624], [166.0765, 169.7707, 183.0102, 232.6606], [252.3, 183.1449, 269.6541, 210.6747], [469.7862, 162.0192, 482.1673, 187.0053], [168.4862, 174.2567, 181.7437, 232.9379], [470.329, 162.3442, 496.4272, 214.6296], [251.045, 155.5911, 272.2693, 203.3675], [252.0326, 154.795, 273.7404, 195.3671], [351.7479, 161.9567, 370.6432, 204.3047], [496.3306, 161.7157, 515.0573, 210.72], [471.0749, 162.6143, 485.3374, 207.3448], [250.9745, 160.7633, 264.1924, 206.835], [470.4792, 169.0351, 487.1934, 220.2984], [474.4227, 161.9546, 513.1018, 215.5193], [251.9428, 184.195, 262.6937, 207.6416], [252.6623, 175.0252, 269.8806, 213.7584], [260.9884, 157.0351, 288.3554, 206.6027], [251.3629, 164.5101, 263.2179, 202.4203], [471.8361, 190.8142, 485.6812, 220.8586], [248.6243, 156.9628, 264.3355, 199.2767], [495.1643, 158.0483, 512.6261, 184.4192], [376.8718, 168.0144, 387.3584, 201.321], [122.9191, 160.7433, 172.5612, 231.3837], [350.3857, 175.8806, 366.25, 205.4329], [115.2958, 162.7822, 161.9776, 229.6147], [168.4375, 177.4041, 180.8028, 232.4551], [169.7939, 184.433, 181.4767, 232.122], [347.7536, 175.9356, 355.8637, 197.5586], [495.5434, 164.6059, 516.4031, 207.7053], [172.1216, 194.6033, 183.1217, 235.2653], [264.2654, 181.554, 288.4626, 214.017], [111.7971, 183.7748, 137.3745, 225.9724], [253.4919, 186.3945, 280.8694, 210.0731], [165.5334, 169.7344, 185.9159, 232.8514], [348.3662, 184.5187, 354.9081, 201.4038], [164.6562, 162.5724, 186.3108, 233.501], [113.2999, 186.841, 135.8841, 219.7642], [117.0282, 179.8009, 142.5375, 221.0736], [462.1312, 161.1004, 495.3576, 217.2208], [462.58, 159.931, 501.2937, 224.1655], [503.5242, 170.0733, 518.3792, 209.0113], [250.3658, 195.5925, 260.6523, 212.4679], [108.8287, 163.6994, 146.3642, 229.7261], [256.7617, 187.3123, 288.8407, 211.2013], [161.2781, 167.4801, 186.3751, 232.7133], [115.376, 177.5859, 163.3512, 236.966], [248.9077, 188.0919, 264.8579, 207.9718], [108.1349, 160.7851, 143.637, 229.6243], [465.09, 156.7555, 490.3561, 213.5704], [107.5338, 173.4323, 141.0704, 235.291]]).astype(np.float32)",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.1919, 0.3293, 0.086, 0.16, 0.1885, 0.4297, 0.0974, 0.2711, 0.1483, 0.1173, 0.1034, 0.2915, 0.1993, 0.0677, 0.3217, 0.0966, 0.0526, 0.5675, 0.313, 0.1592, 0.1353, 0.0634, 0.1557, 0.1512, 0.0699, 0.0545, 0.2692, 0.1143, 0.0572, 0.199, 0.0558, 0.15, 0.2214, 0.1878, 0.2501, 0.1343, 0.0809, 0.1266, 0.0743, 0.0896, 0.0781, 0.0983, 0.0557, 0.0623, 0.5808, 0.309, 0.105, 0.0524, 0.0513, 0.4501, 0.4167, 0.0623, 0.1749]).astype(np.float32)",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_predictors.py": {
        "torch": {
            "rand_47": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_rpn_heads.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tests/test_segmentation_mask.py": {
        "torch": {
            "sum_25": {
                "variable": {
                    "value": "diff",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(diff.float())",
                    "possible_values": []
                }
            },
            "abs_25": {
                "input": {
                    "value": "diff.float()",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tools/test_net.py": {
        "torch": {
            "set_device_68": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn-benchmark/tools/train_net.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_80": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "build_detection_model(cfg, model_config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed)",
                            "Call"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed, model_config)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "empty_cache_156": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_device_252": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            }
        }
    }
}