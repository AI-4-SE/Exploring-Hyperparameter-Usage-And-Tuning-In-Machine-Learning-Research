{
    "cifar.py": {
        "torch": {
            "DataLoader_361": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=args.data_dir, train=True, transform=train_transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=args.data_dir, train=True, transform=train_transform, download=True)",
                            "Call"
                        ],
                        [
                            "AugMixDataset(train_data, preprocess, all_ops=False, mixture_width=3, mixture_depth=-1, aug_severity=3, no_jsd=False, image_size=32)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_368": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=args.data_dir, train=False, transform=test_transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=args.data_dir, train=False, transform=test_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_395": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "WideResNet(40, num_classes=num_classes, widen_factor=2, drop_rate=0, active_num=args.active_num, pos=args.pos, beta=args.beta, crop=args.crop, cnsn_type=args.cnsn_type)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net).cuda()",
                            "Call"
                        ],
                        [
                            "AllConvNet(num_classes, active_num=args.active_num, pos=args.pos, beta=args.beta, crop=args.crop, cnsn_type=args.cnsn_type)",
                            "Call"
                        ],
                        [
                            "resnext29(num_classes=num_classes, config=args)",
                            "Call"
                        ],
                        [
                            "densenet(num_classes=num_classes, config=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_399": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LambdaLR_408": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(net.parameters(), args.lr, momentum=args.momentum, weight_decay=args.weight_decay, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda step: get_lr(step, args.epochs * len(train_loader), 1, 1e-06 / args.lr)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cross_entropy_102": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs, aug=True)",
                            "Call"
                        ],
                        [
                            "net(inputs, aug=False)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_133": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs, aug=True)",
                            "Call"
                        ],
                        [
                            "net(inputs, aug=False)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_223": {
                "variable": {
                    "value": "images_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_227": {
                "variable": {
                    "value": "(logits_clean, logits_aug1, logits_aug2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(images_all, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "images[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_231": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_239": {
                "variable": {
                    "value": "p_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p_clean + p_aug1 + p_aug2) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_239": {
                "variable": {
                    "value": "p_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_300": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=args.data_dir, train=False, transform=test_transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=args.data_dir, train=False, transform=test_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_316": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_168": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_179": {
                "variable": {
                    "value": "p_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p_clean + p_aug1 + p_aug2) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_179": {
                "variable": {
                    "value": "p_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_190": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_256": {
                "variable": {
                    "value": "p_cn_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p_clean + p_cn_aug1 + p_cn_aug2) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_256": {
                "variable": {
                    "value": "p_cn_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_284": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs, aug=True)",
                            "Call"
                        ],
                        [
                            "net(inputs, aug=False)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_422": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_233": {
                "input": {
                    "value": "logits_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_234": {
                "input": {
                    "value": "logits_aug1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(input, aug=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_235": {
                "input": {
                    "value": "logits_aug2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(input, aug=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "input": {
                    "value": "logits_clean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "input": {
                    "value": "logits_aug1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(input, aug=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_175": {
                "input": {
                    "value": "logits_aug2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(input, aug=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_242": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug2",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_253": {
                "input": {
                    "value": "logits_cn_aug1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(images[0], aug=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_254": {
                "input": {
                    "value": "logits_cn_aug2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(images[0], aug=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_182": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug2",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_240": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_clean",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_241": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug1",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_259": {
                "input": {
                    "value": "p_cn_mixture",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_cn_aug1 + p_cn_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_cn_aug2",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_180": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_clean",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_181": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug1",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_257": {
                "input": {
                    "value": "p_cn_mixture",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_cn_aug1 + p_cn_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_clean",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_258": {
                "input": {
                    "value": "p_cn_mixture",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_cn_aug1 + p_cn_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_cn_aug1",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet.py": {
        "torch": {
            "DataLoader_491": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, train_transform)",
                            "Call"
                        ],
                        [
                            "AugMixDataset(train_dataset, preprocess, all_ops=False, mixture_width=3, mixture_depth=-1, aug_severity=1, no_jsd=False, image_size=224)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_499": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_526": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_533": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "resnet50(args)",
                            "Call"
                        ],
                        [
                            "resnet50_ibn_a(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net).cuda()",
                            "Call"
                        ],
                        [
                            "resnet50_ibn_b(args)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_162": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_218": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "images_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_361": {
                "variable": {
                    "value": "(logits_clean, logits_aug1, logits_aug2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(images_all)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "images[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_365": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_clean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input, aug=False)",
                            "Call"
                        ],
                        [
                            "model(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_373": {
                "variable": {
                    "value": "p_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p_clean + p_aug1 + p_aug2) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_373": {
                "variable": {
                    "value": "p_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_454": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_520": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_281": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_clean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input, aug=False)",
                            "Call"
                        ],
                        [
                            "model(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_297": {
                "variable": {
                    "value": "p_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p_clean + p_aug1 + p_aug2) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_297": {
                "variable": {
                    "value": "p_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_309": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_clean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input, aug=False)",
                            "Call"
                        ],
                        [
                            "model(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_418": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_434": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_c_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(valdir, test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_544": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_367": {
                "input": {
                    "value": "logits_clean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input, aug=False)",
                            "Call"
                        ],
                        [
                            "model(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_368": {
                "input": {
                    "value": "logits_aug1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(input_aug1, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_369": {
                "input": {
                    "value": "logits_aug2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(input_aug2, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_291": {
                "input": {
                    "value": "logits_clean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input, aug=False)",
                            "Call"
                        ],
                        [
                            "model(input, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_292": {
                "input": {
                    "value": "logits_aug1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(input_aug1, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_293": {
                "input": {
                    "value": "logits_aug2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(input_aug2, aug=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_376": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug2",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_300": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug2",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_374": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_clean",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_375": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug1",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_298": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_clean",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_299": {
                "input": {
                    "value": "p_mixture",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ],
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug1",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar/allconv_cnsn.py": {
        "torch": {
            "Sequential_97": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.width2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_15": {
                "input": {
                    "value": "1.702 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_31": {
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar/densenet_cnsn.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out_channels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(n_channels * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(n_channels * reduction))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_127": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.cnsn(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.cnsn(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.cnsn(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.dense3(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(self.bn1(out)), 8))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_235": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.avg_pool2d(F.relu(self.bn1(out)), 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_55": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_107": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_126": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_235": {
                "input": {
                    "value": "F.relu(self.bn1(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_235": {
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar/resnext_cnsn.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "bottleneck",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_reduce(bottleneck)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "bottleneck",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(bottleneck)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "residual + bottleneck",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "self.conv_1_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_161": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * ResNeXtBottleneckCustom.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_227": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar/wideresnet_cnsn.py": {
        "torch": {
            "ReLU_20": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv_shortcut(x)",
                            "Call"
                        ],
                        [
                            "self.cnsn(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cnsn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.relu1(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.cnsn(out)",
                            "Call"
                        ],
                        [
                            "torch.add(x, out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_223": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cnsn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.relu1(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.cnsn(out)",
                            "Call"
                        ],
                        [
                            "torch.add(x, out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_82": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cnsn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.relu1(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.cnsn(out)",
                            "Call"
                        ],
                        [
                            "torch.add(x, out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/cnsn.py": {
        "torch": {
            "randperm_62": {
                "variable": {
                    "value": "ins_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_71": {
                "variable": {
                    "value": "chan_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "x_aug",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x * lam + x_aug * (1 - lam)",
                            "BinOp"
                        ],
                        [
                            "x_aug",
                            "Name"
                        ],
                        [
                            "self.cn_op(x)",
                            "Call"
                        ],
                        [
                            "self.crossnorm(x)",
                            "Call"
                        ],
                        [
                            "self.selfnorm(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_80": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x * lam + x_aug * (1 - lam)",
                            "BinOp"
                        ],
                        [
                            "x_aug",
                            "Name"
                        ],
                        [
                            "self.cn_op(x)",
                            "Call"
                        ],
                        [
                            "self.crossnorm(x)",
                            "Call"
                        ],
                        [
                            "self.selfnorm(x)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_119": {
                "variable": {
                    "value": "self.g_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_121": {
                "variable": {
                    "value": "self.g_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "statistics",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean.squeeze(3), std.squeeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "g_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_fc(statistics)",
                            "Call"
                        ],
                        [
                            "self.g_bn(g_y)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(g_y)",
                            "Call"
                        ],
                        [
                            "g_y.view(b, c, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_124": {
                "variable": {
                    "value": "self.f_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_126": {
                "variable": {
                    "value": "self.f_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "f_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_fc(statistics)",
                            "Call"
                        ],
                        [
                            "self.f_bn(f_y)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(f_y)",
                            "Call"
                        ],
                        [
                            "f_y.view(b, c, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/imagenet/resnet_cnsn.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_152": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_180": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * BottleneckCustom.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_267": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/imagenet/resnet_ibn_cnsn.py": {
        "torch": {
            "InstanceNorm2d_35": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.BN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes - self.half",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_40": {
                "variable": {
                    "value": "split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cnsn(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_149": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_178": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * BottleneckCustom.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_145": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_63": {
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_206": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/model/cnsn.py": {
        "torch": {
            "randperm_62": {
                "variable": {
                    "value": "ins_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_71": {
                "variable": {
                    "value": "chan_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "x_aug",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x * lam + x_aug * (1 - lam)",
                            "BinOp"
                        ],
                        [
                            "x_aug",
                            "Name"
                        ],
                        [
                            "self.cn_op(x)",
                            "Call"
                        ],
                        [
                            "self.crossnorm(x)",
                            "Call"
                        ],
                        [
                            "self.selfnorm(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_80": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x * lam + x_aug * (1 - lam)",
                            "BinOp"
                        ],
                        [
                            "x_aug",
                            "Name"
                        ],
                        [
                            "self.cn_op(x)",
                            "Call"
                        ],
                        [
                            "self.crossnorm(x)",
                            "Call"
                        ],
                        [
                            "self.selfnorm(x)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_119": {
                "variable": {
                    "value": "self.g_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_121": {
                "variable": {
                    "value": "self.g_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "statistics",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean.squeeze(3), std.squeeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "g_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g_fc(statistics)",
                            "Call"
                        ],
                        [
                            "self.g_bn(g_y)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(g_y)",
                            "Call"
                        ],
                        [
                            "g_y.view(b, c, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_124": {
                "variable": {
                    "value": "self.f_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_126": {
                "variable": {
                    "value": "self.f_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chan_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "f_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_fc(statistics)",
                            "Call"
                        ],
                        [
                            "self.f_bn(f_y)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(f_y)",
                            "Call"
                        ],
                        [
                            "f_y.view(b, c, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segmentation/model/cnsn_resnet.py": {
        "torch": {
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_351": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_354": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_355": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_379": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_422": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_436": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_478": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/PATH/TO/PRETRAINED/MODEL.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/model/fcn.py": {
        "torch": {
            "interpolate_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "result['out']",
                            "Subscript"
                        ],
                        [
                            "features['out']",
                            "Subscript"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=input_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "features['aux']",
                            "Subscript"
                        ],
                        [
                            "self.aux_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=input_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "result['out']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "L1Loss_91": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_17": {
                "ignore_index": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "result['out']",
                            "Subscript"
                        ],
                        [
                            "features['out']",
                            "Subscript"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=input_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "features['aux']",
                            "Subscript"
                        ],
                        [
                            "self.aux_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=input_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "result['out']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_84": {
                "ignore_index": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/model/psanet.py": {
        "torch": {
            "rand_186": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "crop_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "crop_w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, mid_channels, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels * (2 if psa_type == 2 else 1), in_channels, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fea_dim, 512, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.reduce_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.attention_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, mid_channels, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.reduce(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x.view(n, c, h * w), y.view(n, h * w, h * w)).view(n, c, h, w) * (1.0 / self.normalization_factor)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x_col, x_dis], 1)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x_tmp)",
                            "Call"
                        ],
                        [
                            "self.psa(x)",
                            "Call"
                        ],
                        [
                            "self.cls(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "(out, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_104": {
                "ignore_index": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_169": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.reduce(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x.view(n, c, h * w), y.view(n, h * w, h * w)).view(n, c, h, w) * (1.0 / self.normalization_factor)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x_col, x_dis], 1)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x_tmp)",
                            "Call"
                        ],
                        [
                            "self.psa(x)",
                            "Call"
                        ],
                        [
                            "self.cls(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mask_h * mask_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "mid_channels * (2 if psa_type == 2 else 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.reduce(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x.view(n, c, h * w), y.view(n, h * w, h * w)).view(n, c, h, w) * (1.0 / self.normalization_factor)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x_col, x_dis], 1)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x_tmp)",
                            "Call"
                        ],
                        [
                            "self.psa(x)",
                            "Call"
                        ],
                        [
                            "self.cls(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention(x)",
                            "Call"
                        ],
                        [
                            "PF.psa_mask(y, self.psa_type, self.mask_h, self.mask_w)",
                            "Call"
                        ],
                        [
                            "y.view(n, h * w, h * w).transpose(1, 2).view(n, h * w, h, w)",
                            "Call"
                        ],
                        [
                            "F.softmax(y, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_col, x_dis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "fea_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "Constant"
                        ],
                        [
                            "fea_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_142": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_174": {
                "variable": {
                    "value": "aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.aux(x_tmp)",
                            "Call"
                        ],
                        [
                            "F.interpolate(aux, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mask_h * mask_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_70": {
                "input": {
                    "value": "x.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_78": {
                "variable": {
                    "value": "x_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_col",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.reduce(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_col, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x_col.view(n, c, h * w), y_col.view(n, h * w, h * w)).view(n, c, h, w) * (1.0 / self.normalization_factor)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_79": {
                "variable": {
                    "value": "x_dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.reduce_p(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dis, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x_dis.view(n, c, h * w), y_dis.view(n, h * w, h * w)).view(n, c, h, w) * (1.0 / self.normalization_factor)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "y_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_col",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention(x_col)",
                            "Call"
                        ],
                        [
                            "PF.psa_mask(y_col, 0, self.mask_h, self.mask_w)",
                            "Call"
                        ],
                        [
                            "F.softmax(y_col, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "y_dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_dis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_p(x_dis)",
                            "Call"
                        ],
                        [
                            "y_dis.view(n, h * w, h * w).transpose(1, 2).view(n, h * w, h, w)",
                            "Call"
                        ],
                        [
                            "PF.psa_mask(y_dis, 1, self.mask_h, self.mask_w)",
                            "Call"
                        ],
                        [
                            "F.softmax(y_dis, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_150": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_90": {
                "input": {
                    "value": "x_col.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_col.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_91": {
                "input": {
                    "value": "x_dis.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_dis.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/model/pspnet.py": {
        "torch": {
            "rand_113": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "473",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "473",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fea_dim, 512, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_30": {
                "ignore_index": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x_tmp)",
                            "Call"
                        ],
                        [
                            "self.ppm(x)",
                            "Call"
                        ],
                        [
                            "self.cls(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "fea_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "Constant"
                        ],
                        [
                            "fea_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_70": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.aux(x_tmp)",
                            "Call"
                        ],
                        [
                            "F.interpolate(aux, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(bin)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_25": {
                "input": {
                    "value": "f(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x_size[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_78": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_14": {
                "output_size": {
                    "value": "bin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bins",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "reduction_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/model/resnet.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_151": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_159": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_216": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/model/utils.py": {
        "torch": {
            "pad_56": {
                "variable": {
                    "value": "padded_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "previous_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[w_pad1, w_pad2, h_pad1, h_pad2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(h_kernel, w_kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(h_kernel, w_kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "spp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(spp, x.view(num_sample, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_61": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(h_kernel, w_kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(h_kernel, w_kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/tool/train.py": {
        "torch": {
            "CrossEntropyLoss_124": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "args.ignore_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_152": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_219": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='train', data_root=args.data_root, data_list=args.train_list, transform=train_transform, dataset=args.dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_169": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_171": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_216": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='train', data_root=args.data_root, data_list=args.train_list, transform=train_transform, dataset=args.dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_231": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='val', data_root=args.data_root, data_list=args.val_list, transform=val_transform, dataset=args.dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_90": {
                "seed": {
                    "value": "args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_92": {
                "seed": {
                    "value": "args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_165": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_190": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedSampler_228": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='val', data_root=args.data_root, data_list=args.val_list, transform=val_transform, dataset=args.dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_295": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_295": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_390": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output, size=target.size()[1:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "target.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_401": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "main_loss + args.aux_weight * aux_loss",
                            "BinOp"
                        ],
                        [
                            "criterion(output, target)",
                            "Call"
                        ],
                        [
                            "loss * n",
                            "BinOp"
                        ],
                        [
                            "loss / n",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "cityscapes_val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cityscapes_val_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='val', data_root='dataset/cityscapes/', data_list='dataset/cityscapes/val.txt', transform=val_transform, dataset='cityscapes')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_252": {
                "obj": {
                    "value": "{'epoch': epoch_log, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.save_path + '/train_epoch_' + str(epoch_log) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_300": {
                "input": {
                    "value": "aux_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/tool/train_cnsn.py": {
        "torch": {
            "CrossEntropyLoss_124": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "args.ignore_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_158": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='train', data_root=args.data_root, data_list=args.train_list, transform=train_transform, dataset=args.dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_175": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_177": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_222": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='train', data_root=args.data_root, data_list=args.train_list, transform=train_transform, dataset=args.dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='val', data_root=args.data_root, data_list=args.val_list, transform=val_transform, dataset=args.dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_90": {
                "seed": {
                    "value": "args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_92": {
                "seed": {
                    "value": "args.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_171": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_183": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_196": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedSampler_234": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='val', data_root=args.data_root, data_list=args.val_list, transform=val_transform, dataset=args.dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_301": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_301": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_406": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output, size=target.size()[1:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "target.size()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_417": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "main_loss + args.aux_weight * aux_loss",
                            "BinOp"
                        ],
                        [
                            "criterion(output, target)",
                            "Call"
                        ],
                        [
                            "loss * n",
                            "BinOp"
                        ],
                        [
                            "loss / n",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "cityscapes_val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cityscapes_val_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.SemData(split='val', data_root='dataset/cityscapes/', data_list='dataset/cityscapes/val.txt', transform=val_transform, dataset='cityscapes')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_258": {
                "obj": {
                    "value": "{'epoch': epoch_log, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.save_path + '/train_epoch_' + str(epoch_log) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_316": {
                "input": {
                    "value": "aux_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/util/dataset.py": {
        "torch": {}
    },
    "segmentation/util/transform.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "cv2.resize(label, self.size[::-1], interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "cv2.resize(label, None, fx=scale_factor_x, fy=scale_factor_y, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(label, pad_h_half, pad_h - pad_h_half, pad_w_half, pad_w - pad_w_half, cv2.BORDER_CONSTANT, value=self.ignore_label)",
                            "Call"
                        ],
                        [
                            "label[h_off:h_off + self.crop_h, w_off:w_off + self.crop_w]",
                            "Subscript"
                        ],
                        [
                            "cv2.warpAffine(label, matrix, (w, h), flags=cv2.INTER_NEAREST, borderMode=cv2.BORDER_CONSTANT, borderValue=self.ignore_label)",
                            "Call"
                        ],
                        [
                            "cv2.flip(label, 1)",
                            "Call"
                        ],
                        [
                            "cv2.flip(label, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segmentation/util/util.py": {
        "torch": {
            "histc_131": {
                "variable": {
                    "value": "area_intersection",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersection",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "output[np.where(output == target)[0]]",
                            "Subscript"
                        ],
                        [
                            "output[output == target]",
                            "Subscript"
                        ]
                    ]
                },
                "bins": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_132": {
                "variable": {
                    "value": "area_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output.reshape(output.size).copy()",
                            "Call"
                        ],
                        [
                            "output.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "bins": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_133": {
                "variable": {
                    "value": "area_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.reshape(target.size)",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "bins": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleDict_22": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[[t, nn.BatchNorm1d(num_features, momentum=momentum, eps=eps)] for t in types]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleDict_24": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[[t, nn.BatchNorm1d(num_features, eps=eps)] for t in types]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleDict_27": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[[t, nn.BatchNorm2d(num_features, momentum=momentum, eps=eps)] for t in types]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleDict_29": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[[t, nn.BatchNorm2d(num_features, eps=eps)] for t in types]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.num_features",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.momentum",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.eps",
                            "Attribute"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_24": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.num_features",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.eps",
                            "Attribute"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.num_features",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.momentum",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.eps",
                            "Attribute"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.num_features",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.eps",
                            "Attribute"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_like_81": {
                "variable": {
                    "value": "mix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preprocess(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, '{}_last_ckpt'.format(get_model_name(model)))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, '{}_ckpt_{}'.format(get_model_name(model), epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}