{
    "matlab/test.py": {
        "torch": {
            "DataLoader_132": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchsrc.imgloaders.pytorch_loader_allpiece(test_dict, num_labels=lmk_num, piece=piece, piece_map=piece_map)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_145": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_146": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/imgloaders/imgloader_CT_3D.py": {
        "torch": {}
    },
    "matlab/torchsrc/imgloaders/imgloader_CT_3D_allpiece.py": {
        "torch": {}
    },
    "matlab/torchsrc/models/ClssNet.py": {
        "torch": {
            "from_numpy_17": {
                "ndarray": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - abs(og[0] - center) / factor) * (1 - abs(og[1] - center) / factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 1024, 7, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.maxPool_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2, stride=2, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.classifier_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8 * 8 * 512, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.upscore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(n_class, n_class, 4, stride=2, padding=1, output_padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.score4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.score3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.score2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.score1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_202": {
                "input": {
                    "value": "hh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier_fc(hc5_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_65": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_95": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "8 * 8 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_120": {
                "in_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/ClssNet_svm.py": {
        "torch": {
            "from_numpy_18": {
                "ndarray": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - abs(og[0] - center) / factor) * (1 - abs(og[1] - center) / factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 1024, 7, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.maxPool_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2, stride=2, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.classifier_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8 * 8 * 512, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.final_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, n_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.another_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8 * 8 * 512, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.upscore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(n_class, n_class, 4, stride=2, padding=1, output_padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.score4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.score3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.score2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.score1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_52": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_74": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_93": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "8 * 8 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "8 * 8 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_137": {
                "in_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_222": {
                "input": {
                    "value": "hh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.final_fc(feature)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "matlab/torchsrc/models/DeconvNet.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "variable": {
                    "value": "self.pool6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_32": {
                "variable": {
                    "value": "self.unpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_33": {
                "variable": {
                    "value": "self.unpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_34": {
                "variable": {
                    "value": "self.unpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_35": {
                "variable": {
                    "value": "self.unpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_36": {
                "variable": {
                    "value": "self.unpool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_37": {
                "variable": {
                    "value": "self.unpool6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/MTL_BN.py": {
        "torch": {
            "from_numpy_18": {
                "ndarray": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - abs(og[0] - center) / factor) * (1 - abs(og[1] - center) / factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_54": {
                "variable": {
                    "value": "self.upscore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_64": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bridge_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score(bridge)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "up_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upscore(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.classifier_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8 * 8 * 512, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.maxPool_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2, stride=2, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_155": {
                "variable": {
                    "value": "self.output_final_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_156": {
                "variable": {
                    "value": "self.output_final_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_157": {
                "variable": {
                    "value": "self.output_final_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_158": {
                "variable": {
                    "value": "self.output_final_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_159": {
                "variable": {
                    "value": "self.output_final_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.classifier_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 1024, 7, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.classifier_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 2, 1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.classifier_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 4, 1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.classifier_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 2, 1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.classifier_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 2, 1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.classifier_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 4, 1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_257": {
                "variable": {
                    "value": "pred_clss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier_fc(hc5_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_81": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_120": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_134": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "8 * 8 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_140": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_143": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "11",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_151": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_152": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_170": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_186": {
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/MTL_GCN.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(ks, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(ks / 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv_l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, ks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, ks / 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv_r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, ks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, ks / 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(ks, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(ks / 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_178": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "*args": {
                    "value": "nn.Conv2d(inplanes, inplanes, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_209": {
                "variable": {
                    "value": "pred_clss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.avgpool(fm4)",
                            "Call"
                        ],
                        [
                            "clss.view(clss.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(clss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_183": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "num_features": {
                    "value": "inplanes / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_186": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "inplanes / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_bilinear_223": {
                "input": {
                    "value": "fs1_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_9(F.upsample_bilinear(fs1_3, conv_x.size()[2:]) + gcfm1_5)",
                            "Call"
                        ],
                        [
                            "self.refine1_9(F.upsample_bilinear(fs1_3, conv_x.size()[2:]) + gcfm1_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_235": {
                "input": {
                    "value": "fs2_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_9(F.upsample_bilinear(fs2_3, conv_x.size()[2:]) + gcfm2_5)",
                            "Call"
                        ],
                        [
                            "self.refine2_9(F.upsample_bilinear(fs2_3, conv_x.size()[2:]) + gcfm2_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_247": {
                "input": {
                    "value": "fs3_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_9(F.upsample_bilinear(fs3_3, conv_x.size()[2:]) + gcfm3_5)",
                            "Call"
                        ],
                        [
                            "self.refine3_9(F.upsample_bilinear(fs3_3, conv_x.size()[2:]) + gcfm3_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_259": {
                "input": {
                    "value": "fs4_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_9(F.upsample_bilinear(fs4_3, conv_x.size()[2:]) + gcfm4_5)",
                            "Call"
                        ],
                        [
                            "self.refine4_9(F.upsample_bilinear(fs4_3, conv_x.size()[2:]) + gcfm4_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_271": {
                "input": {
                    "value": "fs5_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_9(F.upsample_bilinear(fs5_3, conv_x.size()[2:]) + gcfm5_5)",
                            "Call"
                        ],
                        [
                            "self.refine5_9(F.upsample_bilinear(fs5_3, conv_x.size()[2:]) + gcfm5_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_219": {
                "input": {
                    "value": "gcfm1_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_1(self.gcn1_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine1_1(self.gcn1_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_220": {
                "input": {
                    "value": "fs1_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_6(F.upsample_bilinear(gcfm1_1, fm3.size()[2:]) + gcfm1_2)",
                            "Call"
                        ],
                        [
                            "self.refine1_6(F.upsample_bilinear(gcfm1_1, fm3.size()[2:]) + gcfm1_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_221": {
                "input": {
                    "value": "fs1_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_7(F.upsample_bilinear(fs1_1, fm2.size()[2:]) + gcfm1_3)",
                            "Call"
                        ],
                        [
                            "self.refine1_7(F.upsample_bilinear(fs1_1, fm2.size()[2:]) + gcfm1_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_222": {
                "input": {
                    "value": "fs1_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_8(F.upsample_bilinear(fs1_2, pool_x.size()[2:]) + gcfm1_4)",
                            "Call"
                        ],
                        [
                            "self.refine1_8(F.upsample_bilinear(fs1_2, pool_x.size()[2:]) + gcfm1_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_231": {
                "input": {
                    "value": "gcfm2_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_1(self.gcn2_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine2_1(self.gcn2_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_232": {
                "input": {
                    "value": "fs2_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_6(F.upsample_bilinear(gcfm2_1, fm3.size()[2:]) + gcfm2_2)",
                            "Call"
                        ],
                        [
                            "self.refine2_6(F.upsample_bilinear(gcfm2_1, fm3.size()[2:]) + gcfm2_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_233": {
                "input": {
                    "value": "fs2_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_7(F.upsample_bilinear(fs2_1, fm2.size()[2:]) + gcfm2_3)",
                            "Call"
                        ],
                        [
                            "self.refine2_7(F.upsample_bilinear(fs2_1, fm2.size()[2:]) + gcfm2_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_234": {
                "input": {
                    "value": "fs2_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_8(F.upsample_bilinear(fs2_2, pool_x.size()[2:]) + gcfm2_4)",
                            "Call"
                        ],
                        [
                            "self.refine2_8(F.upsample_bilinear(fs2_2, pool_x.size()[2:]) + gcfm2_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_243": {
                "input": {
                    "value": "gcfm3_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_1(self.gcn3_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine3_1(self.gcn3_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_244": {
                "input": {
                    "value": "fs3_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_6(F.upsample_bilinear(gcfm3_1, fm3.size()[2:]) + gcfm3_2)",
                            "Call"
                        ],
                        [
                            "self.refine3_6(F.upsample_bilinear(gcfm3_1, fm3.size()[2:]) + gcfm3_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_245": {
                "input": {
                    "value": "fs3_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_7(F.upsample_bilinear(fs3_1, fm2.size()[2:]) + gcfm3_3)",
                            "Call"
                        ],
                        [
                            "self.refine3_7(F.upsample_bilinear(fs3_1, fm2.size()[2:]) + gcfm3_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_246": {
                "input": {
                    "value": "fs3_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_8(F.upsample_bilinear(fs3_2, pool_x.size()[2:]) + gcfm3_4)",
                            "Call"
                        ],
                        [
                            "self.refine3_8(F.upsample_bilinear(fs3_2, pool_x.size()[2:]) + gcfm3_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_255": {
                "input": {
                    "value": "gcfm4_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_1(self.gcn4_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine4_1(self.gcn4_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_256": {
                "input": {
                    "value": "fs4_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_6(F.upsample_bilinear(gcfm4_1, fm3.size()[2:]) + gcfm4_2)",
                            "Call"
                        ],
                        [
                            "self.refine4_6(F.upsample_bilinear(gcfm4_1, fm3.size()[2:]) + gcfm4_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_257": {
                "input": {
                    "value": "fs4_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_7(F.upsample_bilinear(fs4_1, fm2.size()[2:]) + gcfm4_3)",
                            "Call"
                        ],
                        [
                            "self.refine4_7(F.upsample_bilinear(fs4_1, fm2.size()[2:]) + gcfm4_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_258": {
                "input": {
                    "value": "fs4_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_8(F.upsample_bilinear(fs4_2, pool_x.size()[2:]) + gcfm4_4)",
                            "Call"
                        ],
                        [
                            "self.refine4_8(F.upsample_bilinear(fs4_2, pool_x.size()[2:]) + gcfm4_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_267": {
                "input": {
                    "value": "gcfm5_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_1(self.gcn5_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine5_1(self.gcn5_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_268": {
                "input": {
                    "value": "fs5_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_6(F.upsample_bilinear(gcfm5_1, fm3.size()[2:]) + gcfm5_2)",
                            "Call"
                        ],
                        [
                            "self.refine5_6(F.upsample_bilinear(gcfm5_1, fm3.size()[2:]) + gcfm5_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_269": {
                "input": {
                    "value": "fs5_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_7(F.upsample_bilinear(fs5_1, fm2.size()[2:]) + gcfm5_3)",
                            "Call"
                        ],
                        [
                            "self.refine5_7(F.upsample_bilinear(fs5_1, fm2.size()[2:]) + gcfm5_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_270": {
                "input": {
                    "value": "fs5_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_8(F.upsample_bilinear(fs5_2, pool_x.size()[2:]) + gcfm5_4)",
                            "Call"
                        ],
                        [
                            "self.refine5_8(F.upsample_bilinear(fs5_2, pool_x.size()[2:]) + gcfm5_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_287": {
                "input": {
                    "value": "fs1_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_9(F.upsample_bilinear(fs1_3, conv_x.size()[2:]) + gcfm1_5)",
                            "Call"
                        ],
                        [
                            "self.refine1_9(F.upsample_bilinear(fs1_3, conv_x.size()[2:]) + gcfm1_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_283": {
                "input": {
                    "value": "gcfm1_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_1(self.gcn1_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine1_1(self.gcn1_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_284": {
                "input": {
                    "value": "fs1_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_6(F.upsample_bilinear(gcfm1_1, fm3.size()[2:]) + gcfm1_2)",
                            "Call"
                        ],
                        [
                            "self.refine1_6(F.upsample_bilinear(gcfm1_1, fm3.size()[2:]) + gcfm1_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_285": {
                "input": {
                    "value": "fs1_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_7(F.upsample_bilinear(fs1_1, fm2.size()[2:]) + gcfm1_3)",
                            "Call"
                        ],
                        [
                            "self.refine1_7(F.upsample_bilinear(fs1_1, fm2.size()[2:]) + gcfm1_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_286": {
                "input": {
                    "value": "fs1_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1_8(F.upsample_bilinear(fs1_2, pool_x.size()[2:]) + gcfm1_4)",
                            "Call"
                        ],
                        [
                            "self.refine1_8(F.upsample_bilinear(fs1_2, pool_x.size()[2:]) + gcfm1_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_301": {
                "input": {
                    "value": "fs2_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_9(F.upsample_bilinear(fs2_3, conv_x.size()[2:]) + gcfm2_5)",
                            "Call"
                        ],
                        [
                            "self.refine2_9(F.upsample_bilinear(fs2_3, conv_x.size()[2:]) + gcfm2_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_297": {
                "input": {
                    "value": "gcfm2_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_1(self.gcn2_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine2_1(self.gcn2_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_298": {
                "input": {
                    "value": "fs2_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_6(F.upsample_bilinear(gcfm2_1, fm3.size()[2:]) + gcfm2_2)",
                            "Call"
                        ],
                        [
                            "self.refine2_6(F.upsample_bilinear(gcfm2_1, fm3.size()[2:]) + gcfm2_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_299": {
                "input": {
                    "value": "fs2_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_7(F.upsample_bilinear(fs2_1, fm2.size()[2:]) + gcfm2_3)",
                            "Call"
                        ],
                        [
                            "self.refine2_7(F.upsample_bilinear(fs2_1, fm2.size()[2:]) + gcfm2_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_300": {
                "input": {
                    "value": "fs2_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine2_8(F.upsample_bilinear(fs2_2, pool_x.size()[2:]) + gcfm2_4)",
                            "Call"
                        ],
                        [
                            "self.refine2_8(F.upsample_bilinear(fs2_2, pool_x.size()[2:]) + gcfm2_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_315": {
                "input": {
                    "value": "fs3_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_9(F.upsample_bilinear(fs3_3, conv_x.size()[2:]) + gcfm3_5)",
                            "Call"
                        ],
                        [
                            "self.refine3_9(F.upsample_bilinear(fs3_3, conv_x.size()[2:]) + gcfm3_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_311": {
                "input": {
                    "value": "gcfm3_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_1(self.gcn3_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine3_1(self.gcn3_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_312": {
                "input": {
                    "value": "fs3_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_6(F.upsample_bilinear(gcfm3_1, fm3.size()[2:]) + gcfm3_2)",
                            "Call"
                        ],
                        [
                            "self.refine3_6(F.upsample_bilinear(gcfm3_1, fm3.size()[2:]) + gcfm3_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_313": {
                "input": {
                    "value": "fs3_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_7(F.upsample_bilinear(fs3_1, fm2.size()[2:]) + gcfm3_3)",
                            "Call"
                        ],
                        [
                            "self.refine3_7(F.upsample_bilinear(fs3_1, fm2.size()[2:]) + gcfm3_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_314": {
                "input": {
                    "value": "fs3_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine3_8(F.upsample_bilinear(fs3_2, pool_x.size()[2:]) + gcfm3_4)",
                            "Call"
                        ],
                        [
                            "self.refine3_8(F.upsample_bilinear(fs3_2, pool_x.size()[2:]) + gcfm3_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_329": {
                "input": {
                    "value": "fs4_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_9(F.upsample_bilinear(fs4_3, conv_x.size()[2:]) + gcfm4_5)",
                            "Call"
                        ],
                        [
                            "self.refine4_9(F.upsample_bilinear(fs4_3, conv_x.size()[2:]) + gcfm4_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_325": {
                "input": {
                    "value": "gcfm4_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_1(self.gcn4_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine4_1(self.gcn4_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_326": {
                "input": {
                    "value": "fs4_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_6(F.upsample_bilinear(gcfm4_1, fm3.size()[2:]) + gcfm4_2)",
                            "Call"
                        ],
                        [
                            "self.refine4_6(F.upsample_bilinear(gcfm4_1, fm3.size()[2:]) + gcfm4_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_327": {
                "input": {
                    "value": "fs4_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_7(F.upsample_bilinear(fs4_1, fm2.size()[2:]) + gcfm4_3)",
                            "Call"
                        ],
                        [
                            "self.refine4_7(F.upsample_bilinear(fs4_1, fm2.size()[2:]) + gcfm4_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_328": {
                "input": {
                    "value": "fs4_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine4_8(F.upsample_bilinear(fs4_2, pool_x.size()[2:]) + gcfm4_4)",
                            "Call"
                        ],
                        [
                            "self.refine4_8(F.upsample_bilinear(fs4_2, pool_x.size()[2:]) + gcfm4_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_343": {
                "input": {
                    "value": "fs5_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_9(F.upsample_bilinear(fs5_3, conv_x.size()[2:]) + gcfm5_5)",
                            "Call"
                        ],
                        [
                            "self.refine5_9(F.upsample_bilinear(fs5_3, conv_x.size()[2:]) + gcfm5_5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_339": {
                "input": {
                    "value": "gcfm5_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_1(self.gcn5_1(fm4))",
                            "Call"
                        ],
                        [
                            "self.refine5_1(self.gcn5_1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_340": {
                "input": {
                    "value": "fs5_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_6(F.upsample_bilinear(gcfm5_1, fm3.size()[2:]) + gcfm5_2)",
                            "Call"
                        ],
                        [
                            "self.refine5_6(F.upsample_bilinear(gcfm5_1, fm3.size()[2:]) + gcfm5_2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_341": {
                "input": {
                    "value": "fs5_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_7(F.upsample_bilinear(fs5_1, fm2.size()[2:]) + gcfm5_3)",
                            "Call"
                        ],
                        [
                            "self.refine5_7(F.upsample_bilinear(fs5_1, fm2.size()[2:]) + gcfm5_3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_342": {
                "input": {
                    "value": "fs5_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine5_8(F.upsample_bilinear(fs5_2, pool_x.size()[2:]) + gcfm5_4)",
                            "Call"
                        ],
                        [
                            "self.refine5_8(F.upsample_bilinear(fs5_2, pool_x.size()[2:]) + gcfm5_4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/MTL_ResNet.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "upsample_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, 64, kernel_size=1, stride=2, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_142": {
                "variable": {
                    "value": "self.conv1_1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "upsample_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, 64, kernel_size=1, stride=2, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_157": {
                "variable": {
                    "value": "self.conv1_1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "upsample_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, 64, kernel_size=1, stride=2, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_173": {
                "variable": {
                    "value": "self.conv1_1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "upsample_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, 64, kernel_size=1, stride=2, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_189": {
                "variable": {
                    "value": "self.conv1_1_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "upsample_5",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, 64, kernel_size=1, stride=2, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_204": {
                "variable": {
                    "value": "self.conv1_1_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_206": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * downblock.expansion * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_channels, init_channels * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, init_channels * 2, kernel_size=1, stride=stride, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_264": {
                "variable": {
                    "value": "pred_clss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "clss.view(clss.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(clss)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_135": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_150": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_154": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_166": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_182": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_186": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_197": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_201": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_218": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "init_channels * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_220": {
                "num_features": {
                    "value": "init_channels * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_235": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "init_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_238": {
                "num_features": {
                    "value": "init_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/ResNet.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_114": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, 64, kernel_size=1, stride=2, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_138": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_channels, init_channels * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, init_channels * 2, kernel_size=1, stride=stride, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_130": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "init_channels * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "init_channels * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_163": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "init_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "num_features": {
                    "value": "init_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/ResNetClss.py": {
        "torch": {
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_114": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_159": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/ResNetClss_svm.py": {
        "torch": {
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_114": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_159": {
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(x0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/ResUnet.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_114": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, 64, kernel_size=1, stride=2, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_138": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_channels, init_channels * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.in_channels, init_channels * 2, kernel_size=1, stride=stride, bias=False, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_130": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "init_channels * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "init_channels * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_163": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "init_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "num_features": {
                    "value": "init_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/Unet.py": {
        "torch": {
            "from_numpy_17": {
                "ndarray": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - abs(og[0] - center) / factor) * (1 - abs(og[1] - center) / factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_size, out_size, 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up, bridge]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 4096, 7, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.maxPool_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2, stride=2, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.classifier_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8 * 8 * 512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.conv_block512_1024",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 1024, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.conv_block512_numclass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, n_class, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_174": {
                "variable": {
                    "value": "self.up_sample_256_512",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_53": {
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_82": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_91": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_103": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_114": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_125": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_144": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "8 * 8 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_156": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "matlab/torchsrc/models/Unet3D.py": {
        "torch": {
            "MaxPool3d_18": {
                "variable": {
                    "value": "self.pool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_19": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_20": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, output_padding=output_padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "d9",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dc9(e7), syn2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "d6",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dc6(d7), syn1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "d3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dc3(d4), syn0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_51": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_38": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/Unet3D_origin.py": {
        "torch": {
            "MaxPool3d_18": {
                "variable": {
                    "value": "self.pool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_19": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_20": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, output_padding=output_padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "d9",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dc9(e7), syn2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "d6",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dc6(d7), syn1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "d3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dc3(d4), syn0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_51": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_38": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/Unet_BN.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_size, out_size, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_size, out_size, 2, stride=2, padding=0, output_padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_size, out_size, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up, crop1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_65": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_31": {
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/Unet_online.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_24": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_37": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up, crop1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_52": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/VggResClssNet.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.resdown",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8192, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2048, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, n_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8192 + 1024, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2048, n_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x1, x2], 1)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "8192 + 1024",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "matlab/torchsrc/models/base_model.py": {
        "torch": {
            "save_45": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_53": {
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "matlab/torchsrc/models/fc_densenet.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.get_transform(nIn + i * growth_rate, growth_rate, bottle_neck, drop_rate) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channel_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.dense_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.transition_downs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.transition_ups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_115": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(skip, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, tx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.layers[i](x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.BatchNorm2d(nIn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "nn.BatchNorm2d(nIn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_105": {
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "drop_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nBottle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nOut * bottle_neck",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "nBottle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nOut * bottle_neck",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "nBottle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nOut * bottle_neck",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "p": {
                    "value": "drop_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_94": {
                "in_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_channel_start",
                            "Attribute"
                        ],
                        [
                            "nIn + self.growth_rates[2 * n_scales] * self.depths[2 * n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales] * self.depths[n_scales]",
                            "BinOp"
                        ],
                        [
                            "self.growth_rates[n_scales + 1 + i] * self.depths[n_scales + 1 + i]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_147": {
                "p": {
                    "value": "drop_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "matlab/torchsrc/models/fcn32s.py": {
        "torch": {
            "from_numpy_17": {
                "ndarray": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - abs(og[0] - center) / factor) * (1 - abs(og[1] - center) / factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 1024, 7, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.maxPool_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2, stride=2, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.upscore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(n_class, n_class, 4, stride=2, padding=1, output_padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.score4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.score3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.score2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.score1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_196": {
                "variable": {
                    "value": "hf4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score4(hc4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "hd4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upscore(ha)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_201": {
                "variable": {
                    "value": "hf3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score3(hc3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "hd3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upscore(hf4)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_206": {
                "variable": {
                    "value": "hf2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score2(hc2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "hd2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upscore(hf3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_211": {
                "variable": {
                    "value": "hf1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score1(hc1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "hd1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upscore(hf2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_60": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_69": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_81": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_103": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_122": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_136": {
                "in_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/fcn32s_BN.py": {
        "torch": {
            "from_numpy_17": {
                "ndarray": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - abs(og[0] - center) / factor) * (1 - abs(og[1] - center) / factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 1024, 7, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.maxPool_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2, stride=2, ceil_mode=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.upscore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(n_class, n_class, 4, stride=2, padding=1, output_padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.upscore4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(n_class, n_class, 4, stride=2, padding=1, output_padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.upscore3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(n_class, n_class, 4, stride=2, padding=1, output_padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.upscore2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(n_class, n_class, 4, stride=2, padding=1, output_padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.upscore1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(n_class, n_class, 4, stride=2, padding=1, output_padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.score4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.score3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.score2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.score1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, n_class, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_199": {
                "variable": {
                    "value": "hf4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score4(hc4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "hd4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upscore4(ha)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_204": {
                "variable": {
                    "value": "hf3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score3(hc3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "hd3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upscore3(hf4)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_209": {
                "variable": {
                    "value": "hf2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score2(hc2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "hd2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upscore2(hf3)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_214": {
                "variable": {
                    "value": "hf1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score1(hc1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "hd1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upscore1(hf2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_73": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_108": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_114": {
                "in_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_119": {
                "in_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_124": {
                "in_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_129": {
                "in_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_134": {
                "in_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "num_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier[6].weight.size()[0]",
                            "Subscript"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "matlab/torchsrc/models/gcn.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(ks, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(ks / 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv_l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, ks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, ks / 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv_r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, ks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, ks / 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(ks, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(ks / 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "nn.Conv2d(inplanes, inplanes, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "inplanes / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_107": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "inplanes / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_bilinear_135": {
                "input": {
                    "value": "fs4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine9(F.upsample_bilinear(fs3, conv_x.size()[2:]) + gcfm5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_131": {
                "input": {
                    "value": "gcfm1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine1(self.gcn1(fm4))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_132": {
                "input": {
                    "value": "fs1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine6(F.upsample_bilinear(gcfm1, fm3.size()[2:]) + gcfm2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fm2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_133": {
                "input": {
                    "value": "fs2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine7(F.upsample_bilinear(fs1, fm2.size()[2:]) + gcfm3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "pool_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "upsample_bilinear_134": {
                "input": {
                    "value": "fs3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.refine8(F.upsample_bilinear(fs2, pool_x.size()[2:]) + gcfm4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/networks.py": {
        "torch": {
            "Sequential_170": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "variable": {
                    "value": "downconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_250": {
                "variable": {
                    "value": "downrelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "variable": {
                    "value": "uprelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_281": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_103": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_105": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_256": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_263": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_270": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "tensors": {
                    "value": "[self.model(x), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_299": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_300": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_319": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_323": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_326": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_161": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_197": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_309": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_313": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_277": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/pix2pix_model.py": {
        "torch": {
            "cat_115": {
                "variable": {
                    "value": "real_AB",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "fake_AB",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_69": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/models/vgg.py": {
        "torch": {}
    },
    "matlab/torchsrc/models/vnet.py": {
        "torch": {
            "Conv3d_35": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nchan",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nchan",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv3d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "x16",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_71": {
                "variable": {
                    "value": "self.down_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * inChans",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_91": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout3d_94": {
                "variable": {
                    "value": "self.do2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "xcat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, skipxdo)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_114": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_116": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_13": {
                "num_parameters": {
                    "value": "nchan",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_norm_26": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout3d_77": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout3d_98": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_63": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn1(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu1(torch.add(out, x16))",
                            "Call"
                        ],
                        [
                            "self.do1(down)",
                            "Call"
                        ],
                        [
                            "self.ops(out)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, down))",
                            "Call"
                        ],
                        [
                            "self.do1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.up_conv(out)))",
                            "Call"
                        ],
                        [
                            "self.ops(xcat)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, xcat))",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(out.numel() // 2, 2)",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.up_tr256(out256, out128)",
                            "Call"
                        ],
                        [
                            "self.up_tr128(out, out64)",
                            "Call"
                        ],
                        [
                            "self.up_tr64(out, out32)",
                            "Call"
                        ],
                        [
                            "self.up_tr32(out, out16)",
                            "Call"
                        ],
                        [
                            "self.out_tr(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x16",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_84": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn1(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu1(torch.add(out, x16))",
                            "Call"
                        ],
                        [
                            "self.do1(down)",
                            "Call"
                        ],
                        [
                            "self.ops(out)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, down))",
                            "Call"
                        ],
                        [
                            "self.do1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.up_conv(out)))",
                            "Call"
                        ],
                        [
                            "self.ops(xcat)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, xcat))",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(out.numel() // 2, 2)",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.up_tr256(out256, out128)",
                            "Call"
                        ],
                        [
                            "self.up_tr128(out, out64)",
                            "Call"
                        ],
                        [
                            "self.up_tr64(out, out32)",
                            "Call"
                        ],
                        [
                            "self.up_tr32(out, out16)",
                            "Call"
                        ],
                        [
                            "self.out_tr(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "down",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.down_conv(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_107": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn1(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu1(torch.add(out, x16))",
                            "Call"
                        ],
                        [
                            "self.do1(down)",
                            "Call"
                        ],
                        [
                            "self.ops(out)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, down))",
                            "Call"
                        ],
                        [
                            "self.do1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.up_conv(out)))",
                            "Call"
                        ],
                        [
                            "self.ops(xcat)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, xcat))",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(out.numel() // 2, 2)",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.up_tr256(out256, out128)",
                            "Call"
                        ],
                        [
                            "self.up_tr128(out, out64)",
                            "Call"
                        ],
                        [
                            "self.up_tr64(out, out32)",
                            "Call"
                        ],
                        [
                            "self.up_tr32(out, out16)",
                            "Call"
                        ],
                        [
                            "self.out_tr(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "xcat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((out, skipxdo), 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "matlab/torchsrc/trainer.py": {
        "torch": {
            "Threshold_47": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, 10)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_102": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, 10)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_132": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_134": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_137": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_138": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_139": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_142": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_158": {
                "variable": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, 10)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_166": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(input)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)",
                            "Call"
                        ],
                        [
                            "log_p[target.view(n, h, w, 1).repeat(1, 1, 1, c) >= 0]",
                            "Subscript"
                        ],
                        [
                            "log_p.view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.cuda.FloatTensor(target_.size())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(target_.size())",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.view(target.size(0), target.size(1), target.size(2), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_173": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_181": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.nll_loss(log_p, target, weight=weight, size_average=False)",
                            "Call"
                        ],
                        [
                            "loss + torch.abs(dist - truedist)",
                            "BinOp"
                        ],
                        [
                            "criterion(input, target)",
                            "Call"
                        ],
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "torch.pow(loss, 2)",
                            "Call"
                        ],
                        [
                            "torch.mul(loss, mask)",
                            "Call"
                        ],
                        [
                            "loss.sum() / mask.sum()",
                            "BinOp"
                        ],
                        [
                            "criterion(input, target)",
                            "Call"
                        ],
                        [
                            "criterion(input, target)",
                            "Call"
                        ],
                        [
                            "criterion(input, mask)",
                            "Call"
                        ],
                        [
                            "l2_normloss(inputs[i], target)",
                            "Call"
                        ],
                        [
                            "l2_normloss_compete(inputs[i], target)",
                            "Call"
                        ],
                        [
                            "torch.abs(dist - truedist)",
                            "Call"
                        ],
                        [
                            "criterion(input, target)",
                            "Call"
                        ],
                        [
                            "dice_loss_3d(pred * 100, target)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_182": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.nll_loss(log_p, target, weight=weight, size_average=False)",
                            "Call"
                        ],
                        [
                            "loss + torch.abs(dist - truedist)",
                            "BinOp"
                        ],
                        [
                            "criterion(input, target)",
                            "Call"
                        ],
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "torch.pow(loss, 2)",
                            "Call"
                        ],
                        [
                            "torch.mul(loss, mask)",
                            "Call"
                        ],
                        [
                            "loss.sum() / mask.sum()",
                            "BinOp"
                        ],
                        [
                            "criterion(input, target)",
                            "Call"
                        ],
                        [
                            "criterion(input, target)",
                            "Call"
                        ],
                        [
                            "criterion(input, mask)",
                            "Call"
                        ],
                        [
                            "l2_normloss(inputs[i], target)",
                            "Call"
                        ],
                        [
                            "l2_normloss_compete(inputs[i], target)",
                            "Call"
                        ],
                        [
                            "torch.abs(dist - truedist)",
                            "Call"
                        ],
                        [
                            "criterion(input, target)",
                            "Call"
                        ],
                        [
                            "dice_loss_3d(pred * 100, target)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target >= 0",
                            "Compare"
                        ],
                        [
                            "torch.sum(target, 1)",
                            "Call"
                        ],
                        [
                            "mask.expand(input.size())",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_187": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_195": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_203": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.cuda.FloatTensor(target_.size())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(target_.size())",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.view(target.size(0), target.size(1), target.size(2), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_207": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target >= 0",
                            "Compare"
                        ],
                        [
                            "torch.sum(target, 1)",
                            "Call"
                        ],
                        [
                            "mask.expand(input.size())",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_208": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, 10)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_209": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_290": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x0 - x1, 2) + torch.pow(y0 - y1, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_291": {
                "variable": {
                    "value": "truedist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(pts[0, 0, 0] - pts[0, 1, 0], 2) + torch.pow(pts[0, 0, 1] - pts[0, 1, 1], 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_292": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist - truedist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_318": {
                "variable": {
                    "value": "result_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(result_)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_319": {
                "variable": {
                    "value": "target_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(target_)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_330": {
                "variable": {
                    "value": "intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(result_.size())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(result_.size())",
                            "Call"
                        ],
                        [
                            "result.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.cuda.FloatTensor(target_.size())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(target_.size())",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.view(target.size(0), target.size(1), target.size(2), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_332": {
                "variable": {
                    "value": "result_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(result_.size())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(result_.size())",
                            "Call"
                        ],
                        [
                            "result.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_333": {
                "variable": {
                    "value": "target_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.cuda.FloatTensor(target_.size())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(target_.size())",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.view(target.size(0), target.size(1), target.size(2), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_354": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, 10)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_357": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_358": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_359": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_362": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_363": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_364": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ],
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_367": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_368": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_369": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ],
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_382": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "(input - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_235": {
                "input": {
                    "value": "weight * (input - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_304": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x2 - x3, 2) + torch.pow(y2 - y3, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_305": {
                "variable": {
                    "value": "truedist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(pts[0, 2, 0] - pts[0, 3, 0], 2) + torch.pow(pts[0, 2, 1] - pts[0, 3, 1], 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_46": {
                "input": {
                    "value": "input.max().expand(input.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "-input.min().expand(input.size())",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_54": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, 10)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(torch.from_numpy(grid[1]).float().cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_55": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, 10)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(torch.from_numpy(grid[0]).float().cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_306": {
                "input": {
                    "value": "dist - truedist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "dice_eso",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dice[:, 1]",
                            "Subscript"
                        ],
                        [
                            "dice[1:]",
                            "Subscript"
                        ],
                        [
                            "dice[0:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_148": {
                "input": {
                    "value": "dice_eso",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dice[:, 1]",
                            "Subscript"
                        ],
                        [
                            "dice[1:]",
                            "Subscript"
                        ],
                        [
                            "dice[0:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_290": {
                "input": {
                    "value": "y0 - y1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_291": {
                "input": {
                    "value": "pts[0, 0, 1] - pts[0, 1, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_373": {
                "input": {
                    "value": "dice_eso",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dice[:, 1]",
                            "Subscript"
                        ],
                        [
                            "dice[1:]",
                            "Subscript"
                        ],
                        [
                            "dice[0:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_304": {
                "input": {
                    "value": "y2 - y3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_305": {
                "input": {
                    "value": "pts[0, 2, 1] - pts[0, 3, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_552": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_pth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'%s/model_epoch_%04d.pth' % (out, epoch)",
                            "BinOp"
                        ],
                        [
                            "'%s/model_epoch_%04d.pth' % (train_root_dir, epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_540": {
                "f": {
                    "value": "old_model_pth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'%s/model_epoch_%04d.pth' % (old_out, self.fineepoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_545": {
                "f": {
                    "value": "model_pth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'%s/model_epoch_%04d.pth' % (out, epoch)",
                            "BinOp"
                        ],
                        [
                            "'%s/model_epoch_%04d.pth' % (train_root_dir, epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_564": {
                "f": {
                    "value": "model_pth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'%s/model_epoch_%04d.pth' % (out, epoch)",
                            "BinOp"
                        ],
                        [
                            "'%s/model_epoch_%04d.pth' % (train_root_dir, epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "grid[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "grid[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/utils/image_pool.py": {
        "torch": {
            "unsqueeze_18": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images.data",
                            "Attribute"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "return_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(return_images, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "matlab/torchsrc/utils/util.py": {
        "torch": {
            "mean_23": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_23": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/test.py": {
        "torch": {
            "DataLoader_95": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchsrc.imgloaders.pytorch_loader_allpiece(test_dict, num_labels=lmk_num, piece=piece, piece_map=piece_map)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_102": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_105": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/torchsrc/imgloaders/imgloader_CT_3D.py": {
        "torch": {}
    },
    "python/torchsrc/imgloaders/imgloader_CT_3D_allpiece.py": {
        "torch": {}
    },
    "python/torchsrc/models/Unet3D.py": {
        "torch": {
            "MaxPool3d_18": {
                "variable": {
                    "value": "self.pool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_19": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_20": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, output_padding=output_padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "d9",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dc9(e7), syn2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "d6",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dc6(d7), syn1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "d3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.dc3(d4), syn0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_51": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_38": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/torchsrc/models/vnet.py": {
        "torch": {
            "Conv3d_35": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nchan",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nchan",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv3d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "x16",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_71": {
                "variable": {
                    "value": "self.down_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * inChans",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_91": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChans // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout3d_94": {
                "variable": {
                    "value": "self.do2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "xcat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, skipxdo)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_114": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_116": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_13": {
                "num_parameters": {
                    "value": "nchan",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_norm_26": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout3d_77": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout3d_98": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_63": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn1(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu1(torch.add(out, x16))",
                            "Call"
                        ],
                        [
                            "self.do1(down)",
                            "Call"
                        ],
                        [
                            "self.ops(out)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, down))",
                            "Call"
                        ],
                        [
                            "self.do1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.up_conv(out)))",
                            "Call"
                        ],
                        [
                            "self.ops(xcat)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, xcat))",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(out.numel() // 2, 2)",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.up_tr256(out256, out128)",
                            "Call"
                        ],
                        [
                            "self.up_tr128(out, out64)",
                            "Call"
                        ],
                        [
                            "self.up_tr64(out, out32)",
                            "Call"
                        ],
                        [
                            "self.up_tr32(out, out16)",
                            "Call"
                        ],
                        [
                            "self.out_tr(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x16",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_84": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn1(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu1(torch.add(out, x16))",
                            "Call"
                        ],
                        [
                            "self.do1(down)",
                            "Call"
                        ],
                        [
                            "self.ops(out)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, down))",
                            "Call"
                        ],
                        [
                            "self.do1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.up_conv(out)))",
                            "Call"
                        ],
                        [
                            "self.ops(xcat)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, xcat))",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(out.numel() // 2, 2)",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.up_tr256(out256, out128)",
                            "Call"
                        ],
                        [
                            "self.up_tr128(out, out64)",
                            "Call"
                        ],
                        [
                            "self.up_tr64(out, out32)",
                            "Call"
                        ],
                        [
                            "self.up_tr32(out, out16)",
                            "Call"
                        ],
                        [
                            "self.out_tr(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "down",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.down_conv(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_107": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn1(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu1(torch.add(out, x16))",
                            "Call"
                        ],
                        [
                            "self.do1(down)",
                            "Call"
                        ],
                        [
                            "self.ops(out)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, down))",
                            "Call"
                        ],
                        [
                            "self.do1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.up_conv(out)))",
                            "Call"
                        ],
                        [
                            "self.ops(xcat)",
                            "Call"
                        ],
                        [
                            "self.relu2(torch.add(out, xcat))",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "out.view(out.numel() // 2, 2)",
                            "Call"
                        ],
                        [
                            "self.softmax(out)",
                            "Call"
                        ],
                        [
                            "self.up_tr256(out256, out128)",
                            "Call"
                        ],
                        [
                            "self.up_tr128(out, out64)",
                            "Call"
                        ],
                        [
                            "self.up_tr64(out, out32)",
                            "Call"
                        ],
                        [
                            "self.up_tr32(out, out16)",
                            "Call"
                        ],
                        [
                            "self.out_tr(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "xcat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((out, skipxdo), 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/torchsrc/trainer.py": {
        "torch": {
            "Threshold_39": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_85": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(num, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(num, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_90": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * probs",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den1, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "den2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target * target",
                            "BinOp"
                        ],
                        [
                            "torch.sum(den2, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(den2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_110": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_38": {
                "input": {
                    "value": "input.max().expand(input.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "-input.min().expand(input.size())",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_46": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(torch.from_numpy(grid[1]).float().cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_47": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(input, -input.min().expand(input.size())) / torch.add(input.max().expand(input.size()), -input.min().expand(input.size()))",
                            "BinOp"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "input.view(input.size(0), input.size(1), input.size(2), -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(torch.from_numpy(grid[0]).float().cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "dice_eso",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dice[0:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_280": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_pth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'%s/model_epoch_%04d.pth' % (out, epoch)",
                            "BinOp"
                        ],
                        [
                            "'%s/model_epoch_%04d.pth' % (train_root_dir, epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_268": {
                "f": {
                    "value": "old_model_pth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'%s/model_epoch_%04d.pth' % (old_out, self.fineepoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_273": {
                "f": {
                    "value": "model_pth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'%s/model_epoch_%04d.pth' % (out, epoch)",
                            "BinOp"
                        ],
                        [
                            "'%s/model_epoch_%04d.pth' % (train_root_dir, epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_292": {
                "f": {
                    "value": "model_pth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'%s/model_epoch_%04d.pth' % (out, epoch)",
                            "BinOp"
                        ],
                        [
                            "'%s/model_epoch_%04d.pth' % (train_root_dir, epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "grid[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "grid[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "python/torchsrc/utils/image_pool.py": {
        "torch": {
            "unsqueeze_18": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images.data",
                            "Attribute"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "return_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(return_images, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/torchsrc/utils/util.py": {
        "torch": {
            "mean_23": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_23": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/train.py": {
        "torch": {
            "DataLoader_116": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchsrc.imgloaders.pytorch_loader_allpiece(train_dict, num_labels=lmk_num, piece=piece, piece_map=piece_map)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchsrc.imgloaders.pytorch_loader_allpiece(test_dict, num_labels=lmk_num, piece=piece, piece_map=piece_map)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_131": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_134": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}