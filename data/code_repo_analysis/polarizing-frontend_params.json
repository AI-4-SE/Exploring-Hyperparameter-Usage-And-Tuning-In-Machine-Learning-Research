{
    "attacks.py": {
        "torch": {
            "zeros_like_30": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "perturbation.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(perturbation, data_params['x_max'] - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "perturbs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_136": {
                "variable": {
                    "value": "perturbs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(perturbs, data_params['x_max'] - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_40": {
                "variable": {
                    "value": "y_true_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x + e).type(torch.cuda.DoubleTensor)",
                            "Call"
                        ],
                        [
                            "model(x + e).type(torch.DoubleTensor)",
                            "Call"
                        ],
                        [
                            "output.argmax(dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_42": {
                "variable": {
                    "value": "loss[loss == 0.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat[loss == 0.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y_true_onehot[loss == 0.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "loss[loss == 0.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_55": {
                "input": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps * e_grad.sign()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_108": {
                "variable": {
                    "value": "perturb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_123": {
                "variable": {
                    "value": "perturb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * torch.rand_like(x) - 1) * attack_params['eps']",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "perturb + FastGradientSignMethod(model, torch.clamp(x + perturb, data_params['x_min'], data_params['x_max']), y_true, attack_params['step_size'], data_params)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(perturb, -attack_params['eps'], attack_params['eps'])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-attack_params['eps']",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "attack_params['eps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_137": {
                "input": {
                    "value": "perturbs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "perturb.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_41": {
                "start": {
                    "value": "y_hat.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_118": {
                "input": {
                    "value": "x + perturb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "data_params['x_min']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "data_params['x_max']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_129": {
                "input": {
                    "value": "x + perturb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "data_params['x_min']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "data_params['x_max']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_105": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "attacks_alternative.py": {
        "torch": {
            "CrossEntropyLoss_23": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_51": {
                "variable": {
                    "value": "perturbation.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(perturbation, data_params['x_max'] - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "variable": {
                    "value": "max_dmg_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_75": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_28": {
                "variable": {
                    "value": "y_true_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_30": {
                "variable": {
                    "value": "loss[loss == 0.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat[loss == 0.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y_true_onehot[loss == 0.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_30": {
                "variable": {
                    "value": "loss[loss == 0.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "le_102": {
                "variable": {
                    "value": "update_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(model(images), y_true)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(y_hat, y_true)",
                            "Call"
                        ],
                        [
                            "criterion(output, y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_21": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_52": {
                "input": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * sign_data_grad",
                            "BinOp"
                        ],
                        [
                            "originally_right_indices.view(-1, 1, 1, 1).float() * perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_72": {
                "input": {
                    "value": "model(images)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_95": {
                "variable": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * epsilon * torch.rand_like(images) - epsilon * torch.ones_like(images)",
                            "BinOp"
                        ],
                        [
                            "adv + FastGradientSignMethod(model, torch.clamp(images + adv, normalized_min, normalized_max), y_true, step_size, data_params)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv, -epsilon, epsilon)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack_params['eps']",
                            "Subscript"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_38": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_97": {
                "input": {
                    "value": "images + adv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "normalized_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_params['x_min']",
                            "Subscript"
                        ]
                    ]
                },
                "max": {
                    "value": "normalized_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_params['x_max']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_29": {
                "start": {
                    "value": "y_hat.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_82": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_82": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_90": {
                "input": {
                    "value": "images + adv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "normalized_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_params['x_min']",
                            "Subscript"
                        ]
                    ]
                },
                "max": {
                    "value": "normalized_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_params['x_max']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "15488",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.jump",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(jump, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.bpda_steepness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(jump, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.dense3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_162": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_164": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_24": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_25": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "jump",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "jump",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_164": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "normalized_conv2d.py": {
        "torch": {
            "sum_46": {
                "variable": {
                    "value": "one_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "tuple(range(1, weights.dim()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "one_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(self.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "tuple(range(1, self.weight.dim()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.bpda_steepness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bpda_steepness.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.bpda_steepness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(bpda_steepness, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.jump",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "jump.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.jump",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(jump, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_46": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_95": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_11": {
                "input": {
                    "value": "x - jump",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_12": {
                "input": {
                    "value": "x + jump",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "bpda_steepness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bpda_steepness",
                            "Method Argument"
                        ],
                        [
                            "bpda_steepness",
                            "Method Argument"
                        ],
                        [
                            "bpda_steepness",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "jump",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jump",
                            "Method Argument"
                        ],
                        [
                            "jump",
                            "Method Argument"
                        ],
                        [
                            "jump",
                            "Method Argument"
                        ],
                        [
                            "jump",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_56": {
                "input": {
                    "value": "x - jump",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_57": {
                "input": {
                    "value": "x + jump",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "run_attack.py": {
        "torch": {
            "device_116": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_142": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./checkpoints/ + args.checkpoint_name + .ckpt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_139": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dict[args.model](in_channels=1, jump=jump, bpda_steepness=args.bpda_steepness)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_242": {
                "variable": {
                    "value": "perturbed_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(perturbed_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_243": {
                "variable": {
                    "value": "original_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(original_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_189": {
                "variable": {
                    "value": "perturbed_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "normalized_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0 - mean[0]) / std[0]",
                            "BinOp"
                        ],
                        [
                            "normalized_min",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "normalized_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - mean[0]) / std[0]",
                            "BinOp"
                        ],
                        [
                            "normalized_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_213": {
                "variable": {
                    "value": "perturbed_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "normalized_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0 - mean[0]) / std[0]",
                            "BinOp"
                        ],
                        [
                            "normalized_min",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "normalized_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - mean[0]) / std[0]",
                            "BinOp"
                        ],
                        [
                            "normalized_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_237": {
                "variable": {
                    "value": "perturbed_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "normalized_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0 - mean[0]) / std[0]",
                            "BinOp"
                        ],
                        [
                            "normalized_min",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "normalized_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - mean[0]) / std[0]",
                            "BinOp"
                        ],
                        [
                            "normalized_max",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "sum_41": {
                "variable": {
                    "value": "one_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "tuple(range(1, filters.dim()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "cumulative_hist",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "device_362": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_413": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_146": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "(_, pred_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_225": {
                "variable": {
                    "value": "(_, pred_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model_state_dict': model.state_dict(), 'acc': acc, 'epoch': epoch, 'rng_state': torch.get_rng_state()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_dir + args.checkpoint_name + '_epoch' + str(epoch) + '.ckpt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_281": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(args.data_dir, train=True, download=False, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_291": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(args.data_dir, train=False, download=False, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_381": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dict[args.model](in_channels=1, jump=jump, bpda_steepness=args.bpda_steepness)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_386": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_dir + args.checkpoint_name + '.ckpt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_41": {
                "input": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.frontend.weight.data",
                            "Attribute"
                        ],
                        [
                            "filters * 1 / one_norms.view(-1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "model.frontend.weight.data.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_106": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1 - 2 / nb_bins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "nb_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_221": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_316": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST(args.data_dir, train=True, download=False, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_326": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST(args.data_dir, train=False, download=False, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_411": {
                "new_state": {
                    "value": "rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint['rng_state']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "histc_97": {
                "input": {
                    "value": "model.frontend(images).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "nb_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_160": {
                "input": {
                    "value": "-model.frontend(images) ** 2 / (2 * args.bw1 ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_173": {
                "input": {
                    "value": "-(model.frontend(images) - args.jump) ** 2 / (2 * args.bw2 ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_177": {
                "input": {
                    "value": "-(model.frontend(images) + args.jump) ** 2 / (2 * args.bw2 ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}