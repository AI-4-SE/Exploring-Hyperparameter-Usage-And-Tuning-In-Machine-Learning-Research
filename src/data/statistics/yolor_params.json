{
    "detect.py": {
        "torch": {
            "zeros_74": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, imgsz, imgsz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_device(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((1, 3, imgsz, imgsz), device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).to(device)",
                            "Call"
                        ],
                        [
                            "img.half() if half else img.float()",
                            "IfExp"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_44": {
                "f": {
                    "value": "weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_device(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_55": {
                "f": {
                    "value": "weights/resnet101.pt",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_device(opt.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_105": {
                "data": {
                    "value": "im0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "xyxy",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/export.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(opt.batch_size, 3, *opt.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "trace_30": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(opt.weights, map_location=torch.device('cpu'))['model'].float()",
                            "Call"
                        ],
                        [
                            "ct.convert(ts, inputs=[ct.ImageType(name='images', shape=img.shape, scale=1 / 255.0, bias=[0, 0, 0])])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_21": {
                "f": {
                    "value": "opt.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_21": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "linspace_86": {
                "variable": {
                    "value": "iouv",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "select_device(opt.device, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, imgsz, imgsz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "select_device(opt.device, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "whwh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "nt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_67": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "select_device(opt.device, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "niou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iouv.numel()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "select_device(opt.device, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_198": {
                "input": {
                    "value": "tcls_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_152": {
                "data": {
                    "value": "shapes[si][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "niou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iouv.numel()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "xyxy",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "LambdaLR_119": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(pg0, lr=hyp['lr0'], betas=(hyp['momentum'], 0.999))",
                            "Call"
                        ],
                        [
                            "optim.SGD(pg0, lr=hyp['lr0'], momentum=hyp['momentum'], nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda x: (1 + math.cos(x * math.pi / epochs)) / 2 * (1 - hyp['lrf']) + hyp['lrf']",
                            "Lambda"
                        ]
                    ]
                }
            },
            "GradScaler_226": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.type != 'cpu'",
                            "Compare"
                        ]
                    ]
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "hyp['lr0']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(f, Loader=yaml.FullLoader)",
                            "Call"
                        ]
                    ]
                },
                "betas": {
                    "value": "(hyp['momentum'], 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "hyp['lr0']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(f, Loader=yaml.FullLoader)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "hyp['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(f, Loader=yaml.FullLoader)",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_536": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "opt.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_246": {
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.tensor(dataset.indices) if rank == 0 else torch.zeros(dataset.n)).int()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_283": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs.to(device, non_blocking=True).float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_286": {
                "enabled": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.type != 'cpu'",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "tune.py": {
        "torch": {
            "LambdaLR_119": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(pg0, lr=hyp['lr0'], betas=(hyp['momentum'], 0.999))",
                            "Call"
                        ],
                        [
                            "optim.SGD(pg0, lr=hyp['lr0'], momentum=hyp['momentum'], nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda x: (1 + math.cos(x * math.pi / epochs)) / 2 * (1 - hyp['lrf']) + hyp['lrf']",
                            "Lambda"
                        ]
                    ]
                }
            },
            "GradScaler_226": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.type != 'cpu'",
                            "Compare"
                        ]
                    ]
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "hyp['lr0']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(f, Loader=yaml.FullLoader)",
                            "Call"
                        ]
                    ]
                },
                "betas": {
                    "value": "(hyp['momentum'], 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "hyp['lr0']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(f, Loader=yaml.FullLoader)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "hyp['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(f, Loader=yaml.FullLoader)",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_536": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "opt.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_246": {
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.tensor(dataset.indices) if rank == 0 else torch.zeros(dataset.n)).int()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_283": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs.to(device, non_blocking=True).float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_286": {
                "enabled": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.type != 'cpu'",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "utils/activations.py": {
        "torch": {
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "variable": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softplus_57": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softplus_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "hardtanh_19": {
                "input": {
                    "value": "x + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_val": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_51": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/autoanchor.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])).float()",
                            "Call"
                        ],
                        [
                            "wh0[(wh0 >= 2.0).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(wh, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "wh0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "wh0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes, dataset.labels)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(wh0, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "new_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)",
                            "Call"
                        ],
                        [
                            "torch.tensor(new_anchors, device=m.anchors.device).type_as(m.anchors)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "m.anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_31": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_76": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k * s",
                            "BinOp"
                        ],
                        [
                            "print_results(k)",
                            "Call"
                        ],
                        [
                            "k[np.argsort(k.prod(1))]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/datasets.py": {
        "torch": {
            "zeros_622": {
                "variable": {
                    "value": "labels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nL, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_905": {
                "variable": {
                    "value": "labels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nL, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DistributedSampler_76": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LoadImagesAndLabels(path, imgsz, batch_size, augment=augment, hyp=hyp, rect=rect, cache_images=cache, single_cls=opt.single_cls, stride=int(stride), pad=pad, rank=rank)",
                            "Call"
                        ],
                        [
                            "LoadImagesAndLabels9(path, imgsz, batch_size, augment=augment, hyp=hyp, rect=rect, cache_images=cache, single_cls=opt.single_cls, stride=int(stride), pad=pad, rank=rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_102": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LoadImagesAndLabels(path, imgsz, batch_size, augment=augment, hyp=hyp, rect=rect, cache_images=cache, single_cls=opt.single_cls, stride=int(stride), pad=pad, rank=rank)",
                            "Call"
                        ],
                        [
                            "LoadImagesAndLabels9(path, imgsz, batch_size, augment=augment, hyp=hyp, rect=rect, cache_images=cache, single_cls=opt.single_cls, stride=int(stride), pad=pad, rank=rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_396": {
                "variable": {
                    "value": "cache",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(Path(self.label_files[0]).parent) + '.cache3'",
                            "BinOp"
                        ],
                        [
                            "str(Path(self.label_files[0]).parent) + '.cache3'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_534": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, 256, dtype=np.int16)",
                            "Call"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ],
                        [
                            "xy[:, [0, 2, 4, 6]]",
                            "Subscript"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_files[index]",
                            "Subscript"
                        ],
                        [
                            "self.files[self.count]",
                            "Subscript"
                        ],
                        [
                            "self.files[self.count]",
                            "Subscript"
                        ],
                        [
                            "'./new'",
                            "Method Argument"
                        ],
                        [
                            "'../coco128'",
                            "Method Argument"
                        ],
                        [
                            "'labels.cache3'",
                            "Method Argument"
                        ],
                        [
                            "'labels.cache3'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_624": {
                "variable": {
                    "value": "labels_out[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "np.append(labels, [[labels[i, 0], x1a, y1a, x2a, y2a]], axis=0)",
                            "Call"
                        ],
                        [
                            "labels[ioa < 0.6]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((labels, labels2), 0)",
                            "Call"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((labels, labels2), 0)",
                            "Call"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_679": {
                "variable": {
                    "value": "cache",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(Path(self.label_files[0]).parent) + '.cache3'",
                            "BinOp"
                        ],
                        [
                            "str(Path(self.label_files[0]).parent) + '.cache3'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_817": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0, 256, dtype=np.int16)",
                            "Call"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ],
                        [
                            "xy[:, [0, 2, 4, 6]]",
                            "Subscript"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_files[index]",
                            "Subscript"
                        ],
                        [
                            "self.files[self.count]",
                            "Subscript"
                        ],
                        [
                            "self.files[self.count]",
                            "Subscript"
                        ],
                        [
                            "'./new'",
                            "Method Argument"
                        ],
                        [
                            "'../coco128'",
                            "Method Argument"
                        ],
                        [
                            "'labels.cache3'",
                            "Method Argument"
                        ],
                        [
                            "'labels.cache3'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_907": {
                "variable": {
                    "value": "labels_out[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "np.append(labels, [[labels[i, 0], x1a, y1a, x2a, y2a]], axis=0)",
                            "Call"
                        ],
                        [
                            "labels[ioa < 0.6]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((labels, labels2), 0)",
                            "Call"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((labels, labels2), 0)",
                            "Call"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_630": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w0 * r), int(h0 * r)), interpolation=interp)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpPerspective(img, M, dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size, auto_size=self.auto_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, auto=self.rect)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_637": {
                "tensors": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w0 * r), int(h0 * r)), interpolation=interp)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpPerspective(img, M, dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size, auto_size=self.auto_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, auto=self.rect)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_637": {
                "tensors": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_913": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w0 * r), int(h0 * r)), interpolation=interp)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpPerspective(img, M, dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size, auto_size=self.auto_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, auto=self.rect)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_920": {
                "tensors": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w0 * r), int(h0 * r)), interpolation=interp)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpPerspective(img, M, dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size, auto_size=self.auto_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, auto=self.rect)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_920": {
                "tensors": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/general.py": {
        "torch": {
            "set_printoptions_25": {
                "linewidth": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "precision": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "profile": {
                    "value": "long",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_276": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wh1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wh1[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "prod_276": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_361": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(s).name",
                            "Attribute"
                        ],
                        [
                            "'weights/best.pt'",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.bincount(classes, minlength=nc)",
                            "Call"
                        ],
                        [
                            "1 / weights",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "iou * scores[None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_368": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "x[np.argsort(-fitness(x))]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "s or f",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cat_317": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box[i], x[i, j + 5, None], j[:, None].float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_212": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_212": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_213": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_213": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_361": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_320": {
                "tensors": {
                    "value": "(box, conf, j.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_348": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.bincount(classes, minlength=nc)",
                            "Call"
                        ],
                        [
                            "1 / weights",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "iou * scores[None]",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_202": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_202": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_203": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_203": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_221": {
                "input": {
                    "value": "torch.atan(w2 / h2) - torch.atan(w1 / h1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_268": {
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_268": {
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_433": {},
            "tensor_324": {
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, 0].astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan_221": {
                "input": {
                    "value": "w1 / h1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_232": {
                "input": {
                    "value": "torch.atan(w2 / h2) - torch.atan(w1 / h1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "atan_232": {
                "input": {
                    "value": "w1 / h1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/google_utils.py": {
        "torch": {
            "load_43": {
                "f": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights if isinstance(weights, list) else [weights]",
                            "IfExp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/layers.py": {
        "torch": {
            "ModuleList_150": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(in_channels=in_ch, out_channels=ch[g], kernel_size=k[g], stride=stride, padding=k[g] // 2, dilation=dilation, bias=bias) for g in range(groups)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "self.zero_padding(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, c, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_185": {
                "variable": {
                    "value": "sx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "self.zero_padding(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, c, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_186": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "self.zero_padding(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, c, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_186": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_220": {
                "variable": {
                    "value": "self.zero_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_221": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.p_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * kernel_size * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_258": {
                "variable": {
                    "value": "q_lt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.clamp(q_lt[..., :N], 0, x.size(2) - 1), torch.clamp(q_lt[..., N:], 0, x.size(3) - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "q_rb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.clamp(q_rb[..., :N], 0, x.size(2) - 1), torch.clamp(q_rb[..., N:], 0, x.size(3) - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "q_lb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_lt[..., :N], q_rb[..., N:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "q_rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_rb[..., :N], q_lt[..., N:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.clamp(p[..., :N], 0, x.size(2) - 1), torch.clamp(p[..., N:], 0, x.size(3) - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_297": {
                "variable": {
                    "value": "(p_n_x, p_n_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(-(self.kernel_size - 1) // 2, (self.kernel_size - 1) // 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(-(self.kernel_size - 1) // 2, (self.kernel_size - 1) // 2 + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "p_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.flatten(p_n_x), torch.flatten(p_n_y)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_307": {
                "variable": {
                    "value": "(p_0_x, p_0_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(1, h * self.stride + 1, self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(1, w * self.stride + 1, self.stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_310": {
                "variable": {
                    "value": "p_0_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_0_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flatten(p_0_x).view(1, 1, h, w).repeat(1, N, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_311": {
                "variable": {
                    "value": "p_0_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_0_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flatten(p_0_y).view(1, 1, h, w).repeat(1, N, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_312": {
                "variable": {
                    "value": "p_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_0_x, p_0_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_345": {
                "variable": {
                    "value": "x_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_offset[..., s:s + ks].contiguous().view(b, c, h, w * ks) for s in range(0, N, ks)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_354": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_471": {
                "variable": {
                    "value": "self.implicit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, channel, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_482": {
                "variable": {
                    "value": "self.implicit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, channel, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_493": {
                "variable": {
                    "value": "self.implicit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, channel, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_505": {
                "variable": {
                    "value": "self.implicit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, atom, channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_516": {
                "variable": {
                    "value": "self.implicit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, atom, channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_527": {
                "variable": {
                    "value": "self.implicit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, atom, channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "[x[..., ::2, ::2], x[..., 1::2, ::2], x[..., ::2, 1::2], x[..., 1::2, 1::2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "self.zero_padding(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, c, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[outputs[self.layers[0]], outputs[self.layers[1]].detach()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[outputs[self.layers[0]], outputs[self.layers[1]].detach(), outputs[self.layers[2]].detach()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_140": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "groups - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_140": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "[m(x) for m in self.m]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_229": {
                "variable": {
                    "value": "self.m_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kernel_size * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_241": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.m_conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m for _ in range(x_offset.size(1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_424": {
                "tensors": {
                    "value": "[a.expand_as(x), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_434": {
                "tensors": {
                    "value": "[a.expand_as(x), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "[yl / 2.0, yh[0].view(b, -1, w // 2, h // 2) / 2.0 + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "[outputs[i] for i in self.layers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "[outputs[i][:, :outputs[i].shape[1] // 2, :, :] for i in self.layers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "self.zero_padding(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, c, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_180": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_202": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "self.zero_padding(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, c, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_298": {
                "start": {
                    "value": "-(self.kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "(self.kernel_size - 1) // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_299": {
                "start": {
                    "value": "-(self.kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "(self.kernel_size - 1) // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_308": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h * self.stride + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_309": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w * self.stride + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_471": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_482": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_493": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_505": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "atom",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_516": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "atom",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_527": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "atom",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "[x[..., ::2, ::2], x[..., 1::2, ::2], x[..., ::2, 1::2], x[..., 1::2, 1::2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_114": {
                "input": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch[g]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[(i == g).sum() for g in range(groups)]",
                            "ListComp"
                        ],
                        [
                            "np.linalg.lstsq(a, b, rcond=None)[0].round().astype(int)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k[g]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "k[g] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_180": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "self.zero_padding(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, c, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "hardtanh_207": {
                "input": {
                    "value": "x + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_val": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_264": {
                "input": {
                    "value": "p[..., N:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_301": {
                "input": {
                    "value": "p_n_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * w[0]",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + a[:, :nx]",
                            "BinOp"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "self.zero_padding(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, c, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_258": {
                "input": {
                    "value": "q_lt[..., N:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_259": {
                "input": {
                    "value": "q_rb[..., N:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "BCEWithLogitsLoss_70": {
                "variable": {
                    "value": "BCEcls",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "torch.Tensor([h['cls_pw']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_71": {
                "variable": {
                    "value": "BCEobj",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "torch.Tensor([h['obj_pw']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_130": {
                "variable": {
                    "value": "gain",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "off",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0], [0, 1], [-1, 0], [0, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_19": {
                "variable": {
                    "value": "self.loss_fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_24": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_88": {
                "variable": {
                    "value": "tobj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_98": {
                "variable": {
                    "value": "pbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pxy, pwh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "(lbox, lobj, lcls, loss)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_144": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_152": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t[:, 2:4]",
                            "Subscript"
                        ],
                        [
                            "t[:, 2:4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_27": {
                "input": {
                    "value": "(dx - 1) / (self.alpha + 0.0001)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_like_107": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps[:, 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "cn",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_138": {
                "data": {
                    "value": "p[i].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "(gxy - gij, gwh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "(t, t[j], t[k], t[l], t[m])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "(z, z[j] + off[0], z[k] + off[1], z[l] + off[2], z[m] + off[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_146": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/plots.py": {
        "torch": {
            "sigmoid_73": {
                "input": {
                    "value": "torch.from_numpy(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "box[0] / width + w / 2",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.arange(y.shape[1]) if x is None else np.array(x)",
                            "IfExp"
                        ],
                        [
                            "pd.DataFrame(b.transpose(), columns=['x', 'y', 'width', 'height'])",
                            "Call"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/torch_utils.py": {
        "torch": {
            "Conv2d_121": {
                "variable": {
                    "value": "fusedconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_131": {
                "variable": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.weight.div(torch.sqrt(bn.eps + bn.running_var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "model.fc.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "model.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n, filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_52": {
                "variable": {
                    "value": "ng",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_65": {
                "type": {
                    "value": "cuda:0 if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_190": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=s, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'Using torch {torch.__version__} '",
                            "JoinedStr"
                        ],
                        [
                            "' ' * len(s)",
                            "BinOp"
                        ],
                        [
                            "(int(h * ratio), int(w * ratio))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_132": {
                "input": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.weight.clone().view(conv.out_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "conv.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "conv.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_178": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_194": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=s, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, w - s[1], 0, h - s[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.447",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_device_properties_55": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(0, ng)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_unstructured_114": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.modules()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "amount": {
                    "value": "amount",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "remove_115": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.modules()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "input": {
                    "value": "bn.eps + bn.running_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_136": {
                "input": {
                    "value": "bn.running_var + bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_137": {
                "input": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_conv.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_155": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size if isinstance(img_size, list) else [img_size, img_size]",
                            "IfExp"
                        ],
                        [
                            "640",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size if isinstance(img_size, list) else [img_size, img_size]",
                            "IfExp"
                        ],
                        [
                            "640",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}