{
    "data_parallel.py": {
        "torch": {
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "exp_moving_avg.py": {
        "torch": {}
    },
    "expert_utils.py": {
        "torch": {
            "index_select_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x, dim=0, index=self.nonpad_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.nonpad_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "self.dim_origin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fp16_utils/fp16_opt.py": {
        "torch": {}
    },
    "fp16_utils/fp16util.py": {
        "torch": {
            "Sequential_56": {
                "*args": {
                    "value": "tofp16()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_136": {
                "variable": {
                    "value": "master_params",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "master_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param.clone().float().detach() for param in model_params]",
                            "ListComp"
                        ],
                        [
                            "_flatten_dense_tensors([param.data for param in model_params]).float()",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(master_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_195": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_196": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "fp16_utils/loss_scaler.py": {
        "torch": {}
    },
    "legacy/transformer_langshare.py": {
        "torch": {
            "from_numpy_41": {
                "ndarray": {
                    "value": "values.astype(dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.W_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.W_K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.W_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.finishing_linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_183": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attention_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_228": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(Q, h, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(K, h, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(V, h, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask] * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_238": {
                "variable": {
                    "value": "batch_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, self.W_Q.weight + self.W_Q_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.W_Q.weight)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(Q, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K.transpose(1, 2).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "batch_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2).contiguous())",
                            "Call"
                        ],
                        [
                            "batch_A.masked_fill(mask == 0, -1e+18)",
                            "Call"
                        ],
                        [
                            "F.softmax(batch_A, dim=2)",
                            "Call"
                        ],
                        [
                            "batch_A.masked_fill(batch_A != batch_A, 0.0)",
                            "Call"
                        ],
                        [
                            "self.dropout(batch_A)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_252": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2).contiguous())",
                            "Call"
                        ],
                        [
                            "batch_A.masked_fill(mask == 0, -1e+18)",
                            "Call"
                        ],
                        [
                            "F.softmax(batch_A, dim=2)",
                            "Call"
                        ],
                        [
                            "batch_A.masked_fill(batch_A != batch_A, 0.0)",
                            "Call"
                        ],
                        [
                            "self.dropout(batch_A)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(z, self.W_V.weight + self.W_V_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(z, self.W_V.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.W_V.weight + self.W_V_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.W_V.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(z, self.W_V.weight + self.W_V_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(z, self.W_V.weight)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(V, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_256": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(C, h, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.W_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_271": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_272": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "relu_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.W_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_295": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_301": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_326": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_349": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_356": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_385": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_412": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_446": {
                "variable": {
                    "value": "self.pos_enc_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(pos_enc_block)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_450": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_561": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_func(self.affine, h_block, reconstruct_shape=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_188": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_Q.weight + self.W_Q_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_190": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_Q.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_261": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(batch_A, V)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(C, h, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "F.linear(C, self.finishing_linear_layer.weight + self.finishing_linear_layer_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(C, self.finishing_linear_layer.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.finishing_linear_layer.weight + self.finishing_linear_layer_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_263": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(batch_A, V)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(C, h, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "F.linear(C, self.finishing_linear_layer.weight + self.finishing_linear_layer_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(C, self.finishing_linear_layer.weight)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.finishing_linear_layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_278": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch * length, units)",
                            "Call"
                        ],
                        [
                            "pad_remover.remove(e)",
                            "Call"
                        ],
                        [
                            "func(e)",
                            "Call"
                        ],
                        [
                            "pad_remover.restore(e)",
                            "Call"
                        ],
                        [
                            "e.view(batch, length, out_units)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.act(F.linear(e, self.W_1.weight + self.W_1_share.weight)))",
                            "Call"
                        ],
                        [
                            "F.linear(e, self.W_2.weight + self.W_2_share.weight)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.act(F.linear(e, self.W_1.weight)))",
                            "Call"
                        ],
                        [
                            "F.linear(e, self.W_2.weight)",
                            "Call"
                        ],
                        [
                            "e + self.dropout1(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout2(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout1(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout_pos(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout2(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout3(sub)",
                            "BinOp"
                        ],
                        [
                            "layer(e, xx_mask, pad_remover)",
                            "Call"
                        ],
                        [
                            "self.ln(e)",
                            "Call"
                        ],
                        [
                            "layer(e, source, xy_mask, yy_mask, pad_remover)",
                            "Call"
                        ],
                        [
                            "self.ln(e)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_2.weight + self.W_2_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_281": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch * length, units)",
                            "Call"
                        ],
                        [
                            "pad_remover.remove(e)",
                            "Call"
                        ],
                        [
                            "func(e)",
                            "Call"
                        ],
                        [
                            "pad_remover.restore(e)",
                            "Call"
                        ],
                        [
                            "e.view(batch, length, out_units)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.act(F.linear(e, self.W_1.weight + self.W_1_share.weight)))",
                            "Call"
                        ],
                        [
                            "F.linear(e, self.W_2.weight + self.W_2_share.weight)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.act(F.linear(e, self.W_1.weight)))",
                            "Call"
                        ],
                        [
                            "F.linear(e, self.W_2.weight)",
                            "Call"
                        ],
                        [
                            "e + self.dropout1(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout2(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout1(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout_pos(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout2(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout3(sub)",
                            "BinOp"
                        ],
                        [
                            "layer(e, xx_mask, pad_remover)",
                            "Call"
                        ],
                        [
                            "self.ln(e)",
                            "Call"
                        ],
                        [
                            "layer(e, source, xy_mask, yy_mask, pad_remover)",
                            "Call"
                        ],
                        [
                            "self.ln(e)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_2.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_331": {
                "variable": {
                    "value": "self.pos_enc_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(pos_enc_block)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_342": {
                "variable": {
                    "value": "self.dropout_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_471": {
                "variable": {
                    "value": "self.embed_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_476": {
                "variable": {
                    "value": "self.affine_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(config.n_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_480": {
                "variable": {
                    "value": "self.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KLDivLoss_494": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_496": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "config.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_501": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_503": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(config.n_vocab)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_549": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_word.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.affine_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_571": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tdata.eq(self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_571": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_214": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_K.weight + self.W_K_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_216": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_K.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_218": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_V.weight + self.W_V_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_220": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_V.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_228": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, self.W_Q.weight + self.W_Q_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.W_Q.weight)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(Q, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_229": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, self.W_K.weight + self.W_K_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.W_K.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.W_K.weight + self.W_K_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.W_K.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(z, self.W_K.weight + self.W_K_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(z, self.W_K.weight)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(K, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_230": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(z, self.W_V.weight + self.W_V_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(z, self.W_V.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.W_V.weight + self.W_V_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.W_V.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(z, self.W_V.weight + self.W_V_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(z, self.W_V.weight)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(V, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_256": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(batch_A, V)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(C, h, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "F.linear(C, self.finishing_linear_layer.weight + self.finishing_linear_layer_share.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(C, self.finishing_linear_layer.weight)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_195": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_K.weight + self.W_K_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_197": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_K.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_199": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_V.weight + self.W_V_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_201": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_V.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_204": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_K.weight + self.W_K_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_206": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_K.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_208": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_V.weight + self.W_V_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_210": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_V.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_277": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch * length, units)",
                            "Call"
                        ],
                        [
                            "pad_remover.remove(e)",
                            "Call"
                        ],
                        [
                            "func(e)",
                            "Call"
                        ],
                        [
                            "pad_remover.restore(e)",
                            "Call"
                        ],
                        [
                            "e.view(batch, length, out_units)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.act(F.linear(e, self.W_1.weight + self.W_1_share.weight)))",
                            "Call"
                        ],
                        [
                            "F.linear(e, self.W_2.weight + self.W_2_share.weight)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.act(F.linear(e, self.W_1.weight)))",
                            "Call"
                        ],
                        [
                            "F.linear(e, self.W_2.weight)",
                            "Call"
                        ],
                        [
                            "e + self.dropout1(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout2(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout1(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout_pos(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout2(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout3(sub)",
                            "BinOp"
                        ],
                        [
                            "layer(e, xx_mask, pad_remover)",
                            "Call"
                        ],
                        [
                            "self.ln(e)",
                            "Call"
                        ],
                        [
                            "layer(e, source, xy_mask, yy_mask, pad_remover)",
                            "Call"
                        ],
                        [
                            "self.ln(e)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_1.weight + self.W_1_share.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_280": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch * length, units)",
                            "Call"
                        ],
                        [
                            "pad_remover.remove(e)",
                            "Call"
                        ],
                        [
                            "func(e)",
                            "Call"
                        ],
                        [
                            "pad_remover.restore(e)",
                            "Call"
                        ],
                        [
                            "e.view(batch, length, out_units)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.act(F.linear(e, self.W_1.weight + self.W_1_share.weight)))",
                            "Call"
                        ],
                        [
                            "F.linear(e, self.W_2.weight + self.W_2_share.weight)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.act(F.linear(e, self.W_1.weight)))",
                            "Call"
                        ],
                        [
                            "F.linear(e, self.W_2.weight)",
                            "Call"
                        ],
                        [
                            "e + self.dropout1(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout2(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout1(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout_pos(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout2(sub)",
                            "BinOp"
                        ],
                        [
                            "e + self.dropout3(sub)",
                            "BinOp"
                        ],
                        [
                            "layer(e, xx_mask, pad_remover)",
                            "Call"
                        ],
                        [
                            "self.ln(e)",
                            "Call"
                        ],
                        [
                            "layer(e, source, xy_mask, yy_mask, pad_remover)",
                            "Call"
                        ],
                        [
                            "self.ln(e)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/multitasknmt.py": {
        "torch": {
            "nonzero_14": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_[0][:, 1] == lang_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_26": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_[:, 1] == lang_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "index_select_17": {
                "variable": {
                    "value": "x_block",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(input_[0][:, 1] == lang_id)",
                            "Call"
                        ],
                        [
                            "index[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nonzero(input_[:, 1] == lang_id)",
                            "Call"
                        ],
                        [
                            "index[:, 0]",
                            "Subscript"
                        ],
                        [
                            "index1.data.tolist() + index2.data.tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_18": {
                "variable": {
                    "value": "y_in_block",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(input_[0][:, 1] == lang_id)",
                            "Call"
                        ],
                        [
                            "index[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nonzero(input_[:, 1] == lang_id)",
                            "Call"
                        ],
                        [
                            "index[:, 0]",
                            "Subscript"
                        ],
                        [
                            "index1.data.tolist() + index2.data.tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_19": {
                "variable": {
                    "value": "y_out_block",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(input_[0][:, 1] == lang_id)",
                            "Call"
                        ],
                        [
                            "index[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nonzero(input_[:, 1] == lang_id)",
                            "Call"
                        ],
                        [
                            "index[:, 0]",
                            "Subscript"
                        ],
                        [
                            "index1.data.tolist() + index2.data.tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_29": {
                "variable": {
                    "value": "x_block",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(input_[0][:, 1] == lang_id)",
                            "Call"
                        ],
                        [
                            "index[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nonzero(input_[:, 1] == lang_id)",
                            "Call"
                        ],
                        [
                            "index[:, 0]",
                            "Subscript"
                        ],
                        [
                            "index1.data.tolist() + index2.data.tolist()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/transformer.py": {
        "torch": {
            "from_numpy_41": {
                "ndarray": {
                    "value": "values.astype(dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.W_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.W_K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.W_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.finishing_linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_182": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attention_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(Q, h, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(K, h, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(V, h, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask] * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_212": {
                "variable": {
                    "value": "batch_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_Q(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(Q, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K.transpose(1, 2).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_216": {
                "variable": {
                    "value": "batch_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2).contiguous())",
                            "Call"
                        ],
                        [
                            "batch_A.masked_fill(~mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "F.softmax(batch_A, dim=2)",
                            "Call"
                        ],
                        [
                            "batch_A.masked_fill(batch_A != batch_A, 0.0)",
                            "Call"
                        ],
                        [
                            "self.dropout(batch_A)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_226": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Q, K.transpose(1, 2).contiguous())",
                            "Call"
                        ],
                        [
                            "batch_A.masked_fill(~mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "F.softmax(batch_A, dim=2)",
                            "Call"
                        ],
                        [
                            "batch_A.masked_fill(batch_A != batch_A, 0.0)",
                            "Call"
                        ],
                        [
                            "self.dropout(batch_A)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.chunk(V, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_230": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(C, h, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.W_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_242": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_243": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "relu_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_244": {
                "variable": {
                    "value": "self.W_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_262": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_268": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_293": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_316": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_323": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_352": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_379": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_413": {
                "variable": {
                    "value": "self.pos_enc_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(pos_enc_block)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_415": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_532": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_func(self.affine, h_block, reconstruct_shape=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_298": {
                "variable": {
                    "value": "self.pos_enc_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(pos_enc_block)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_309": {
                "variable": {
                    "value": "self.dropout_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_prepostprocess_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_436": {
                "variable": {
                    "value": "self.embed_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_440": {
                "variable": {
                    "value": "self.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_451": {
                "variable": {
                    "value": "self.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KLDivLoss_465": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_467": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "config.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_472": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_474": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(config.n_vocab)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_520": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_word.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.affine_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_542": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tdata.eq(self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_542": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "chunk_202": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_Q(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(Q, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_203": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.chunk(K, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_204": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.chunk(V, h, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_230": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(batch_A, V)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(C, h, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "self.finishing_linear_layer(C)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimizer/noam.py": {
        "torch": {
            "Adam_16": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.optimizer_adam_beta1, config.optimizer_adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.optimizer_adam_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "optimizer/yogi.py": {
        "torch": {
            "zeros_like_51": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "search_strategy.py": {
        "torch": {
            "topk_86": {
                "variable": {
                    "value": "(total_topk_score, argtopk)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "total_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_score",
                            "variable"
                        ],
                        [
                            "where(Variable(is_end, requires_grad=False), Variable(total_score[:, None] + bias, requires_grad=False), Variable(normalized_total_score, requires_grad=False))",
                            "Call"
                        ],
                        [
                            "total_score.data",
                            "Attribute"
                        ],
                        [
                            "total_score.view((prev_full // prev_k, prev_k * k))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs.shape[0] // batchsize",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_97": {
                "variable": {
                    "value": "xss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([xss[i] for i in argtopk])",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "x_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xss[i] for i in argtopk]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_100": {
                "variable": {
                    "value": "zss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([zss[i] for i in argtopk])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "z_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zss[i] for i in argtopk]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(outs, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([outs[i] for i in argtopk])",
                            "Call"
                        ],
                        [
                            "torch.cat([outs, total_topk[:, None]], dim=1).type(utils.LONG_TYPE)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([[preprocess.Vocab_Pad.BOS]] * batchsize * self.k).type(utils.LONG_TYPE)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outs[i] for i in argtopk]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outs, total_topk[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "topk_155": {
                "variable": {
                    "value": "(topk_score, topk)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(log_prob_tail, dim=1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_195": {
                "variable": {
                    "value": "(_, ys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "y_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_block.detach(), ys[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_55": {
                "input": {
                    "value": "outs == eos_id",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_74": {
                "input": {
                    "value": "total_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_score",
                            "variable"
                        ],
                        [
                            "where(Variable(is_end, requires_grad=False), Variable(total_score[:, None] + bias, requires_grad=False), Variable(normalized_total_score, requires_grad=False))",
                            "Call"
                        ],
                        [
                            "total_score.data",
                            "Attribute"
                        ],
                        [
                            "total_score.view((prev_full // prev_k, prev_k * k))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_166": {
                "input": {
                    "value": "total_score < 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_156": {
                "input": {
                    "value": "topk_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_155": {
                "input": {
                    "value": "log_prob_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_94": {
                "start": {
                    "value": "prev_full // prev_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_169": {
                "input": {
                    "value": "outs == preprocess.Vocab_Pad.EOS",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "arange_91": {
                "start": {
                    "value": "prev_full // prev_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "load_406": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.best_model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_60": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_183": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_186": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_216": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ],
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.optimizer_adam_beta1, args.optimizer_adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optimizer_adam_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_221": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NoamAdamTrainer(model, args)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params, lr=args.learning_rate, betas=(args.optimizer_adam_beta1, args.optimizer_adam_beta2), eps=args.optimizer_adam_epsilon)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16}, verbose=False)",
                            "Call"
                        ],
                        [
                            "Yogi(params, lr=args.learning_rate, betas=(args.optimizer_adam_beta1, args.optimizer_adam_beta2), eps=args.optimizer_adam_epsilon)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_254": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_233": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NoamAdamTrainer(model, args)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params, lr=args.learning_rate, betas=(args.optimizer_adam_beta1, args.optimizer_adam_beta2), eps=args.optimizer_adam_epsilon)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16}, verbose=False)",
                            "Call"
                        ],
                        [
                            "Yogi(params, lr=args.learning_rate, betas=(args.optimizer_adam_beta1, args.optimizer_adam_beta2), eps=args.optimizer_adam_epsilon)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "translate.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.best_model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "ignore_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_40": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.data.cpu().tolist()[0]",
                            "Subscript"
                        ],
                        [
                            "x.data.cpu().tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_53": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.data.cpu().tolist()[0]",
                            "Subscript"
                        ],
                        [
                            "x.data.cpu().tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_55": {
                "input": {
                    "value": "(pred == t).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "(pred.data == t).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "numel_45": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.elapsed_time()",
                            "Call"
                        ],
                        [
                            "self.elapsed_time()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}