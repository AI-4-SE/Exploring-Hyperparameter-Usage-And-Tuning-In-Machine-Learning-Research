{
    "dataset.py": {
        "torch": {
            "tensor_184": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pts.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "*size": {
                    "value": "(num_invdepth_2, h, w, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "module/basic.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_42": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_65": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "out_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "[pad, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, residual)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.circ_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_113": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "[pad, pad, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, residual)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.circ_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_134": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, residual)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm3d_45": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, residual)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm3d_68": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, residual)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_92": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, residual)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm3d_117": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.circ_pad, mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, residual)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "module/network.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "layers + [Conv2D(CH, CH, 3, 1, d, dilation=d) for _ in range(2)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_41": {
                "variable": {
                    "value": "sweep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sweep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.grid_sample(feature, grid[d, ...].unsqueeze(0), align_corners=True) for d in range(0, num_invdepth)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(sweep, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_66": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "convs + [Conv3D(2 * CH, 4 * CH, 3, 2, 1), Conv3D(4 * CH, 4 * CH, 3, 1, 1), Conv3D(4 * CH, 4 * CH, 3, 1, 1)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_109": {
                "variable": {
                    "value": "self.disps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.opts.num_invdepth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "spherical_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.spherical_sweep(feats[i], grids[i]) for i in range(len(imgs))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_114": {
                "variable": {
                    "value": "spherical_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "spherical_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spherical_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.spherical_sweep(feats[i], grids[i]) for i in range(len(imgs))], 1).permute([1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spherical_feats, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv5(c)",
                            "Call"
                        ],
                        [
                            "self.cost_computes(spherical_feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(costs.squeeze(1), scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(costs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_125": {
                "variable": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(costs, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.disps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_126": {
                "variable": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(prob, self.disps)",
                            "Call"
                        ],
                        [
                            "torch.sum(disp, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_120": {
                "variable": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "costs.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_123": {
                "variable": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv5(c)",
                            "Call"
                        ],
                        [
                            "self.cost_computes(spherical_feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(costs.squeeze(1), scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(costs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_39": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid[d, ...].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "run_test_omnimvs.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "dbloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(opts.dbname, opts.data_opts, db_root=opts.db_root)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "snapshot",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opts.snapshot_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "-torch.log(prob + EPS) * prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "prob + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/array_utils.py": {
        "torch": {
            "Tensor_51": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_11": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "atan2_15": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "asin_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "acos_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_31": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "arr_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/common.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/geometry.py": {
        "torch": {
            "Tensor_51": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_52": {
                "variable": {
                    "value": "tr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(R).to(P.device)",
                            "Call"
                        ],
                        [
                            "np.matmul(R2, R1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/image.py": {
        "torch": {
            "tensor_96": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "toNumpy(I)",
                            "Call"
                        ],
                        [
                            "I.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I).float().squeeze().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "I.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_96": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_97": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_100": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "toNumpy(I)",
                            "Call"
                        ],
                        [
                            "I.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I).float().squeeze().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "I.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(grid).squeeze().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/ocam.py": {
        "torch": {}
    }
}