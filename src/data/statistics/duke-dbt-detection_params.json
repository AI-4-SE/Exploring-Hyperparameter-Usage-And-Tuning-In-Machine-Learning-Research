{
    "train.py": {
        "sklearn": {
            "ParameterGrid_37": {
                "param_grid": {
                    "value": "hparams_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'block_config': [(1, 3, 2, 6, 4), (2, 6, 4, 12, 8)], 'num_init_features': [8, 16], 'growth_rate': [8, 16], 'bn_size': [2, 4]}",
                            "Dict"
                        ]
                    ]
                }
            },
            "ParameterGrid_49": {
                "param_grid": {
                    "value": "loss_params_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'loss': ['CE', 'weighted-CE'], 'alpha': [0.25, 0.5, 1.0]}, {'loss': ['focal'], 'alpha': [0.25, 0.5, 1.0], 'gamma': [0.5, 1.0, 2.0]}, {'loss': ['reduced-focal'], 'alpha': [0.25, 0.5, 1.0], 'gamma': [0.5, 1.0, 2.0], 'reduce_th': [0.5]}]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cpu' if not torch.cuda.is_available() else args.device",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "loader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TomoBatchSampler(batch_size=args.batch_size, data_frame=dataset_train.data_frame)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "loader_valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "yolo.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_108": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "yolo.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(get_artifact_uri(), 'yolo.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__117": {
                "parameters": {
                    "value": "yolo.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "from_numpy_155": {
                "variable": {
                    "value": "img_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "imread(image_path)",
                            "Call"
                        ],
                        [
                            "self._imread(image_path, flip='R' in view.upper())",
                            "Call"
                        ],
                        [
                            "img.astype(np.float32) / np.max(img)",
                            "BinOp"
                        ],
                        [
                            "img[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "lbl_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._boxes2label(boxes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dense_yolo.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(in_channels=img_channels, out_channels=num_init_features, kernel_size=5, padding=2, bias=False)), ('norm0', nn.BatchNorm2d(num_features=num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=2, stride=2))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "variable": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, [0]].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, [1, 2]].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "box",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, [3, 4]].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj, loc, box)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "img_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "from_numpy_115": {
                "variable": {
                    "value": "batch_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_46": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_35": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_40": {
                "variable": {
                    "value": "yolo",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "yolo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DenseYOLO(img_channels=1, out_channels=Dataset.out_channels, **config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(yolo)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cpu' if not torch.cuda.is_available() else args.device",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "where_35": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "y_true == 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(y_true) * self.pos_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(y_true) * (1.0 - self.pos_weight)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_pred, self.eps, 1.0)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_pred, self.eps, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_41": {
                "variable": {
                    "value": "bce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_pred, self.eps, 1.0)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_pred, self.eps, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(y_true == 1.0, torch.ones_like(y_true) * self.pos_weight, torch.ones_like(y_true) * (1.0 - self.pos_weight))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_60": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_pred, self.eps, 1.0)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_pred, self.eps, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_62": {
                "variable": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy(y_pred, y_true, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "where_63": {
                "variable": {
                    "value": "th_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pt < self.reduce_th",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(pt)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "((1 - pt) / (1 - self.reduce_th)) ** self.gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_80": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target[:, 0] == 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "target[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(target[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "input_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_y, input_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "input_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_h, input_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_95": {
                "variable": {
                    "value": "loss_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_offset.view(input_offset.size()[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_offset.view(target_offset.size()[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_97": {
                "variable": {
                    "value": "y_pred_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "y_true_box == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(y_pred_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred_box",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_box.view(input_box.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.where(y_true_box == 0.0, torch.zeros_like(y_pred_box), y_pred_box)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_100": {
                "variable": {
                    "value": "loss_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_box",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_box.view(input_box.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.where(y_true_box == 0.0, torch.zeros_like(y_pred_box), y_pred_box)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true_box",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_box.view(target_box.size()[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_61": {
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_pred, self.eps, 1.0)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_pred, self.eps, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_65": {
                "input": {
                    "value": "pt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(log_pt)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_69": {
                "input": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_81": {
                "input": {
                    "value": "target[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(target[:, 0] == 1.0, target[:, 0], torch.zeros_like(target[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_98": {
                "input": {
                    "value": "y_pred_box",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_box.view(input_box.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.where(y_true_box == 0.0, torch.zeros_like(y_pred_box), y_pred_box)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_101": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(target[:, 0] == 1.0, target[:, 0], torch.zeros_like(target[:, 0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_37": {
                "input": {
                    "value": "y_true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_38": {
                "input": {
                    "value": "y_true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sampler.py": {
        "torch": {}
    }
}