{
    "noge/data_loaders.py": {
        "sklearn": {
            "train_test_split_172": {
                "variable": {
                    "value": "(graphs_train, graphs_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "graphs",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_size",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_176": {
                "variable": {
                    "value": "(graphs_train, graphs_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "graphs_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_106": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetSampler(dataset, seed=seed, num_samples=num_samples)",
                            "Call"
                        ],
                        [
                            "BalancedInfiniteRandomSampler(dataset, seed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "noge/preprocessors/input_meas.py": {
        "sklearn": {
            "MinMaxScaler_53": {
                "variable": {
                    "value": "self.meas_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "feature_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_range",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MinMaxScaler_67": {
                "variable": {
                    "value": "self.meas_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "feature_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_range",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_70": {
                "variable": {
                    "value": "self.meas_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PowerTransformer_72": {
                "variable": {
                    "value": "self.meas_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "method": {
                    "value": "box-cox",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FunctionTransformer_74": {
                "variable": {
                    "value": "self.meas_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "inverse_func": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_102": {
                "ndarray": {
                    "value": "meas_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meas[:, self._meas_idx]",
                            "Subscript"
                        ],
                        [
                            "self.meas_scaler.transform(meas_t)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "noge/preprocessors/target_preprocessor.py": {
        "sklearn": {
            "StandardScaler_27": {
                "variable": {
                    "value": "self.target_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "with_mean": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PowerTransformer_29": {
                "variable": {
                    "value": "self.target_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "method": {
                    "value": "box-cox",
                    "type": "str",
                    "possible_values": []
                },
                "standardize": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FunctionTransformer_31": {
                "variable": {
                    "value": "self.target_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FunctionTransformer_38": {
                "variable": {
                    "value": "self.target_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda x: (x - target.mid) / target.range",
                            "Lambda"
                        ]
                    ]
                },
                "inverse_func": {
                    "value": "inverse_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda x: x * target.range + target.mid",
                            "Lambda"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_81": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_scaler.transform(x)",
                            "Call"
                        ],
                        [
                            "xt.reshape(B, T, d)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.reshape(B, T, d)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_scaler.inverse_transform(p)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).to(prediction.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "noge/agent.py": {
        "torch": {
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "noge/data_types.py": {
        "torch": {}
    },
    "noge/evaluation.py": {
        "torch": {
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "noge/network.py": {
        "torch": {
            "mean_30": {
                "variable": {
                    "value": "z_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[visited_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "z_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "z_ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[z_m, z_g, z_t, z_c]",
                            "List"
                        ],
                        [
                            "[z_m, z_t, z_c]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "z_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[frontier]",
                            "Subscript"
                        ],
                        [
                            "[z[a].unsqueeze(0) for (z, a) in zip(Z_list, actions)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(z_f)",
                            "Call"
                        ],
                        [
                            "z_f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "z_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[v_t].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "[z[go.visited_seq[-1]].unsqueeze(0) for (z, go) in zip(Z_list, graph_obses)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(z_t)",
                            "Call"
                        ],
                        [
                            "z_t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_143": {
                "variable": {
                    "value": "z_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(Z_C, 0).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "self._aggregate_nodes(z, graph_obs.visited_seq)",
                            "Call"
                        ],
                        [
                            "[self._aggregate_nodes(Z, go.visited_seq) for (Z, go) in zip(Z_list, graph_obses)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(z_c)",
                            "Call"
                        ],
                        [
                            "z_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_174": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_f, z_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_208": {
                "variable": {
                    "value": "goal_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_164": {
                "variable": {
                    "value": "self.f_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_166": {
                "variable": {
                    "value": "self.f_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "noge/neural/dfp_loss.py": {
        "torch": {
            "mse_loss_27": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction.view(B, T, D)",
                            "Call"
                        ],
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "noge/neural/gcn.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hidden_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_25": {
                "variable": {
                    "value": "self._edge_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_edges,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_layer(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "layer(x, edge_index, edge_weight=edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_layer(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "layer(x, edge_index, edge_weight=edge_weight)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "noge/neural/mlp.py": {
        "torch": {
            "ModuleDict_11": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'relu': nn.ReLU(), 'lrelu': nn.LeakyReLU(alpha), 'identity': nn.Identity()}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_13": {
                "negative_slope": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(dims[:-1], dims[1:])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(dims[:-1], dims[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_22": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "noge/policies/dfp_policy.py": {
        "torch": {
            "from_numpy_53": {
                "variable": {
                    "value": "goal",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "partial_obs['goal']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "variable": {
                    "value": "goal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "noge/policies/q_policy.py": {
        "torch": {
            "from_numpy_47": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "noge/trainers/base_trainer.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "noge/trainers/dfp_trainer.py": {
        "torch": {
            "from_numpy_88": {
                "variable": {
                    "value": "goals",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch.goals",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch.actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "noge/trainers/dqn_trainer.py": {
        "torch": {
            "from_numpy_27": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch.actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch.rewards",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "q_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(q_next)",
                            "Call"
                        ],
                        [
                            "train_batch.mask * q_next",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_dfp.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_147": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_dqn.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_124": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "xlog/utils.py": {
        "torch": {
            "load_56": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_36": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), **kwargs}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}