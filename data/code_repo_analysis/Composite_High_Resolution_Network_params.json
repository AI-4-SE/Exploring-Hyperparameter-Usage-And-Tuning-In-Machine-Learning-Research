{
    "src/config.py": {
        "tensorflow": {}
    },
    "src/model/dcan.py": {
        "tensorflow": {
            "get_variable_28": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_value",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_53": {
                "variable": {
                    "value": "obj_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(obj_true, axis=-1)",
                            "Call"
                        ],
                        [
                            "proc_truemap(obj_true, 'obj')",
                            "Call"
                        ],
                        [
                            "colorize(obj_true[..., 0], cmap='viridis')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "cnt_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnt_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(cnt_true, axis=-1)",
                            "Call"
                        ],
                        [
                            "proc_truemap(cnt_true, 'cnt')",
                            "Call"
                        ],
                        [
                            "colorize(cnt_true[..., 0], cmap='viridis')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_gpu_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap-%s' % type_name)",
                            "Call"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_47": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap-%s' % type_name)",
                            "Call"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'truemap-%s' % type_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_48": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.squeeze(true)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_65": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_92": {
                "variable": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv6_1', p5, 1024, 7, padding='same', use_bias=True, strides=1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(d6, rate=0.5, seed=5, training=is_training)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv6_2', d6, 1024, 1, padding='same', use_bias=True, strides=1, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_current_tower_context().is_training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "concat_122": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obj_prob, cnt_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_154": {
                "variable": {
                    "value": "overall_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overall_loss + wd_loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "overall_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_161": {
                "variable": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs, obj_pred, obj_true, cnt_pred, cnt_true]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_30": {
                "name": {
                    "value": "name + '-summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=init_value, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "aux_loss_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "aux_loss_dw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_162": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_174": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, obj_pred, obj_true, cnt_pred, cnt_true], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_48": {
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap-%s' % type_name)",
                            "Call"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "fused_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "fused_logit + logit",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_111": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'predmap-prob-fuse-%s' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft[..., 1], name='predmap-prob-fuse-%s' % name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_113": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fused_logit, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'predmap-%s' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "'%s_decoder' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_105": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize_op(feat_scale_dict[scale_lv], scale_lv, scale_lv, interp='bilinear', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Conv2D('upsample_%d' % idx, logit, self.nr_classes, 1, use_bias=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logit, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_137": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft_list[idx], one)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_bce, name='loss-bce-%s-us%d' % (type_name, idx))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_bce, name='loss-bce-%s-fused' % type_name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'loss-bce-%s-us%d' % (type_name, idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft_list[idx], one)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_bce, name='loss-bce-%s-us%d' % (type_name, idx))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_bce, name='loss-bce-%s-fused' % type_name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'loss-bce-%s-fused' % type_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_114": {
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(soft, axis=-1, name='predmap-%s' % name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(pred, tf.float32), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize_op(feat_scale_dict[scale_lv], scale_lv, scale_lv, interp='bilinear', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "Conv2D('upsample_%d' % idx, logit, self.nr_classes, 1, use_bias=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logit, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/dist.py": {
        "tensorflow": {
            "get_variable_34": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_value",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "variable": {
                    "value": "true_dst",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -1]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(true_dst, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_dst, name='truemap-dst')",
                            "Call"
                        ],
                        [
                            "colorize(true_dst[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_84": {
                "variable": {
                    "value": "true_dst",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -1]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(true_dst, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_dst, name='truemap-dst')",
                            "Call"
                        ],
                        [
                            "colorize(true_dst[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-dst",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_77": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_78": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-type",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_79": {
                "variable": {
                    "value": "one_type",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nr_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_92": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "logi_dst",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_dst', d0, 1, 1, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_dst, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_116": {
                "variable": {
                    "value": "pred_dst",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_dst', d0, 1, 1, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_dst, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-dst",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_129": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([soft_type, pred_dst], axis=-1)",
                            "Call"
                        ],
                        [
                            "pred_dst",
                            "variable"
                        ],
                        [
                            "tf.identity(predmap_coded, name='predmap-coded')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "loss_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_dst - true_dst",
                            "BinOp"
                        ],
                        [
                            "loss_mse * loss_mse",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss_mse, name='loss_mse')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_mse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_150": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + wd_loss",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_157": {
                "variable": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (184, 184), 'NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_165": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs, true_dst, pred_dst]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_36": {
                "name": {
                    "value": "name + '-summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=init_value, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_120": {
                "variable": {
                    "value": "logi_type",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_type', d0, self.nr_types, 1, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_type, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "soft_type",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_type', d0, self.nr_types, 1, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_type, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_123": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft_type, pred_dst]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "variable": {
                    "value": "loss_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft_type, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_type, name='loss-xentropy-class')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xentropy-class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_158": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (184, 184), 'NHWC')",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_166": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, true_dst, pred_dst], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_63": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l, shorcut]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_89": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/fcn8.py": {
        "tensorflow": {
            "get_variable_28": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_value",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_48": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_49": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_50": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_gpu_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_57": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_84": {
                "variable": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv6_1', p5, 4096, 7, padding='same', use_bias=True, strides=1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(d6, rate=0.5, seed=5, training=is_training)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv6_2', d6, 4096, 1, padding='same', use_bias=True, strides=1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(d6, rate=0.5, seed=5, training=is_training)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv6_3', d6, self.nr_classes, 1, padding='same', use_bias=True, strides=1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_current_tower_context().is_training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv6_1', p5, 4096, 7, padding='same', use_bias=True, strides=1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(d6, rate=0.5, seed=5, training=is_training)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv6_2', d6, 4096, 1, padding='same', use_bias=True, strides=1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(d6, rate=0.5, seed=5, training=is_training)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv6_3', d6, self.nr_classes, 1, padding='same', use_bias=True, strides=1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_current_tower_context().is_training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "add_n_91": {
                "variable": {
                    "value": "fuse1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[upsample1, score_pool4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_95": {
                "variable": {
                    "value": "fuse2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[upsample2, score_pool3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "variable": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fuse2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n([upsample2, score_pool3])",
                            "Call"
                        ],
                        [
                            "resize_op(fuse2, 8, 8, interp='bilinear', data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(fuse2, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_101": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft[..., 1], name='predmap-prob')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logi, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_104": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prob]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft, one)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_bce, name='loss-bce')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-bce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_124": {
                "variable": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_129": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs, pred, true]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_30": {
                "name": {
                    "value": "name + '-summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=init_value, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "image_125": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_131": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, pred, true], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_104": {
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(soft, axis=-1, name='predmap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(pred, tf.float32), axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(prob[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/graph.py": {
        "tensorflow": {
            "identity_845": {
                "variable": {
                    "value": "true_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_bicubic_846": {
                "variable": {
                    "value": "ture_0",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "true_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(true)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "u[0].shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "resize_bicubic_847": {
                "variable": {
                    "value": "ture_1",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "true_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(true)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "u[1].shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_851": {
                "variable": {
                    "value": "logi_p_0",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_p_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_u0_%s' % name, p_0, num, 1, use_bias=True, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_p_0, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_855": {
                "variable": {
                    "value": "logi_p_1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_p_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_u1_%s' % name, p_1, num, 1, use_bias=True, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_p_1, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_value",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "identity_197": {
                "variable": {
                    "value": "true_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -2:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_hv, name='truemap-hv')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-hv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_420": {
                "variable": {
                    "value": "true_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -2:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_pg, name='truemap-pg')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -2:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_pg, name='truemap-pg')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -2:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_pg, name='truemap-pg')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-pg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_423": {
                "variable": {
                    "value": "true_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_ng, name='truemap-ng')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_ng, name='truemap-ng')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_ng, name='truemap-ng')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-ng",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_667": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_668": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_669": {
                "variable": {
                    "value": "one_np",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_670": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_673": {
                "variable": {
                    "value": "true_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -2:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_pg, name='truemap-pg')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -2:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_pg, name='truemap-pg')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -2:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_pg, name='truemap-pg')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-pg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_676": {
                "variable": {
                    "value": "true_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_ng, name='truemap-ng')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_ng, name='truemap-ng')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_ng, name='truemap-ng')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-ng",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_887": {
                "variable": {
                    "value": "true_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -2:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_pg, name='truemap-pg')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -2:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_pg, name='truemap-pg')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -2:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_pg, name='truemap-pg')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-pg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_890": {
                "variable": {
                    "value": "true_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_ng, name='truemap-ng')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_ng, name='truemap-ng')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_ng, name='truemap-ng')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-ng",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_1160": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_1161": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_1162": {
                "variable": {
                    "value": "one_np",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1163": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_1166": {
                "variable": {
                    "value": "true_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(true_dist, name='truemap-dist')",
                            "Call"
                        ],
                        [
                            "colorize(true_dist[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_72": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk('group1', d1, [128, 128, 512], [1, 3, 1], 4, strides=2, freeze=freeze)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d2) if freeze else d2",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stop_gradient_75": {
                "input": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk('group2', d2, [256, 256, 1024], [1, 3, 1], 6, strides=2, freeze=freeze)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d3) if freeze else d3",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stop_gradient_78": {
                "input": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk('group3', d3, [512, 512, 2048], [1, 3, 1], 3, strides=2, freeze=freeze)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d4) if freeze else d4",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv_bot', d4, 1024, 1, padding='same')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_88": {
                "variable": {
                    "value": "u3_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[u3, i[-2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_96": {
                "variable": {
                    "value": "u2_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[u2, i[-3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_104": {
                "variable": {
                    "value": "u1_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[u1, i[-4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_115": {
                "variable": {
                    "value": "u3_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[u3, i[-2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "u2_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[u2, i[-3]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "u1_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[u1, i[-4]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_gpu_available_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_164": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_181": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_182": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-type",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_183": {
                "variable": {
                    "value": "one_type",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nr_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_186": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_type > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_187": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_188": {
                "variable": {
                    "value": "one_np",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.squeeze(true_np)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_191": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_192": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_193": {
                "variable": {
                    "value": "one_np",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_194": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_204": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(tf.concat([images, truemap_coded[..., :1]], -1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "variable": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', np, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_231": {
                "variable": {
                    "value": "soft_np",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', np, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_232": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_np[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_233": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_npp[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_237": {
                "variable": {
                    "value": "logi_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_hv', hv, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_hv, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_238": {
                "variable": {
                    "value": "prob_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_hv', hv, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_hv, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-prob-hv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_239": {
                "variable": {
                    "value": "pred_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_hv', hv, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_hv, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-hv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_274": {
                "variable": {
                    "value": "mh",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sobel_kernel(5)",
                            "Call"
                        ],
                        [
                            "tf.constant(mh, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mh, [5, 5, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_275": {
                "variable": {
                    "value": "mv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sobel_kernel(5)",
                            "Call"
                        ],
                        [
                            "tf.constant(mv, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mv, [5, 5, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "mh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sobel_kernel(5)",
                            "Call"
                        ],
                        [
                            "tf.constant(mh, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mh, [5, 5, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[5, 5, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "mv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sobel_kernel(5)",
                            "Call"
                        ],
                        [
                            "tf.constant(mv, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mv, [5, 5, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[5, 5, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_281": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l[..., h_ch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_282": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l[..., v_ch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_283": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(l[..., h_ch], axis=-1)",
                            "Call"
                        ],
                        [
                            "np.meshgrid(h_range, v_range)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "mh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sobel_kernel(5)",
                            "Call"
                        ],
                        [
                            "tf.constant(mh, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mh, [5, 5, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_284": {
                "variable": {
                    "value": "dv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(l[..., v_ch], axis=-1)",
                            "Call"
                        ],
                        [
                            "np.meshgrid(h_range, v_range)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "mv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sobel_kernel(5)",
                            "Call"
                        ],
                        [
                            "tf.constant(mv, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mv, [5, 5, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_285": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dh, dv]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_290": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss * loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_293": {
                "variable": {
                    "value": "focus",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[focus, focus]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_300": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_340": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "overall-loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_347": {
                "variable": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_376": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[viz[0], viz[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_377": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, true_h, true_v, true_np], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, pred_type, true_h, true_v, true_np, true_type], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz_1, viz_2], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, true_np, pred_np, true_dist, pred_dist], 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_390": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([images, truemap_coded[..., :1]], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_391": {
                "variable": {
                    "value": "truemap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "truemap_coded[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_400": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_401": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-type",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_402": {
                "variable": {
                    "value": "one_type",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nr_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_403": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_407": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_408": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-bnd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_409": {
                "variable": {
                    "value": "one_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_410": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_414": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_415": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_416": {
                "variable": {
                    "value": "one_np",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_417": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_430": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(tf.concat([images, truemap_coded[..., :1]], -1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_485": {
                "variable": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_486": {
                "variable": {
                    "value": "prob_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-prob-pg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_487": {
                "variable": {
                    "value": "pred_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-pg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_491": {
                "variable": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_492": {
                "variable": {
                    "value": "prob_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-prob-ng",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_493": {
                "variable": {
                    "value": "pred_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-ng",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_497": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pred_pg, pred_ng]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_504": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([pred_pg, pred_ng], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prob_np, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_class, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_bnd, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([pred_pg, pred_ng], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prob_np, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_class, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_bnd, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([pred_pg, pred_ng], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prob_np, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_class, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_bnd, predmap], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_509": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss * loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_515": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss * loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_520": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred - true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_521": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_526": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_531": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_535": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cosh(true - pred + 1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_536": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ssim_541": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "img1": {
                    "value": "tf.concat([true, true, true], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "img2": {
                    "value": "tf.concat([pred, pred, pred], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "identity_544": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_549": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.square(true - pred) / (0.2 * 0.2 * 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_551": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_634": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "overall-loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_654": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_655": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-type",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_656": {
                "variable": {
                    "value": "one_type",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nr_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_657": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_661": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_662": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-bnd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_663": {
                "variable": {
                    "value": "one_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_664": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_683": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(tf.concat([images, truemap_coded[..., :1]], -1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_716": {
                "variable": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_717": {
                "variable": {
                    "value": "pred_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logi_pg[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_718": {
                "variable": {
                    "value": "pred_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(logi_pg, name='predmap-pg')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(logi_pg[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pred_pg, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(pred_pg, name='predmap-pg')",
                            "Call"
                        ],
                        [
                            "tf.identity(logi_pg, name='predmap-pg')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_719": {
                "variable": {
                    "value": "pred_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(logi_pg, name='predmap-pg')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(logi_pg[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pred_pg, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(pred_pg, name='predmap-pg')",
                            "Call"
                        ],
                        [
                            "tf.identity(logi_pg, name='predmap-pg')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-pg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_720": {
                "variable": {
                    "value": "soft_npp",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_pg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_722": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_npp[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_723": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_npp[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_727": {
                "variable": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_728": {
                "variable": {
                    "value": "pred_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logi_ng[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_729": {
                "variable": {
                    "value": "pred_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(logi_ng, name='predmap-ng')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(logi_ng[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pred_ng, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(pred_ng, name='predmap-ng')",
                            "Call"
                        ],
                        [
                            "tf.identity(logi_ng, name='predmap-ng')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_730": {
                "variable": {
                    "value": "pred_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(logi_ng, name='predmap-ng')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(logi_ng[..., 0])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pred_ng, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(pred_ng, name='predmap-ng')",
                            "Call"
                        ],
                        [
                            "tf.identity(logi_ng, name='predmap-ng')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-ng",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_731": {
                "variable": {
                    "value": "soft_npn",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_ng[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_735": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pred_pg, pred_ng]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_736": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prob_np, predmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_741": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([pred_pg, pred_ng], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prob_np, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_class, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_bnd, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([pred_pg, pred_ng], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prob_np, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_class, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_bnd, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([pred_pg, pred_ng], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prob_np, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_class, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_bnd, predmap], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_746": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss * loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_751": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred - true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_752": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ssim_757": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "img1": {
                    "value": "tf.concat([true, true, true], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "img2": {
                    "value": "tf.concat([pred, pred, pred], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "identity_760": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_765": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.square(true - pred) / (0.2 * 0.2 * 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_767": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_836": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "overall-loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_867": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_868": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-type",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_869": {
                "variable": {
                    "value": "one_type",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nr_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_870": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_type, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_type, name='truemap-type')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_type, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_type[..., 0] / self.nr_classes, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_874": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_875": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-bnd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_876": {
                "variable": {
                    "value": "one_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_877": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., -3]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_bnd, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_bnd, name='truemap-bnd')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(true_bnd[..., 0] / 3, tf.float32)",
                            "Call"
                        ],
                        [
                            "colorize(true_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_881": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_882": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_883": {
                "variable": {
                    "value": "one_np",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_884": {
                "variable": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_897": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(tf.concat([images, truemap_coded[..., :1]], -1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_952": {
                "variable": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_953": {
                "variable": {
                    "value": "prob_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-prob-pg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_954": {
                "variable": {
                    "value": "pred_pg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_pg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_pg', pg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_pg, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-pg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_958": {
                "variable": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_959": {
                "variable": {
                    "value": "prob_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-prob-ng",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_960": {
                "variable": {
                    "value": "pred_ng",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_ng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_ng', ng, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_ng, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-ng",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_968": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pred_pg, pred_ng]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_975": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([pred_pg, pred_ng], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prob_np, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_class, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_bnd, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([pred_pg, pred_ng], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prob_np, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_class, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_bnd, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([pred_pg, pred_ng], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([prob_np, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_class, predmap], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([soft_bnd, predmap], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_980": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss * loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_985": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred - true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_986": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ssim_991": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "img1": {
                    "value": "tf.concat([true, true, true], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "img2": {
                    "value": "tf.concat([pred, pred, pred], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "identity_994": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_999": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.square(true - pred) / (0.2 * 0.2 * 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_1001": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_1096": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "overall-loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_1103": {
                "variable": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1114": {
                "variable": {
                    "value": "viz_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs, pred_p, pred_n]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1115": {
                "variable": {
                    "value": "viz_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[true_p, true_n]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1144": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[viz_1, viz_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1145": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[viz[0], viz[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1146": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, true_h, true_v, true_np], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, pred_type, true_h, true_v, true_np, true_type], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz_1, viz_2], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, true_np, pred_np, true_dist, pred_dist], 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1173": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(tf.concat([images, truemap_coded[..., :1]], -1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1190": {
                "variable": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', np, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_1191": {
                "variable": {
                    "value": "soft_np",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', np, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_1192": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_np[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1193": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_npp[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_1194": {
                "variable": {
                    "value": "pred_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logi_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1195": {
                "variable": {
                    "value": "pred_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(pred_np, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_1199": {
                "variable": {
                    "value": "logi_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_dist', dist, 1, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_dist, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_1200": {
                "variable": {
                    "value": "prob_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_dist', dist, 1, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_dist, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-prob-dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_1201": {
                "variable": {
                    "value": "pred_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logi_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_dist', dist, 1, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_dist, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1204": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prob_np, pred_dist]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_1213": {
                "variable": {
                    "value": "loss_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse",
                            "Call"
                        ],
                        [
                            "loss_mse",
                            "Call"
                        ],
                        [
                            "loss_mse",
                            "Call"
                        ],
                        [
                            "loss_mse",
                            "Call"
                        ],
                        [
                            "pred_dist - true_dist",
                            "BinOp"
                        ],
                        [
                            "loss_mse * loss_mse",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss_mse, name='loss-mse')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_1218": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_bce, name='loss-bce')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-bce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_1222": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_mse + loss_bce",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "overall-loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_1229": {
                "variable": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1240": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs, true_np, pred_np, true_dist, pred_dist]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_60": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "u3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "u2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "u1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "u3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "u3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[u3, j[-3]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "u2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[u2, j[-2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "u1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_139": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[u1, j[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_159": {
                "name": {
                    "value": "name + '-summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=init_value, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_225": {
                "variable": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_226": {
                "variable": {
                    "value": "soft_class",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_244": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft_class, prob_np, pred_hv]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prob_np, pred_hv]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_327": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xentropy-class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_335": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_348": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_361": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs, pred_h, pred_v, pred_np, true_h, true_v, true_np]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_365": {
                "variable": {
                    "value": "pred_type",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "soft_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logi_class, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_class, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_class, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_class, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 1, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_367": {
                "variable": {
                    "value": "pred_type",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(soft_class, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred_type, [-1, 160, 160 * self.nr_types])",
                            "Call"
                        ],
                        [
                            "colorize(pred_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "tf.transpose(soft_class, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred_type, [-1, 80, 80 * self.nr_types])",
                            "Call"
                        ],
                        [
                            "colorize(pred_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 160, 160 * self.nr_types]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_368": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_type[..., 0] / self.nr_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_372": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs, pred_h, pred_v, pred_np, pred_type, true_h, true_v, true_np, true_type]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_378": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, true_h, true_v, true_np], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, pred_type, true_h, true_v, true_np, true_type], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz_1, viz_2], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, true_np, pred_np, true_dist, pred_dist], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_445": {
                "variable": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_446": {
                "variable": {
                    "value": "soft_class",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_453": {
                "variable": {
                    "value": "logi_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_454": {
                "variable": {
                    "value": "soft_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_472": {
                "variable": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', np, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_473": {
                "variable": {
                    "value": "soft_np",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', np, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_474": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_np[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_475": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_npp[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_499": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prob_np, predmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_501": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft_class, predmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_503": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft_bnd, predmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_607": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xentropy-class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_615": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_621": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xentropy-bound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_629": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-bound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_698": {
                "variable": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_699": {
                "variable": {
                    "value": "soft_class",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_706": {
                "variable": {
                    "value": "logi_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_707": {
                "variable": {
                    "value": "soft_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_738": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft_class, predmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_740": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft_bnd, predmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_809": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xentropy-class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_817": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_823": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xentropy-bound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_831": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-bound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_912": {
                "variable": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_913": {
                "variable": {
                    "value": "soft_class",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_tp', tp, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_class, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_924": {
                "variable": {
                    "value": "logi_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_925": {
                "variable": {
                    "value": "soft_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_bnd', bnd, 3, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_bnd, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_936": {
                "variable": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', np, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_937": {
                "variable": {
                    "value": "soft_np",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', npx, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_np', np, 2, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_np, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_938": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_np[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_939": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_npp[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(soft_np[..., 1], name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_970": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prob_np, predmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_972": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft_class, predmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_974": {
                "variable": {
                    "value": "predmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft_bnd, predmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1063": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xentropy-class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_1071": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-class",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_1076": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "categorical_crossentropy(soft_bnd, one_bnd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_1080": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xentropy-bound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_1091": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-bound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_1104": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1120": {
                "variable": {
                    "value": "viz_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[viz_1, pred_np]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1121": {
                "variable": {
                    "value": "viz_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[viz_2, true_np]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1124": {
                "variable": {
                    "value": "pred_type",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "soft_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logi_class, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_class, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_class, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_class, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 1, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1126": {
                "variable": {
                    "value": "pred_type",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(soft_class, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred_type, [-1, 160, 160 * self.nr_types])",
                            "Call"
                        ],
                        [
                            "colorize(pred_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ],
                        [
                            "tf.transpose(soft_class, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred_type, [-1, 80, 80 * self.nr_types])",
                            "Call"
                        ],
                        [
                            "colorize(pred_type, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 80, 80 * self.nr_types]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1127": {
                "variable": {
                    "value": "true_type",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_type[..., 0] / self.nr_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1130": {
                "variable": {
                    "value": "viz_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[viz_1, pred_type]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1131": {
                "variable": {
                    "value": "viz_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[viz_2, true_type]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1134": {
                "variable": {
                    "value": "pred_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "soft_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logi_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_bnd, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logi_bnd, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 1, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1136": {
                "variable": {
                    "value": "pred_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_bnd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(soft_bnd, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred_bnd, [-1, 80, 80 * 3])",
                            "Call"
                        ],
                        [
                            "colorize(pred_bnd, vmin=0, vmax=1, cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 80, 80 * 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1137": {
                "variable": {
                    "value": "true_bnd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_bnd[..., 0] / 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1140": {
                "variable": {
                    "value": "viz_1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[viz_1, pred_bnd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1141": {
                "variable": {
                    "value": "viz_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[viz_2, true_bnd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_1147": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, true_h, true_v, true_np], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, pred_type, true_h, true_v, true_np, true_type], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz_1, viz_2], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, true_np, pred_np, true_dist, pred_dist], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_1230": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (190, 190), 'NHWC')",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_1244": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, true_h, true_v, true_np], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, pred_h, pred_v, pred_np, pred_type, true_h, true_v, true_np, true_type], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz_1, viz_2], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([viz[0], viz[-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(viz, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([orig_imgs, true_np, pred_np, true_dist, pred_dist], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "'block' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "'blk/' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_188": {
                "input": {
                    "value": "true_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_type > 0, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true_np, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true_np, name='truemap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_299": {
                "input_tensor": {
                    "value": "focus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.stack([focus, focus], axis=-1)",
                            "Call"
                        ],
                        [
                            "focus",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_390": {
                "values": {
                    "value": "[images, truemap_coded[..., :1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_514": {
                "x": {
                    "value": "pred + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_530": {
                "x": {
                    "value": "true - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cosh_535": {
                "x": {
                    "value": "true - pred + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_541": {
                "values": {
                    "value": "[true, true, true]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_542": {
                "values": {
                    "value": "[pred, pred, pred]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_543": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_550": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_562": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_757": {
                "values": {
                    "value": "[true, true, true]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_758": {
                "values": {
                    "value": "[pred, pred, pred]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_759": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_766": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_778": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_991": {
                "values": {
                    "value": "[true, true, true]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_992": {
                "values": {
                    "value": "[pred, pred, pred]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_993": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_1000": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "pred_grad - true_grad",
                            "BinOp"
                        ],
                        [
                            "focus * (loss * loss)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(loss) / (tf.reduce_sum(focus) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(true + 1.0) - tf.log(pred + 1.0)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * (2 / (1 + tf.exp(-(true - pred))) - 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "(true - pred) * tf.tanh(true - pred)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.cosh(true - pred + 1e-12))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "loss + term_loss",
                            "BinOp"
                        ],
                        [
                            "pred - true",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss * loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.abs(pred - true)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.image.ssim(tf.concat([true, true, true], -1), tf.concat([pred, pred, pred], -1), 1.0)",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ],
                        [
                            "tf.exp(-tf.square(true - pred) / (0.2 * 0.2 * 2))",
                            "Call"
                        ],
                        [
                            "1 - tf.reduce_mean(loss)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_1016": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_1195": {
                "x": {
                    "value": "pred_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "colorize(prob_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "colorize(prob_np[..., 0], cmap='jet')",
                            "Call"
                        ],
                        [
                            "tf.argmax(soft_np, axis=-1, name='predmap-np')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(pred_np, tf.float32), axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(prob_np[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l if i == 0 else BNReLU('preact', l)",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], split=split, strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv3', x, ch[2], ksize[2], activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ],
                        [
                            "BNReLU('preact_bna', l)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], padding=padding, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], padding=padding, split=split)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_566": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_782": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_1024": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_315": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-bce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_549": {
                "x": {
                    "value": "true - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_570": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-msle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_765": {
                "x": {
                    "value": "true - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_786": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-ssim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_917": {
                "logits": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(0, count)",
                            "Call"
                        ],
                        [
                            "i in range(0, count)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_bnd))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_np))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_bnd))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_np))",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_929": {
                "logits": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(0, count)",
                            "Call"
                        ],
                        [
                            "i in range(0, count)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_bnd))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_np))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_bnd))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_np))",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_943": {
                "logits": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(0, count)",
                            "Call"
                        ],
                        [
                            "i in range(0, count)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_bnd))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_pg))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_np))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_bnd))",
                            "Call"
                        ],
                        [
                            "i in range(len(ds_np))",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "i if not self.input_norm else i / 255.0",
                            "IfExp"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_999": {
                "x": {
                    "value": "true - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_1032": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-ssim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_1079": {
                "input_tensor": {
                    "value": "categorical_crossentropy(ds_p_bnd[i], ds_bnd[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_319": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_525": {
                "x": {
                    "value": "-(true - pred)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_574": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xsigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_790": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mcc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_1040": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mcc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_578": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-xtanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_793": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-bce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_1042": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "categorical_crossentropy(soft_np, one_np)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_1046": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-bce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_582": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-logcosh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_799": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_1054": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_586": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-ssim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_590": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-mcc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_1045": {
                "input_tensor": {
                    "value": "categorical_crossentropy(ds_p_np[i], ds_np[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_593": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-bce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_597": {
                "variable": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "term_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mse(true_hv, pred_hv, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msge(true_hv, pred_hv, focus, name='loss-msge')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "term_loss + dice_loss(ds_p_bnd[i][..., type_id], ds_bnd[i][..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_msle(true_pg, pred_pg) + loss_msle(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-msle')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_xsigmoid(true_pg, pred_pg) + loss_xsigmoid(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xsigmoid')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "loss_xtanh(true_pg, pred_pg) + loss_xtanh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xtanh')",
                            "Call"
                        ],
                        [
                            "loss_logcosh(true_pg, pred_pg) + loss_logcosh(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-logcosh')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_np, one_np)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_bnd, one_bnd)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "categorical_crossentropy(soft_npp, one_np) + categorical_crossentropy(soft_npn, one_np)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_npp[..., 0], one_np[..., 0]) + dice_loss(soft_npp[..., 1], one_np[..., 1]) + dice_loss(soft_npn[..., 0], one_np[..., 0]) + dice_loss(soft_npn[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ],
                        [
                            "loss_mse(true_pg, pred_pg) + loss_mse(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "categorical_crossentropy(soft_class, one_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(term_loss, name='loss-xentropy-class')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mse')",
                            "Call"
                        ],
                        [
                            "loss_mae(true_pg, pred_pg) + loss_mae(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_bnd, one_bnd))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mae')",
                            "Call"
                        ],
                        [
                            "loss_ssim(true_pg, pred_pg) + loss_ssim(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-class')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-xentropy-bound')",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-ssim')",
                            "Call"
                        ],
                        [
                            "loss_mcc(true_pg, pred_pg) + loss_mcc(true_ng, pred_ng)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-mcc')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(categorical_crossentropy(soft_np, one_np))",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-bce')",
                            "Call"
                        ],
                        [
                            "dice_loss(soft_np[..., 0], one_np[..., 0]) + dice_loss(soft_np[..., 1], one_np[..., 1])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice-bound')",
                            "Call"
                        ],
                        [
                            "tf.identity(term_loss, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/hcnet.py": {
        "tensorflow": {
            "reshape_41": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_x, [batch, channel, height * width])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input_x, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, channel, height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_43": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_x, [batch, channel, height * width])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input_x, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('spatial_pool_conv', x, 1, 1, strides=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_mask, [batch, 1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(context_mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(context_mask, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 1, height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('spatial_pool_conv', x, 1, 1, strides=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_mask, [batch, 1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(context_mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(context_mask, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "variable": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('spatial_pool_conv', x, 1, 1, strides=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_mask, [batch, 1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(context_mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(context_mask, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_x, [batch, channel, height * width])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input_x, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('spatial_pool_conv', x, 1, 1, strides=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_mask, [batch, 1, height * width])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(context_mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(context_mask, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spatial_pool(x, channel)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_x, context_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context, [batch, channel, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, channel, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "out_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "Conv2D('channel_add_conv_1', out_x, int(channel / ratio), 1, strides=1)",
                            "Call"
                        ],
                        [
                            "LayerNorm('channel_add_layernorm', out_x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out_x)",
                            "Call"
                        ],
                        [
                            "Conv2D('channel_add_conv_2', out_x, channel, 1, strides=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_117": {
                "features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BNReLU('bnlast', l)",
                            "Call"
                        ],
                        [
                            "Conv2D('convshortcut', l, ch[2], 1, strides=strides)",
                            "Call"
                        ],
                        [
                            "l + x",
                            "BinOp"
                        ],
                        [
                            "Conv2D('convshortcut', l, ch[1], 1, strides=strides, activation=get_bn(False))",
                            "Call"
                        ],
                        [
                            "l + x",
                            "BinOp"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ],
                        [
                            "l",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_171": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feat, shorcut]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_201": {
                "variable": {
                    "value": "d11",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[i[-3], composite_connection('com_11', i[-2], 128, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_214": {
                "variable": {
                    "value": "d12_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d12, composite_connection('com_12', i[-1], 128, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_216": {
                "variable": {
                    "value": "d22_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d22, composite_connection('com_22', i[-1], 256, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_229": {
                "variable": {
                    "value": "d13_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d13, composite_connection('com_13', d22_res, 128, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_235": {
                "variable": {
                    "value": "d23_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d23, d12_down]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_242": {
                "variable": {
                    "value": "d33_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d22_down, d12_downdown]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_257": {
                "variable": {
                    "value": "d14_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d14, composite_connection('com_141', d23_res, 128, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_259": {
                "variable": {
                    "value": "d14_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d14_sum, composite_connection('com_142', d33_res, 128, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_266": {
                "variable": {
                    "value": "d24_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d24, d13_down]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_267": {
                "variable": {
                    "value": "d24_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d24_sum, composite_connection('com_24', d33_res, 256, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_275": {
                "variable": {
                    "value": "d34_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d34, d13_downdown]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_276": {
                "variable": {
                    "value": "d34_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[d34_sum, d23_down]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_300": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_value",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resize_bicubic_321": {
                "variable": {
                    "value": "sub_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "crop_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_op(orig_imgs, (6, 6), 'channels_last')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[int(self.train_mask_shape[0] / 4), int(self.train_mask_shape[1] / 4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_328": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_329": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_330": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nr_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_331": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_334": {
                "variable": {
                    "value": "one_binary",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[one[..., :1], tf.expand_dims(tf.reduce_sum(tf.gather(one, [1, 2, 3, 4], axis=-1), -1), axis=-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "binary_labels_one_hot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_337": {
                "variable": {
                    "value": "G1v23_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[one[..., :2], tf.expand_dims(tf.reduce_sum(tf.gather(one, [2, 3], axis=-1), -1), axis=-1), one[..., 4:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "G1v23_labels_one_hot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_339": {
                "variable": {
                    "value": "G12v3_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[one[..., :1], tf.expand_dims(tf.reduce_sum(tf.gather(one, [1, 2], axis=-1), -1), axis=-1), one[..., 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "G12v3_labels_one_hot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_453": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_454": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_455": {
                "variable": {
                    "value": "a3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_456": {
                "variable": {
                    "value": "a4",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param4",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_457": {
                "variable": {
                    "value": "a5",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param5",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_128": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk_basic('group1', d1, [128, 128], [3, 3], 4, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d2) if freeze else d2",
                            "IfExp"
                        ],
                        [
                            "res_blk('group1', d1, [128, 128, 512], [1, 3, 1], 4, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d2) if freeze else d2",
                            "IfExp"
                        ],
                        [
                            "d2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_131": {
                "input": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk_basic('group2', d2, [256, 256], [3, 3], 6, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d3) if freeze else d3",
                            "IfExp"
                        ],
                        [
                            "res_blk('group2', d2, [256, 256, 1024], [1, 3, 1], 6, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d3) if freeze else d3",
                            "IfExp"
                        ],
                        [
                            "d3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_134": {
                "input": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk_basic('group3', d3, [512, 512], [3, 3], 3, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d4) if freeze else d4",
                            "IfExp"
                        ],
                        [
                            "res_blk('group3', d3, [512, 512, 2048], [1, 3, 1], 3, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d4) if freeze else d4",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv_bot', d4, 1024, 1, padding='same')",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_147": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk_basic('group1', d1, [128, 128], [3, 3], 4, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d2) if freeze else d2",
                            "IfExp"
                        ],
                        [
                            "res_blk('group1', d1, [128, 128, 512], [1, 3, 1], 4, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d2) if freeze else d2",
                            "IfExp"
                        ],
                        [
                            "d2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_150": {
                "input": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk_basic('group2', d2, [256, 256], [3, 3], 6, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d3) if freeze else d3",
                            "IfExp"
                        ],
                        [
                            "res_blk('group2', d2, [256, 256, 1024], [1, 3, 1], 6, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d3) if freeze else d3",
                            "IfExp"
                        ],
                        [
                            "d3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_153": {
                "input": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk_basic('group3', d3, [512, 512], [3, 3], 3, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d4) if freeze else d4",
                            "IfExp"
                        ],
                        [
                            "res_blk('group3', d3, [512, 512, 2048], [1, 3, 1], 3, strides=2, freeze=freeze, gcb=gcb)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d4) if freeze else d4",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv_bot', d4, 1024, 1, padding='same')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "'head_fusion' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d, d2_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d, d3_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_205": {
                "variable": {
                    "value": "d11",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d11, img_fea_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_220": {
                "variable": {
                    "value": "d22_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d22_sum, img_fea_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "d33_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d33_sum, img_fea_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_gpu_available_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_307": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_347": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_446": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([soft, prob_np], axis=-1)",
                            "Call"
                        ],
                        [
                            "prob_np",
                            "variable"
                        ],
                        [
                            "tf.concat([predmap_coded, soft_reg], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.identity(predmap_coded, name='predmap-coded')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_450": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred - true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_302": {
                "name": {
                    "value": "name + '-summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=init_value, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_306": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_351": {
                "variable": {
                    "value": "i_10x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sub_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bicubic(crop_imgs, [int(self.train_mask_shape[0] / 4), int(self.train_mask_shape[1] / 4)])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_353": {
                "variable": {
                    "value": "i_40x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "crop_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_op(orig_imgs, (6, 6), 'channels_last')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_412": {
                "variable": {
                    "value": "logi_binary",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi_binary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_b', s_binary, self.nr_classes, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_binary, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_413": {
                "variable": {
                    "value": "soft_binary",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_binary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_b', s_binary, self.nr_classes, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_binary, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_426": {
                "variable": {
                    "value": "soft_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "soft_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_r', s_reg, 1, 1, use_bias=True, activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.transpose(soft_reg, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_429": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_binary[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_430": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft_binary[..., 1], name='predmap-prob')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft[..., 1:], axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(prob_np, name='predmap-prob')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_432": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "identity_433": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft_binary[..., 1], name='predmap-prob')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft[..., 1:], axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(prob_np, name='predmap-prob')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_436": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft, prob_np]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_441": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[predmap_coded, soft_reg]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_491": {
                "variable": {
                    "value": "coe",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 1.0, 5.0, 5.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_494": {
                "variable": {
                    "value": "loss_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft, one)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_ce, name='loss-ce')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-ce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_500": {
                "variable": {
                    "value": "loss_dice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_dice + dice_loss(soft[..., type_id], one[..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss_dice, name='loss-dice')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_524": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft_binary, one_binary)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_bce, name='loss-bce')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-bce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_531": {
                "variable": {
                    "value": "loss_dice_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_dice_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_dice_b + dice_loss(soft_binary[..., type_id], one_binary[..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss_dice_b, name='loss-dice-binary')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_548": {
                "variable": {
                    "value": "loss_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mae_loss(positive_map, soft_reg)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_reg, name='loss-reg-mae')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(1 / (a5 * a5) * loss_reg + tf.log(a5))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-reg-mae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l if i == 0 else BNReLU('preact', l)",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], split=split, strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv3', x, ch[2], ksize[2], activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "context_block('gcb', x, ch[2])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ],
                        [
                            "l",
                            "variable"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], activation=get_bn(True))",
                            "Call"
                        ],
                        [
                            "context_block('gcb', x, ch[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l if i == 0 else BNReLU('preact', l)",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], split=split, strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv3', x, ch[2], ksize[2], activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "context_block('gcb', x, ch[2])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ],
                        [
                            "l",
                            "variable"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], activation=get_bn(True))",
                            "Call"
                        ],
                        [
                            "context_block('gcb', x, ch[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "'block' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "'block' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_334": {
                "input": {
                    "value": "tf.reduce_sum(tf.gather(one, [1, 2, 3, 4], axis=-1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_337": {
                "input": {
                    "value": "tf.reduce_sum(tf.gather(one, [2, 3], axis=-1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_339": {
                "input": {
                    "value": "tf.reduce_sum(tf.gather(one, [1, 2], axis=-1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_383": {
                "variable": {
                    "value": "logi_1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "s_1_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_out_block('classify_1', s_1, self.nr_types - 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_384": {
                "variable": {
                    "value": "soft_1",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(s_1_final, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_390": {
                "variable": {
                    "value": "logi_2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "s_2_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_out_block('classify_2', s_2, self.nr_types - 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_391": {
                "variable": {
                    "value": "soft_2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(s_2_final, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_394": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_1_final, s_2_final]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_396": {
                "variable": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out', feat, channels, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_type', s, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(s, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_397": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out', feat, channels, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_type', s, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(s, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_402": {
                "variable": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s_1_final, s_2_final], 1)",
                            "Call"
                        ],
                        [
                            "head_fusion(s_head[0], s_head[1], s_head[2], name='_classify')",
                            "Call"
                        ],
                        [
                            "final_out_block('classify', s, self.nr_types)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_403": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out', feat, channels, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_out_type', s, self.nr_types, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(s, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_initializer_453": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_454": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_455": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_456": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_457": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_468": {
                "variable": {
                    "value": "loss_ce_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_ce_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft_1, G12v3_labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_ce_1, name='loss-ce-12v3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-ce-12v3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_475": {
                "variable": {
                    "value": "loss_dice_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_dice_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_dice_1 + dice_loss(soft_1[..., type_id], G12v3_labels[..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss_dice_1, name='loss-dice-12v3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-12v3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_480": {
                "variable": {
                    "value": "loss_ce_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_ce_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft_2, G1v23_labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_ce_2, name='loss-ce-1v23')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-ce-1v23",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_487": {
                "variable": {
                    "value": "loss_dice_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_dice_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_dice_2 + dice_loss(soft_2[..., type_id], G1v23_labels[..., type_id])",
                            "BinOp"
                        ],
                        [
                            "tf.identity(loss_dice_2, name='loss-dice-1v23')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-dice-1v23",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_515": {
                "variable": {
                    "value": "loss_classify",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 / (a1 * a1) * loss_classify + tf.log(a1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_516": {
                "variable": {
                    "value": "a1_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('param1', [1], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "param_classify",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_539": {
                "variable": {
                    "value": "loss_binary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 / (a4 * a4) * loss_binary + tf.log(a4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_540": {
                "variable": {
                    "value": "a4_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('param4', [1], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "param_binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_552": {
                "variable": {
                    "value": "loss_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 / (a5 * a5) * loss_reg + tf.log(a5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_553": {
                "variable": {
                    "value": "a5_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('param5', [1], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "param_regression",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_96": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l if i == 0 else BNReLU('preact', l)",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], split=split, strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv3', x, ch[2], ksize[2], activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "context_block('gcb', x, ch[2])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ],
                        [
                            "l",
                            "variable"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], activation=get_bn(True))",
                            "Call"
                        ],
                        [
                            "context_block('gcb', x, ch[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_115": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l if i == 0 else BNReLU('preact', l)",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], split=split, strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv3', x, ch[2], ksize[2], activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "context_block('gcb', x, ch[2])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ],
                        [
                            "l",
                            "variable"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], activation=get_bn(True))",
                            "Call"
                        ],
                        [
                            "context_block('gcb', x, ch[1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_334": {
                "input_tensor": {
                    "value": "tf.gather(one, [1, 2, 3, 4], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_337": {
                "input_tensor": {
                    "value": "tf.gather(one, [2, 3], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_339": {
                "input_tensor": {
                    "value": "tf.gather(one, [1, 2], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_416": {
                "a": {
                    "value": "logi_binary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out_b', s_binary, self.nr_classes, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi_binary, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_334": {
                "params": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(true, self.nr_types, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_337": {
                "params": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(true, self.nr_types, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_339": {
                "params": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(true, self.nr_types, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_515": {
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('param1', [1], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_539": {
                "x": {
                    "value": "a4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('param4', [1], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_552": {
                "x": {
                    "value": "a5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('param5', [1], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/micronet.py": {
        "tensorflow": {
            "get_variable_30": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_value",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_55": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_56": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nr_types if self.type_classification else self.nr_classes",
                    "type": "IfExp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_gpu_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_101": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[aux_out1, aux_out2, aux_out3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_158": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.cast(global_step, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_172": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(loss_list) + wd_loss",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "overall_cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_179": {
                "variable": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs] + colored_list",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_32": {
                "name": {
                    "value": "name + '-summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=init_value, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b1, b2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_89": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv1', main_in, ch, 3, padding='valid', use_bias=False, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', a, ch, 3, padding='valid', use_bias=True, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "MaxPooling('pool', a, 2, strides=2, padding='same')",
                            "Call"
                        ],
                        [
                            "Conv2DTranspose('up1', main_in, ch, 2, strides=(2, 2), padding='same', use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv1', a, ch, 3, padding='valid', use_bias=True, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', a, ch, 3, padding='valid', use_bias=True, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "Conv2DTranspose('up', main_in, ch, up_kernel, strides=up_strides, padding='same', use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv', a, self.nr_types if self.type_classification else self.nr_classes, 3, padding='valid', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(a, rate=0.5, seed=5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_current_tower_context().is_training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_130": {
                "variable": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out%d' % idx, sub_out, self.nr_types if self.type_classification else self.nr_classes, 3, padding='valid', use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out%d' % idx, sub_out, self.nr_types if self.type_classification else self.nr_classes, 3, padding='valid', use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft_list[0], prob_list[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_148": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_155": {
                "variable": {
                    "value": "aux_loss_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "aux_loss_dw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_162": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bce * pen_map",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_164": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(sub_soft, one)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_bce * pen_map)",
                            "Call"
                        ],
                        [
                            "loss_bce if idx == 0 else loss_bce * aux_loss_dw",
                            "IfExp"
                        ],
                        [
                            "tf.identity(loss_bce, name='loss-bce-%d' % idx)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'loss-bce-%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_180": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_186": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs] + colored_list, 2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "b5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_134": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "identity_135": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(soft[..., 1:], axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(prob_np, name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.identity(soft[..., 1], name='predmap-prob')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-prob-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_137": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_138": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(soft[..., 1:], axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(prob_np, name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.identity(soft[..., 1], name='predmap-prob')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_n_171": {
                "inputs": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_initializer_95": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_98": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_182": {
                "input": {
                    "value": "pen_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., -1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/segnet.py": {
        "tensorflow": {
            "get_variable_28": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_value",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_48": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_49": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_50": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_gpu_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_63": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(pool, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool_with_argmax(x, ksize, strides, padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pool, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "pool",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scatter_nd(ind_, pool_, shape=flat_output_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, shape=output_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_with_argmax_109": {
                "variable": {
                    "value": "(pool, argmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, kernel_size, kernel_size, 1]",
                            "List"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_111": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(pool, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool_with_argmax(x, ksize, strides, padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pool, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "pool",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_119": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_173": {
                "variable": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "us5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpool_with_argmax(us4, ind=p1_idx, name='unpool_5')",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_us5_1', us5, 64, 3, padding='same', strides=1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv_us5_2', us5, self.nr_classes, 1, padding='same', strides=1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(us5, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_175": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_176": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(soft[..., 1], name='predmap-prob')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_177": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logi, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_178": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prob]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(soft, one)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_bce, name='loss-bce')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss-bce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_198": {
                "variable": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_204": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs, pred, true]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_30": {
                "name": {
                    "value": "name + '-summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=init_value, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(pool)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_shape[0], input_shape[1] * ksize[1], input_shape[2] * ksize[2], input_shape[3]]",
                            "List"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_69": {
                "variable": {
                    "value": "flat_input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(pool), tf.int64)",
                            "Call"
                        ],
                        [
                            "pool.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "pool_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(pool, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool_with_argmax(x, ksize, strides, padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pool, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "pool",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "batch_range",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(output_shape[0], dtype=ind.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(b, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "ind_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(ind, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "ind_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, ind_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_79": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ind_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reshape(ind, [-1]), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([b, ind_], 1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "pool_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "flat_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[output_shape[0], output_shape[1] * output_shape[2] * output_shape[3]]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scatter_nd(ind_, pool_, shape=flat_output_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, shape=output_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_shape[0], input_shape[1] * ksize[1], input_shape[2] * ksize[2], input_shape[3]]",
                            "List"
                        ],
                        [
                            "tf.stack(output_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_199": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_206": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, pred, true], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_178": {
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(soft, axis=-1, name='predmap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(pred, tf.float32), axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(prob[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(pool, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool_with_argmax(x, ksize, strides, padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pool, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "pool",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_73": {
                "dtype": {
                    "value": "ind.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ind",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_75": {
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(ind) * batch_range",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.reshape(b, [-1]), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ind",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/unet.py": {
        "tensorflow": {
            "get_variable_66": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_value",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_89": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_90": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "truemap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_91": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nr_types if self.type_classification else self.nr_classes",
                    "type": "IfExp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truemap_coded[..., 1]",
                            "Subscript"
                        ],
                        [
                            "truemap_coded[..., 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(true, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(true, name='truemap')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true, axis=-1)",
                            "Call"
                        ],
                        [
                            "colorize(true[..., 0], cmap='jet')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_43": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk('group1', d1, [128, 128, 512], [1, 3, 1], 4, strides=2, freeze=freeze)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d2) if freeze else d2",
                            "IfExp"
                        ],
                        [
                            "encoder(i, freeze=False)",
                            "Call"
                        ],
                        [
                            "crop_op(d2, (8, 8))",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_46": {
                "input": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk('group2', d2, [256, 256, 1024], [1, 3, 1], 6, strides=2, freeze=freeze)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d3) if freeze else d3",
                            "IfExp"
                        ],
                        [
                            "encoder(i, freeze=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_49": {
                "input": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_blk('group3', d3, [512, 512, 2048], [1, 3, 1], 3, strides=2, freeze=freeze)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(d4) if freeze else d4",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv_bot', d4, 1024, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "encoder(i, freeze=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_gpu_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out', feat, self.nr_types if self.type_classification else self.nr_classes, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_142": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D('conv_out', feat, self.nr_types if self.type_classification else self.nr_classes, 1, use_bias=True, activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logi, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_155": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([soft, prob_np], axis=-1)",
                            "Call"
                        ],
                        [
                            "prob_np",
                            "variable"
                        ],
                        [
                            "tf.identity(predmap_coded, name='predmap-coded')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-coded",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_162": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_bce * pen_map",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss-bce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_172": {
                "variable": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (34, 34), 'channels_last')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_180": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[orig_imgs, pred, true, pen_map]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "name + '-summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=init_value, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_105": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feat, shorcut]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "identity_146": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(soft[..., 1:], axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(prob_np, name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.identity(soft[..., 1], name='predmap-prob')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predmap-prob-np",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "predmap_coded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[soft, prob_np]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_149": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "predmap-prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_150": {
                "variable": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(soft[..., 1:], axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(prob_np, name='predmap-prob-np')",
                            "Call"
                        ],
                        [
                            "tf.identity(soft[..., 1], name='predmap-prob')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prob_np, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "image_174": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "orig_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "tf.cast(orig_imgs, tf.uint8)",
                            "Call"
                        ],
                        [
                            "crop_op(orig_imgs, (34, 34), 'channels_last')",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_182": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([orig_imgs, pred, true, pen_map], 2)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "'block' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l if i == 0 else BNReLU('preact', l)",
                            "IfExp"
                        ],
                        [
                            "Conv2D('conv1', x, ch[0], ksize[0], activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv2', x, ch[1], ksize[1], split=split, strides=strides if i == 0 else 1, activation=BNReLU)",
                            "Call"
                        ],
                        [
                            "Conv2D('conv3', x, ch[2], ksize[2], activation=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x) if freeze else x",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/utils.py": {
        "tensorflow": {
            "convert_to_tensor_105": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "output.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_106": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / tf.reduce_sum(output, reduction_indices=len(output.get_shape()) - 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, epsilon, 1.0 - epsilon)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(output, tf.float32))",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(1e-07, output.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(target, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(output, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_140": {
                "variable": {
                    "value": "inse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "round_188": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_189": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(value - vmin) / (vmax - vmin)",
                            "BinOp"
                        ],
                        [
                            "tf.round(value * 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(colors, indices)",
                            "Call"
                        ],
                        [
                            "tf.cast(value * 255, tf.uint8)",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_194": {
                "variable": {
                    "value": "colors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "colors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "colormap(np.arange(256))[:, :3]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(colors, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_195": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "colors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "colormap(np.arange(256))[:, :3]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(colors, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value, np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_196": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_207": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_208": {
                "variable": {
                    "value": "min_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_211": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "(0, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, -1, -1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(iy, ix, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(iy, ix, cy, cx)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_221": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 0, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_222": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, cy * iy, cx * ix, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / tf.reduce_sum(output, reduction_indices=len(output.get_shape()) - 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, epsilon, 1.0 - epsilon)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(output, tf.float32))",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "len(output.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output * output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_143": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_176": {
                "variable": {
                    "value": "vmin",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(value - vmin) / (vmax - vmin)",
                            "BinOp"
                        ],
                        [
                            "tf.round(value * 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(colors, indices)",
                            "Call"
                        ],
                        [
                            "tf.cast(value * 255, tf.uint8)",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "vmin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vmin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(value, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vmin, [-1, 1, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_179": {
                "variable": {
                    "value": "vmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(value - vmin) / (vmax - vmin)",
                            "BinOp"
                        ],
                        [
                            "tf.round(value * 255)",
                            "Call"
                        ],
                        [
                            "tf.gather(colors, indices)",
                            "Call"
                        ],
                        [
                            "tf.cast(value * 255, tf.uint8)",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "vmax",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(value, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(vmax, [-1, 1, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_224": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x)[2:], tf.float32)",
                            "Call"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('float32'))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(x)[1:3], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x)[2:], tf.float32)",
                            "Call"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('float32'))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(x)[1:3], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "target * tf.log(output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "len(output.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_137": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.cast(target, tf.float32))",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_138": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / tf.reduce_sum(output, reduction_indices=len(output.get_shape()) - 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, epsilon, 1.0 - epsilon)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(output, tf.float32))",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / tf.reduce_sum(output, reduction_indices=len(output.get_shape()) - 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, epsilon, 1.0 - epsilon)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(output, tf.float32))",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_146": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.cast(target, tf.float32))",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_bicubic_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_bicubic_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_47": {
                "value": {
                    "value": "np.array([height_factor, width_factor]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bicubic_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x)[2:], tf.float32)",
                            "Call"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('float32'))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(x)[1:3], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_64": {
                "value": {
                    "value": "np.array([height_factor, width_factor]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bicubic_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x)[2:], tf.float32)",
                            "Call"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('float32'))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(x)[1:3], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_bilinear_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_bilinear_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x)[2:], tf.float32)",
                            "Call"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('float32'))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(x)[1:3], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x)[2:], tf.float32)",
                            "Call"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('float32'))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(x)[1:3], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x)[2:], tf.float32)",
                            "Call"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('float32'))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(x)[1:3], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x)[2:], tf.float32)",
                            "Call"
                        ],
                        [
                            "new_shape * tf.constant(np.array([height_factor, width_factor]).astype('float32'))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(x)[1:3], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(new_shape, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_107": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output / tf.reduce_sum(output, reduction_indices=len(output.get_shape()) - 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(output, epsilon, 1.0 - epsilon)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(output, tf.float32))",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, new_shape)",
                            "Call"
                        ],
                        [
                            "x[:, :, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "x[:, crop_t:-crop_b, crop_l:-crop_r]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "255 * (x - min_x) / (max_x - min_x)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, (0, 0, 0, 0), (1, -1, -1, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, channels))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(x, iy, ix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (iy, ix, cy, cx))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (2, 0, 3, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (1, cy * iy, cx * ix, 1))",
                            "Call"
                        ],
                        [
                            "resize_op(x, scale_y, scale_x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/opt/hover.py": {
        "tensorflow": {}
    },
    "src/opt/other.py": {
        "tensorflow": {}
    },
    "src/train.py": {
        "tensorflow": {
            "reset_default_graph_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_292": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_274": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}