{
    "data_util.py": {
        "tensorflow": {
            "FIFOQueue_110": {
                "variable": {
                    "value": "queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "queue_capacity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "dtypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shapes": {
                    "value": "shapes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_queue_runner_116": {
                "qr": {
                    "value": "queue_runner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.training.FeedingQueueRunner(queue, [enqueue_op], close_op, feed_fns=[feed_fn])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_111": {
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "tensorflow": {
            "placeholder_72": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, args.num_gt_points, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "npts",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConfigProto_78": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_81": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_83": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_76": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/fc.py": {
        "tensorflow": {
            "reduce_max_41": {
                "variable": {
                    "value": "features_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp_conv(inputs, [128, 256])",
                            "Call"
                        ],
                        [
                            "tf.concat([features, tf.tile(features_global, [1, tf.shape(inputs)[1], 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "mlp_conv(features, [512, 1024])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(features, axis=1, name='maxpool_1')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, tf.tile(features_global, [1, tf.shape(inputs)[1], 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_45": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp_conv(inputs, [128, 256])",
                            "Call"
                        ],
                        [
                            "tf.concat([features, tf.tile(features_global, [1, tf.shape(inputs)[1], 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "mlp_conv(features, [512, 1024])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(features, axis=1, name='maxpool_1')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp(features, [1024, 1024, self.num_output_points * 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [-1, self.num_output_points, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_output_points, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "encoder_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "encoder_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_42": {
                "input": {
                    "value": "features_global",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(features, axis=1, keep_dims=True, name='maxpool_0')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(inputs)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_42": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/folding.py": {
        "tensorflow": {
            "reduce_max_44": {
                "variable": {
                    "value": "features_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp_conv(inputs, [128, 256])",
                            "Call"
                        ],
                        [
                            "tf.concat([features, tf.tile(features_global, [1, tf.shape(inputs)[1], 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "mlp_conv(features, [512, 1024])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(features, axis=1, name='maxpool_1')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(features, 1), [1, self.num_output_points, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, tf.tile(features_global, [1, tf.shape(inputs)[1], 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_48": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp_conv(inputs, [128, 256])",
                            "Call"
                        ],
                        [
                            "tf.concat([features, tf.tile(features_global, [1, tf.shape(inputs)[1], 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "mlp_conv(features, [512, 1024])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(features, axis=1, name='maxpool_1')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(features, 1), [1, self.num_output_points, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-self.grid_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "self.grid_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "self.grid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_54": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-self.grid_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "self.grid_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "self.grid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_55": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linspace(-self.grid_scale, self.grid_scale, self.grid_size)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linspace(-self.grid_scale, self.grid_scale, self.grid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(grid, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_57": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(grid, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[features.shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_58": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(features, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.num_output_points, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "encoder_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "encoder_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_56": {
                "values": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(grid, axis=2), [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, 0), [features.shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(grid, axis=2), [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, 0), [features.shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp_conv(inputs, [128, 256])",
                            "Call"
                        ],
                        [
                            "tf.concat([features, tf.tile(features_global, [1, tf.shape(inputs)[1], 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "mlp_conv(features, [512, 1024])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(features, axis=1, name='maxpool_1')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(features, 1), [1, self.num_output_points, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "folding_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "folding_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_45": {
                "input": {
                    "value": "features_global",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(features, axis=1, keep_dims=True, name='maxpool_0')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(inputs)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_60": {
                "values": {
                    "value": "[features, grid]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_62": {
                "values": {
                    "value": "[features, fold1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/pcn_cd.py": {
        "tensorflow": {
            "concat_46": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, features_global]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "coarse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coarse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp(features, [1024, 1024, self.num_coarse * 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coarse, [-1, self.num_coarse, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_coarse, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_58": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.linspace(-0.05, 0.05, self.grid_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.linspace(-0.05, 0.05, self.grid_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_59": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.stack(grid, axis=2), [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_60": {
                "variable": {
                    "value": "grid_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.linspace(-0.05, 0.05, self.grid_size), tf.linspace(-0.05, 0.05, self.grid_size))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reshape(tf.stack(grid, axis=2), [-1, 2]), 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[features.shape[0], self.num_coarse, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_62": {
                "variable": {
                    "value": "point_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(coarse, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.grid_size ** 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "point_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(coarse, 2), [1, 1, self.grid_size ** 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(point_feat, [-1, self.num_fine, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_fine, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "global_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(features, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.num_fine, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grid_feat, point_feat, global_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_69": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(coarse, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.grid_size ** 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(coarse, 2), [1, 1, self.grid_size ** 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(center, [-1, self.num_fine, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_fine, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_39": {
                "value": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "npts",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "encoder_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "encoder_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "folding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_58": {
                "start": {
                    "value": "-0.05",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "self.grid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "tf.stack(grid, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_62": {
                "input": {
                    "value": "coarse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp(features, [1024, 1024, self.num_coarse * 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coarse, [-1, self.num_coarse, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp_conv(inputs, [128, 256])",
                            "Call"
                        ],
                        [
                            "tf.concat([features, features_global], axis=2)",
                            "Call"
                        ],
                        [
                            "mlp_conv(features, [512, 1024])",
                            "Call"
                        ],
                        [
                            "point_maxpool(features, npts)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "input": {
                    "value": "coarse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp(features, [1024, 1024, self.num_coarse * 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coarse, [-1, self.num_coarse, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_59": {
                "values": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.linspace(-0.05, 0.05, self.grid_size), tf.linspace(-0.05, 0.05, self.grid_size))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reshape(tf.stack(grid, axis=2), [-1, 2]), 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/pcn_emd.py": {
        "tensorflow": {
            "concat_46": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, features_global]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "coarse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coarse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp(features, [1024, 1024, self.num_coarse * 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coarse, [-1, self.num_coarse, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_coarse, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-self.grid_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "self.grid_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "self.grid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_59": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-self.grid_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "self.grid_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "self.grid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_60": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linspace(-self.grid_scale, self.grid_scale, self.grid_size)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linspace(-self.grid_scale, self.grid_scale, self.grid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_61": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.stack(grid, axis=2), [-1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_62": {
                "variable": {
                    "value": "grid_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reshape(tf.stack(grid, axis=2), [-1, 2]), 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[features.shape[0], self.num_coarse, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_64": {
                "variable": {
                    "value": "point_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(coarse, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.grid_size ** 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "point_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(coarse, 2), [1, 1, self.grid_size ** 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(point_feat, [-1, self.num_fine, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_fine, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_67": {
                "variable": {
                    "value": "global_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(features, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.num_fine, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grid_feat, point_feat, global_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_71": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(coarse, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.grid_size ** 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(coarse, 2), [1, 1, self.grid_size ** 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(center, [-1, self.num_fine, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_fine, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_39": {
                "value": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "npts",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "encoder_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "encoder_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "folding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "tensor": {
                    "value": "tf.stack(grid, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "coarse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp(features, [1024, 1024, self.num_coarse * 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coarse, [-1, self.num_coarse, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp_conv(inputs, [128, 256])",
                            "Call"
                        ],
                        [
                            "tf.concat([features, features_global], axis=2)",
                            "Call"
                        ],
                        [
                            "mlp_conv(features, [512, 1024])",
                            "Call"
                        ],
                        [
                            "point_maxpool(features, npts)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "input": {
                    "value": "coarse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp(features, [1024, 1024, self.num_coarse * 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coarse, [-1, self.num_coarse, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "values": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.meshgrid(x, y)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reshape(tf.stack(grid, axis=2), [-1, 2]), 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pc_distance/tf_approxmatch.py": {
        "tensorflow": {
            "load_op_library_7": {
                "variable": {
                    "value": "approxmatch_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "osp.join(base_dir, 'tf_approxmatch_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_44": {
                "op_type": {
                    "value": "MatchCost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "pt_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, npoint * 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "mypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(1, npoint, 3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "match_cost(pt_in, mypoints, match)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TensorShape_25": {
                "dims": {
                    "value": "[shape1.dims[0], shape2.dims[1], shape1.dims[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_43": {
                "dims": {
                    "value": "[shape1.dims[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_65": {
                "device_name": {
                    "value": "/gpu:2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_77": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_50": {
                "input": {
                    "value": "grad_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initialize_all_variables_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pc_distance/tf_nndistance.py": {
        "tensorflow": {
            "load_op_library_5": {
                "variable": {
                    "value": "nn_distance_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_nndistance_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_24": {
                "op_type": {
                    "value": "NnDistance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_40": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "inp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "xyz1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(32, 16384, 3).astype('float32')",
                            "Call"
                        ],
                        [
                            "op.inputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_46": {
                "variable": {
                    "value": "inp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xyz2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(32, 1024, 3).astype('float32')",
                            "Call"
                        ],
                        [
                            "op.inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_49": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "initialize_all_variables_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "retc",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "test_kitti.py": {
        "tensorflow": {
            "placeholder_37": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "npts",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, args.num_gt_points, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConfigProto_46": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_49": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_51": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "test_shapenet.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "npts",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, args.num_gt_points, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, args.num_gt_points, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConfigProto_49": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_52": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_54": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tf_util.py": {
        "tensorflow": {
            "conv1d_51": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv1d(inputs, num_out_channel, kernel_size=1, normalizer_fn=bn, normalizer_params=bn_params, scope='conv_%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, inputs.shape[0], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "'conv_%d' % (len(layer_dims) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_66": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv1d(inputs, num_out_channel, kernel_size=1, normalizer_fn=bn, normalizer_params=bn_params, scope='conv_%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, inputs.shape[0], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "dist1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(dist1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(dist2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "num_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pcd1.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_91": {
                "variable": {
                    "value": "(avg, update)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv1d_45": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv1d(inputs, num_out_channel, kernel_size=1, normalizer_fn=bn, normalizer_params=bn_params, scope='conv_%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, inputs.shape[0], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "bn_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scope": {
                    "value": "'conv_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_62": {
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(features, layer_dims[-1], activation_fn=None, scope='fc_%d' % (len(layer_dims) - 1))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv1d(inputs, layer_dims[-1], kernel_size=1, activation_fn=None, scope='conv_%d' % (len(layer_dims) - 1))",
                            "Call"
                        ],
                        [
                            "[tf.reduce_max(f, axis=1, keepdims=keepdims) for f in tf.split(inputs, npts, axis=1)]",
                            "ListComp"
                        ],
                        [
                            "[tf.tile(f, [1, npts[i], 1]) for (i, f) in enumerate(inputs)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_68": {
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(features, layer_dims[-1], activation_fn=None, scope='fc_%d' % (len(layer_dims) - 1))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv1d(inputs, layer_dims[-1], kernel_size=1, activation_fn=None, scope='conv_%d' % (len(layer_dims) - 1))",
                            "Call"
                        ],
                        [
                            "[tf.reduce_max(f, axis=1, keepdims=keepdims) for f in tf.split(inputs, npts, axis=1)]",
                            "ListComp"
                        ],
                        [
                            "[tf.tile(f, [1, npts[i], 1]) for (i, f) in enumerate(inputs)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "input_tensor": {
                    "value": "cost / num_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_87": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train_summary']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_92": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "['valid_summary']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_60": {
                "input_tensor": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tile_67": {
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, npts[i], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_73": {
                "x": {
                    "value": "dist1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.sqrt(dist1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_74": {
                "x": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.sqrt(dist2))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_61": {
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv1d(inputs, num_out_channel, kernel_size=1, normalizer_fn=bn, normalizer_params=bn_params, scope='conv_%d' % i)",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, inputs.shape[0], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "npts",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "is_training_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "piecewise_constant_41": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "boundaries": {
                    "value": "[10000, 20000, 50000]",
                    "type": "List",
                    "possible_values": []
                },
                "values": {
                    "value": "[0.01, 0.1, 0.5, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "inputs_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "npts_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "num_points",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "gt_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.batch_size, args.num_gt_points, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "ground_truths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_59": {
                "variable": {
                    "value": "train_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "train_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_60": {
                "variable": {
                    "value": "valid_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "valid_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_62": {
                "variable": {
                    "value": "trainer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(args.base_lr, global_step, args.lr_decay_steps, args.lr_decay_rate, staircase=True, name='lr')",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, args.lr_clip)",
                            "Call"
                        ],
                        [
                            "tf.constant(args.base_lr, name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_72": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_75": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_76": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_52": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "args.lr_decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "args.lr_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_55": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(args.base_lr, global_step, args.lr_decay_steps, args.lr_decay_rate, staircase=True, name='lr')",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, args.lr_clip)",
                            "Call"
                        ],
                        [
                            "tf.constant(args.base_lr, name='lr')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.lr_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_58": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FileWriter_80": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_96": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_79": {
                "checkpoint_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}