{
    "TensorflowExamples/layer_CSVT.py": {
        "tensorflow": {
            "get_variable_4": {
                "variable": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "filters1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_19": {
                "variable": {
                    "value": "filters2_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight2_1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, filter_shape2[2], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "filters2_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight2_2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, filter_shape2[2], filter_shape2[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight1', shape=filter_shape1, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weight1', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "separable_conv2d_33": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "depthwise_filter": {
                    "value": "filters2_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight2_1', shape=[3, 3, filter_shape2[2], 1], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "pointwise_filter": {
                    "value": "filters2_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight2_2', shape=[1, 1, filter_shape2[2], filter_shape2[3]], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_34": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[w, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([w, y], 3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, (x.shape[0], x.shape[1], x.shape[2], 2 * filter_shape1[3]))",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2, y3, y4, y5, y6, y7, y8], 3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, (x.shape[0], x.shape[1], x.shape[2], x.shape[3]))",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2, y3, y4, y5, y6, y7, y8], 3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, (x.shape[0], x.shape[1], x.shape[2], x.shape[3]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.shape[0], x.shape[1], x.shape[2], 2 * filter_shape1[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "filters1_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight1_",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "filters2_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight2_",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_55": {
                "variable": {
                    "value": "filters3_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight3_",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "filters4_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight4_",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "filters5_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight5_",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "filters6_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight6_",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "filters7_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight7_",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "filters8_",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight8_",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g1",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset:offset + ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset:offset + ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters1_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight1_', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g2",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + ig:offset + 2 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + ig:offset + 2 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters2_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight2_', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "variable": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 2 * ig:offset + 3 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 2 * ig:offset + 3 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters3_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight3_', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_109": {
                "variable": {
                    "value": "y4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g4",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 3 * ig:offset + 4 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 3 * ig:offset + 4 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters4_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight4_', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_110": {
                "variable": {
                    "value": "y5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g5",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 4 * ig:offset + 5 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 4 * ig:offset + 5 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters5_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight5_', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_111": {
                "variable": {
                    "value": "y6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g6",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 5 * ig:offset + 6 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 5 * ig:offset + 6 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters6_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight6_', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "y7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g7",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 6 * ig:offset + 7 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 6 * ig:offset + 7 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters7_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight7_', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_113": {
                "variable": {
                    "value": "y8",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g8",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 7 * ig:offset + 8 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 7 * ig:offset + 8 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters8_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight8_', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y1, y2, y3, y4, y5, y6, y7, y8]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([w, y], 3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, (x.shape[0], x.shape[1], x.shape[2], 2 * filter_shape1[3]))",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2, y3, y4, y5, y6, y7, y8], 3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, (x.shape[0], x.shape[1], x.shape[2], x.shape[3]))",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2, y3, y4, y5, y6, y7, y8], 3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, (x.shape[0], x.shape[1], x.shape[2], x.shape[3]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.shape[0], x.shape[1], x.shape[2], x.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_126": {
                "variable": {
                    "value": "filters1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "filters2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "filters3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight3",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "filters4",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "filters5",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight5",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "filters6",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight6",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_162": {
                "variable": {
                    "value": "filters7",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight7",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_168": {
                "variable": {
                    "value": "filters8",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight8",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_188": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "g1",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset:offset + ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset:offset + ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight1', shape=filter_shape1, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weight1', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_189": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "g2",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + ig:offset + 2 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + ig:offset + 2 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight2', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_190": {
                "variable": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "g3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 2 * ig:offset + 3 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 2 * ig:offset + 3 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight3', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_191": {
                "variable": {
                    "value": "y4",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "g4",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 3 * ig:offset + 4 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 3 * ig:offset + 4 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight4', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_192": {
                "variable": {
                    "value": "y5",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "g5",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 4 * ig:offset + 5 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 4 * ig:offset + 5 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight5', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_193": {
                "variable": {
                    "value": "y6",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "g6",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 5 * ig:offset + 6 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 5 * ig:offset + 6 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight6', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_194": {
                "variable": {
                    "value": "y7",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "g7",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 6 * ig:offset + 7 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 6 * ig:offset + 7 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters7",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight7', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_195": {
                "variable": {
                    "value": "y8",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "g8",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[:, :, :, offset + 7 * ig:offset + 8 * ig]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, offset + 7 * ig:offset + 8 * ig]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight8', shape=[filter_shape[0], filter_shape[1], filter_shape[2] // groups, filter_shape[3] // groups], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_197": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y1, y2, y3, y4, y5, y6, y7, y8]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([w, y], 3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, (x.shape[0], x.shape[1], x.shape[2], 2 * filter_shape1[3]))",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2, y3, y4, y5, y6, y7, y8], 3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, (x.shape[0], x.shape[1], x.shape[2], x.shape[3]))",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2, y3, y4, y5, y6, y7, y8], 3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, (x.shape[0], x.shape[1], x.shape[2], x.shape[3]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.shape[0], x.shape[1], x.shape[2], x.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(x.shape[0], x.shape[1], x.shape[2], groups, x.shape[3] // groups)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_205": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.separable_conv2d(x, filters2_1, filters2_2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (x.shape[0], x.shape[1], x.shape[2], groups, x.shape[3] // groups))",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (x.shape[0], x.shape[1], x.shape[2], x.shape[3]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.separable_conv2d(x, filters2_1, filters2_2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (x.shape[0], x.shape[1], x.shape[2], groups, x.shape[3] // groups))",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (x.shape[0], x.shape[1], x.shape[2], x.shape[3]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.shape[0], x.shape[1], x.shape[2], x.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_223": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_235": {
                "variable": {
                    "value": "pop_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pop_mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_241": {
                "variable": {
                    "value": "pop_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pop_var",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_10": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight', shape=filter_shape, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_213": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_214": {
                "variable": {
                    "value": "train_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_mean', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_mean * decay + batch_mean * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_215": {
                "variable": {
                    "value": "train_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_var', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_var * decay + batch_var * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_248": {
                "pred": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "bn_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "bn_inference",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_normalization_220": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "pop_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_mean', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "pop_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_var', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='scale', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_216": {
                "control_inputs": {
                    "value": "[train_mean, train_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_217": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "batch_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='scale', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_227": {
                "stddev": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_233": {
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_239": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_245": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "PytorchExamples/block.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.squezze_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(input_channel / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.fire_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(input_channel / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(output_channel / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "PytorchExamples/network.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "self.dncnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.dncnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "TensorflowExamples/basicModules.py": {
        "torch": {}
    }
}