{
    "data/common.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(img.transpose((2, 0, 1)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "data/srdata.py": {
        "torch": {}
    },
    "data/val_data.py": {
        "torch": {}
    },
    "models/PPON_model.py": {
        "torch": {
            "Adam_100": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_207": {
                "variable": {
                    "value": "self.log_dict[D_real]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_d_real.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_208": {
                "variable": {
                    "value": "self.log_dict[D_fake]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_d_fake.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_D",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_35": {
                "variable": {
                    "value": "self.cri_pix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_58": {
                "variable": {
                    "value": "self.cri_fea",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_37": {
                "variable": {
                    "value": "self.cri_pix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_60": {
                "variable": {
                    "value": "self.cri_fea",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_180": {
                "input": {
                    "value": "pred_d_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(self.fake_H.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_181": {
                "input": {
                    "value": "pred_d_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(self.var_H)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiStepLR_111": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.optimizers",
                            "Attribute"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.lr_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_164": {
                "input": {
                    "value": "pred_g_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(self.fake_H)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_165": {
                "input": {
                    "value": "pred_g_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(self.var_H)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/architecture.py": {
        "torch": {
            "Sequential_238": {
                "variable": {
                    "value": "self.classifier2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 3 * 3, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.features.children())[:feature_layer + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_239": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_model.py": {
        "torch": {
            "save_59": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/block.py": {
        "torch": {
            "Conv2d_45": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size + (kernel_size - 1) * (dilation - 1)",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2) * dilation",
                            "BinOp"
                        ],
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "get_valid_padding(kernel_size, dilation)",
                            "Call"
                        ],
                        [
                            "padding if pad_type == 'zero' else 0",
                            "IfExp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_151": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "upscale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "PixelShuffle_158": {
                "variable": {
                    "value": "pixel_shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "upscale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size + (kernel_size - 1) * (dilation - 1)",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2) * dilation",
                            "BinOp"
                        ],
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "get_valid_padding(kernel_size, dilation)",
                            "Call"
                        ],
                        [
                            "padding if pad_type == 'zero' else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_25": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2) * dilation",
                            "BinOp"
                        ],
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "get_valid_padding(kernel_size, dilation)",
                            "Call"
                        ],
                        [
                            "padding if pad_type == 'zero' else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d1, add1, add2, add3, add4, add5, add6, add7]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_14": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_27": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kernel_size - 1) / 2) * dilation",
                            "BinOp"
                        ],
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "get_valid_padding(kernel_size, dilation)",
                            "Call"
                        ],
                        [
                            "padding if pad_type == 'zero' else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "LeakyReLU_57": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_59": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "n_prelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "init": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/loss.py": {
        "torch": {
            "L1Loss_39": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_49": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_50": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_14": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_16": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_24": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "normal_13": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "orthogonal_45": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_17": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "orthogonal_49": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_21": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "test_PPON.py": {
        "torch": {
            "from_numpy_75": {
                "variable": {
                    "value": "im_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_l / 255.0",
                            "BinOp"
                        ],
                        [
                            "np.transpose(im_input, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "im_input[np.newaxis, ...]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(im_input).float()",
                            "Call"
                        ],
                        [
                            "im_input.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_53": {
                "f": {
                    "value": "opt.models",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_71": {
                "variable": {
                    "value": "training_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "srdata.df2k_data(args)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "testing_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data.DatasetFromFolderVal('Test_Datasets/Set5/', 'Test_Datasets/Set5_LR/', args.scale)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.testBatchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}