{
    "ArtificialData/figure.py": {
        "torch": {
            "cat_52": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ones_69": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.output_size",
                    "possible_values": []
                },
                "out": {
                    "value": "args.kernel_size * 2",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, w[i]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, x]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "ArtificialData/generate_data.py": {
        "torch": {
            "MaxPool1d_13": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "AvgPool1d_31": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool1d_49": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "AvgPool1d_50": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool2d_73": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "AvgPool2d_91": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "AvgPool2d_110": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool2d_133": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "AvgPool2d_134": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xx)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_123": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xx)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_147": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xx)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "ndarray": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 60).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ],
                        [
                            "np.random.rand(20, 1, 28, 28).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ArtificialData/inner_optimizers.py": {
        "torch": {
            "tensor_41": {
                "variable": {
                    "value": "inner_lr",
                    "possible_values": []
                },
                "data": {
                    "value": "self.init_lr",
                    "possible_values": []
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "param",
                    "possible_values": []
                }
            }
        }
    },
    "ArtificialData/layers.py": {
        "torch": {
            "lp_pooling1d_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_15": {
                    "variable": {
                        "value": "self.mask",
                        "possible_values": []
                    },
                    "data": {
                        "value": "mask",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Parameter_16": {
                    "variable": {
                        "value": "self.p_norm",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(args.output_size).add_(2)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Sigmoid_19": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "lp_pooling2d_57": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_60": {
                    "variable": {
                        "value": "self.mask",
                        "possible_values": []
                    },
                    "data": {
                        "value": "mask",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Parameter_61": {
                    "variable": {
                        "value": "self.p_norm",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(output_size).add_(4)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Sigmoid_64": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Unfold_68": {
                    "variable": {
                        "value": "self.unfold",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(kernel_size, kernel_size)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": []
                    }
                },
                "Fold_69": {
                    "variable": {
                        "value": "self.fold",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "(imgsz // kernel_size, imgsz // kernel_size)",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(30)",
                    "possible_values": []
                }
            },
            "exp_29": {
                "variable": {
                    "value": "p_prime",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p_norm.unsqueeze(1).unsqueeze(0)",
                    "possible_values": []
                }
            },
            "abs_30": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "possible_values": []
                }
            },
            "pow_31": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                },
                "exponent": {
                    "value": "p_prime",
                    "possible_values": [
                        [
                            "torch.exp(self.p_norm.unsqueeze(1).unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "torch.exp(self.p_norm.unsqueeze(1).unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "torch.exp(self.p_norm.unsqueeze(0).unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "self.p_norm.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "p_prime.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "p_prime.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_34": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 / p_prime",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(output_size)",
                    "possible_values": []
                }
            },
            "exp_83": {
                "variable": {
                    "value": "p_prime",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p_norm.unsqueeze(0).unsqueeze(0)",
                    "possible_values": []
                }
            },
            "abs_93": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "torch.abs(x[1])",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "(z + self.eps) * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], z.shape[1])",
                            "Call"
                        ],
                        [
                            "z.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], t.shape[1]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], 4, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "(z + self.eps) * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], -1, z.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], 4, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], -1, t.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_94": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                },
                "exponent": {
                    "value": "p_prime",
                    "possible_values": [
                        [
                            "torch.exp(self.p_norm.unsqueeze(1).unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "torch.exp(self.p_norm.unsqueeze(1).unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "torch.exp(self.p_norm.unsqueeze(0).unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "self.p_norm.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "p_prime.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "p_prime.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_97": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 / p_prime",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "args.output_size",
                    "possible_values": []
                }
            },
            "exp_42": {
                "variable": {
                    "value": "p_prime",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p_norm.unsqueeze(1).unsqueeze(0)",
                    "possible_values": []
                }
            },
            "abs_44": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "torch.abs(x[1])",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "(z + self.eps) * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], z.shape[1])",
                            "Call"
                        ],
                        [
                            "z.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], t.shape[1]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], 4, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "(z + self.eps) * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], -1, z.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], 4, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], -1, t.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_46": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "t + self.eps",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "exp_48": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "possible_values": [
                        [
                            "torch.log(w_prime + self.eps) + p_prime * torch.log(z + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(t + self.eps, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(t - np.log(t.shape[2])) / p_prime",
                            "BinOp"
                        ],
                        [
                            "torch.exp(t)",
                            "Call"
                        ],
                        [
                            "torch.log(w_prime + self.eps) + p_prime * torch.log(z + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(t + self.eps, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(t - np.log(t.shape[2])) / p_prime",
                            "BinOp"
                        ],
                        [
                            "torch.exp(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "output_size",
                    "possible_values": []
                }
            },
            "abs_108": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "torch.abs(x[1])",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "(z + self.eps) * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], z.shape[1])",
                            "Call"
                        ],
                        [
                            "z.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], t.shape[1]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], 4, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "(z + self.eps) * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], -1, z.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], 4, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], -1, t.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_110": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "t + self.eps",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "exp_112": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "possible_values": [
                        [
                            "torch.log(w_prime + self.eps) + p_prime * torch.log(z + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(t + self.eps, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(t - np.log(t.shape[2])) / p_prime",
                            "BinOp"
                        ],
                        [
                            "torch.exp(t)",
                            "Call"
                        ],
                        [
                            "torch.log(w_prime + self.eps) + p_prime * torch.log(z + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(t + self.eps, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(t - np.log(t.shape[2])) / p_prime",
                            "BinOp"
                        ],
                        [
                            "torch.exp(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_45": {
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                }
            },
            "log_109": {
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                }
            }
        }
    },
    "ArtificialData/loader.py": {
        "torch": {
            "from_numpy_43": {
                "ndarray": {
                    "value": "x.astype(np.float32)",
                    "possible_values": []
                }
            }
        }
    },
    "ArtificialData/train.py": {
        "torch": {
            "device_115": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "rand_119": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.output_size",
                    "possible_values": []
                },
                "out": {
                    "value": "args.input_size",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "*args": {
                    "value": "layers.lp_pooling1d(mask, args, bias=False)",
                    "possible_values": []
                }
            },
            "SGD_131": {
                "variable": {
                    "value": "meta_opt",
                    "possible_values": []
                },
                "params": {
                    "value": "inner_opt_builder.metaparams.values()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.outer_lr",
                    "possible_values": []
                }
            },
            "Adam_133": {
                "variable": {
                    "value": "meta_opt",
                    "possible_values": []
                },
                "params": {
                    "value": "inner_opt_builder.metaparams.values()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.outer_lr",
                    "possible_values": []
                }
            },
            "mse_loss_51": {
                "variable": {
                    "value": "qry_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_pred",
                    "possible_values": []
                },
                "target": {
                    "value": "y_qry[i].to(device)",
                    "possible_values": []
                }
            },
            "mse_loss_83": {
                "variable": {
                    "value": "qry_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_pred",
                    "possible_values": []
                },
                "target": {
                    "value": "y_qry[i].to(device)",
                    "possible_values": []
                }
            },
            "rand_122": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.kernel_size ** 2",
                    "possible_values": []
                },
                "out": {
                    "value": "args.output_size",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "*args": {
                    "value": "layers.lp_pooling2d(device, mask, args.input_size, args.kernel_size, args.stride, args.output_size, bias=False)",
                    "possible_values": []
                }
            },
            "mse_loss_47": {
                "variable": {
                    "value": "spt_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "spt_pred",
                    "possible_values": []
                },
                "target": {
                    "value": "y_spt[i].to(device)",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "regularization_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(w)",
                    "possible_values": []
                }
            },
            "mse_loss_79": {
                "variable": {
                    "value": "spt_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "spt_pred",
                    "possible_values": []
                },
                "target": {
                    "value": "y_spt[i].to(device)",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "exp_166": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "net[0].p_norm.reshape(1, net[0].p_norm.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_78": {
                "input": {
                    "value": "w",
                    "possible_values": []
                }
            }
        }
    },
    "Omniglot/Test/figure.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ones_73": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.p",
                    "possible_values": []
                },
                "out": {
                    "value": "args.kernel_size * 2",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, w[i]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, x]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Omniglot/Test/inner_optimizers_test.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "inner_lr",
                    "possible_values": []
                },
                "data": {
                    "value": "self.init_lr",
                    "possible_values": []
                }
            },
            "ones_like_46": {
                "input": {
                    "value": "param",
                    "possible_values": []
                }
            }
        }
    },
    "Omniglot/Test/layers.py": {
        "torch": {
            "STEP_13": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "ShareConv2d_25": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_29": {
                    "variable": {
                        "value": "self.mask",
                        "possible_values": []
                    },
                    "data": {
                        "value": "mask",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Parameter_30": {
                    "variable": {
                        "value": "self.p_norm",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(p).add_(4)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Sigmoid_33": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Unfold_37": {
                    "variable": {
                        "value": "self.unfold",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(kernel_size, kernel_size)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": []
                    }
                },
                "Fold_38": {
                    "variable": {
                        "value": "self.fold",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "(args.imgsz // args.kernel_size, args.imgsz // args.kernel_size)",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                }
            },
            "MetaLinearModel_107": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "rand_110": {
                    "variable": {
                        "value": "self.mask",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "args.kernel_size ** 2",
                        "possible_values": []
                    },
                    "out": {
                        "value": "args.p",
                        "possible_values": []
                    }
                },
                "Sequential_111": {
                    "variable": {
                        "value": "self.first_layer",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "layers.ShareConv2d(args, self.mask, args.imgsz, args.kernel_size, args.stride, args.p, bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_112": {
                    "variable": {
                        "value": "self.fc4_layers",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(1 * (args.imgsz // args.kernel_size) * (args.imgsz // args.kernel_size), 128, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "MetaConvModel_138": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "rand_141": {
                    "variable": {
                        "value": "self.mask",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "args.kernel_size ** 2",
                        "possible_values": []
                    },
                    "out": {
                        "value": "args.p",
                        "possible_values": []
                    }
                },
                "Sequential_142": {
                    "variable": {
                        "value": "self.first_layer",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "ShareConv2d(args, self.mask, args.imgsz, args.kernel_size, args.stride, args.p, bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_143": {
                    "variable": {
                        "value": "self.second_layer",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(args.hidden_size * (args.imgsz // args.kernel_size) * (args.imgsz // args.kernel_size), 512, bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_149": {
                    "variable": {
                        "value": "self.features",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "OrderedDict([('layer1', conv_block(in_channels=1, hidden_size=args.hidden_size))])",
                        "possible_values": []
                    }
                }
            },
            "Sequential_130": {
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(in_channels, hidden_size, kernel_size=3, padding=1, bias=False)), ('norm', nn.BatchNorm2d(hidden_size, momentum=1.0, track_running_stats=False)), ('relu', nn.ReLU())])",
                    "possible_values": []
                }
            },
            "MaxPool2d_136": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(p)",
                    "possible_values": []
                }
            },
            "exp_62": {
                "variable": {
                    "value": "p_prime",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p_norm.unsqueeze(0).unsqueeze(0)",
                    "possible_values": []
                }
            },
            "abs_70": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], x[1].shape[1], self.kernel_size ** 2, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "z * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], z.shape[1], z.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], self.args ** 2, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], -1, t.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_71": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                },
                "exponent": {
                    "value": "p_prime",
                    "possible_values": [
                        [
                            "torch.exp(self.p_norm.unsqueeze(0).unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "self.p_norm.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "p_prime.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_74": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 / p_prime",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "p",
                    "possible_values": []
                }
            },
            "abs_84": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], x[1].shape[1], self.kernel_size ** 2, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "z * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], z.shape[1], z.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], self.args ** 2, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], -1, t.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_86": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "t + self.eps",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "exp_88": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "possible_values": [
                        [
                            "torch.log(w_prime + self.eps) + p_prime * torch.log(z + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(t + self.eps, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(t - np.log(t.shape[2])) / p_prime",
                            "BinOp"
                        ],
                        [
                            "torch.exp(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "args.hidden_size * (args.imgsz // args.kernel_size) * (args.imgsz // args.kernel_size)",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sign_17": {
                "input": {
                    "value": "input - 0.5",
                    "possible_values": []
                }
            },
            "log_85": {
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "1 * (args.imgsz // args.kernel_size) * (args.imgsz // args.kernel_size)",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_114": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_117": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "64",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_120": {
                "num_features": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "num_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1.0",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Omniglot/Test/loader.py": {
        "torch": {
            "rand_139": {
                "variable": {
                    "value": "rnd",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "possible_values": []
                },
                "layout": {
                    "value": "h",
                    "possible_values": []
                },
                "device": {
                    "value": "w",
                    "possible_values": []
                }
            }
        }
    },
    "Omniglot/Test/test.py": {
        "torch": {
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "SGD_152": {
                "variable": {
                    "value": "meta_opt",
                    "possible_values": []
                },
                "params": {
                    "value": "inner_opt_builder.metaparams.values()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.outer_lr",
                    "possible_values": []
                }
            },
            "Adam_154": {
                "variable": {
                    "value": "meta_opt",
                    "possible_values": []
                },
                "params": {
                    "value": "inner_opt_builder.metaparams.values()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.outer_lr",
                    "possible_values": []
                }
            },
            "manual_seed_199": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_200": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_59": {
                "variable": {
                    "value": "(_, predicted)",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_pred",
                    "possible_values": []
                }
            },
            "max_97": {
                "variable": {
                    "value": "(_, predicted)",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_pred",
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_144": {
                "f": {
                    "value": "./model.pth",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Omniglot/Train/figure.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ones_73": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.p",
                    "possible_values": []
                },
                "out": {
                    "value": "args.kernel_size * 2",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, w[i]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, x]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Omniglot/Train/inner_optimizers.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "inner_lr",
                    "possible_values": []
                },
                "data": {
                    "value": "self.init_lr",
                    "possible_values": []
                }
            },
            "ones_like_46": {
                "input": {
                    "value": "param",
                    "possible_values": []
                }
            }
        }
    },
    "Omniglot/Train/layers.py": {
        "torch": {
            "ShareConv2d_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_17": {
                    "variable": {
                        "value": "self.mask",
                        "possible_values": []
                    },
                    "data": {
                        "value": "mask",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Parameter_18": {
                    "variable": {
                        "value": "self.p_norm",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(p).add_(4)",
                        "possible_values": []
                    },
                    "requires_grad": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Sigmoid_21": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Unfold_25": {
                    "variable": {
                        "value": "self.unfold",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(kernel_size, kernel_size)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": []
                    }
                },
                "Fold_26": {
                    "variable": {
                        "value": "self.fold",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "(args.imgsz // args.kernel_size, args.imgsz // args.kernel_size)",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                }
            },
            "MetaLinearModel_99": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "rand_102": {
                    "variable": {
                        "value": "self.mask",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "args.kernel_size ** 2",
                        "possible_values": []
                    },
                    "out": {
                        "value": "args.p",
                        "possible_values": []
                    }
                },
                "Sequential_103": {
                    "variable": {
                        "value": "self.first_layer",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "layers.ShareConv2d(args, self.mask, args.imgsz, args.kernel_size, args.stride, args.p, bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_104": {
                    "variable": {
                        "value": "self.fc4_layers",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(1 * (args.imgsz // args.kernel_size) * (args.imgsz // args.kernel_size), 128, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "MetaConvModel_130": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "rand_133": {
                    "variable": {
                        "value": "self.mask",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "args.kernel_size ** 2",
                        "possible_values": []
                    },
                    "out": {
                        "value": "args.p",
                        "possible_values": []
                    }
                },
                "Sequential_134": {
                    "variable": {
                        "value": "self.first_layer",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "ShareConv2d(args, self.mask, args.imgsz, args.kernel_size, args.stride, args.p, bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_135": {
                    "variable": {
                        "value": "self.second_layer",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(args.hidden_size * (args.imgsz // args.kernel_size) * (args.imgsz // args.kernel_size), 512, bias=False)",
                        "possible_values": []
                    }
                },
                "Sequential_141": {
                    "variable": {
                        "value": "self.features",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "OrderedDict([('layer1', conv_block(in_channels=1, hidden_size=args.hidden_size))])",
                        "possible_values": []
                    }
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(in_channels, hidden_size, kernel_size=3, padding=1, bias=False)), ('norm', nn.BatchNorm2d(hidden_size, momentum=1.0, track_running_stats=False)), ('relu', nn.ReLU())])",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(p)",
                    "possible_values": []
                }
            },
            "exp_54": {
                "variable": {
                    "value": "p_prime",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p_norm.unsqueeze(0).unsqueeze(0)",
                    "possible_values": []
                }
            },
            "abs_62": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], x[1].shape[1], self.kernel_size ** 2, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "z * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], z.shape[1], z.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], self.args ** 2, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], -1, t.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_63": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                },
                "exponent": {
                    "value": "p_prime",
                    "possible_values": [
                        [
                            "torch.exp(self.p_norm.unsqueeze(0).unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "self.p_norm.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "p_prime.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_66": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 / p_prime",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "p",
                    "possible_values": []
                }
            },
            "abs_76": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], x[1].shape[1], self.kernel_size ** 2, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, p_prime)",
                            "Call"
                        ],
                        [
                            "z * w_prime",
                            "BinOp"
                        ],
                        [
                            "z.mean(dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.pow(z + self.eps, 1 / p_prime)",
                            "Call"
                        ],
                        [
                            "z.reshape(z.shape[0], z.shape[1], z.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "x[1].to(torch.float64)",
                            "Call"
                        ],
                        [
                            "self.unfold(z)",
                            "Call"
                        ],
                        [
                            "z.reshape(x[1].shape[0], x[1].shape[1], self.args ** 2, z.shape[2])",
                            "Call"
                        ],
                        [
                            "torch.abs(z)",
                            "Call"
                        ],
                        [
                            "t.reshape(t.shape[0], -1, t.shape[3])",
                            "Call"
                        ],
                        [
                            "self.fold(z)",
                            "Call"
                        ],
                        [
                            "z.to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_78": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "t + self.eps",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "exp_80": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "possible_values": [
                        [
                            "torch.log(w_prime + self.eps) + p_prime * torch.log(z + self.eps)",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(t + self.eps, dim=2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(t - np.log(t.shape[2])) / p_prime",
                            "BinOp"
                        ],
                        [
                            "torch.exp(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "args.hidden_size * (args.imgsz // args.kernel_size) * (args.imgsz // args.kernel_size)",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "log_77": {
                "input": {
                    "value": "z + self.eps",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "1 * (args.imgsz // args.kernel_size) * (args.imgsz // args.kernel_size)",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_106": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_109": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "64",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_112": {
                "num_features": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1.0",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Omniglot/Train/loader.py": {
        "torch": {}
    },
    "Omniglot/Train/train.py": {
        "torch": {
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_136": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "SGD_154": {
                "variable": {
                    "value": "meta_opt",
                    "possible_values": []
                },
                "params": {
                    "value": "inner_opt_builder.metaparams.values()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.outer_lr",
                    "possible_values": []
                }
            },
            "Adam_156": {
                "variable": {
                    "value": "meta_opt",
                    "possible_values": []
                },
                "params": {
                    "value": "inner_opt_builder.metaparams.values()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.outer_lr",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "./w/model + str(num) + .pth",
                    "possible_values": []
                }
            },
            "manual_seed_210": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_211": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_60": {
                "variable": {
                    "value": "(_, predicted)",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_pred",
                    "possible_values": []
                }
            },
            "max_100": {
                "variable": {
                    "value": "(_, predicted)",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_pred",
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}