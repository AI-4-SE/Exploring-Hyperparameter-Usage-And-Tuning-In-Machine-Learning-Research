{
    "config/config_mdnet.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "config/config_ours.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "config/config_rldn.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "config/config_russia.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataset/align_dataset.py": {
        "torch": {}
    },
    "lib/dataset/seg_dataset.py": {
        "torch": {}
    },
    "lib/engine.py": {
        "torch": {
            "set_grad_enabled_49": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_104": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_140": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/factory.py": {
        "torch": {
            "Adam_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "training_setting_param.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "training_setting_param.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "training_setting_param.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "training_setting_param.lr_mom",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/init_weights.py": {
        "torch": {}
    },
    "lib/models/layers.py": {
        "torch": {
            "Conv2d_137": {
                "variable": {
                    "value": "self.keep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "outputs0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outputs0, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_244": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "outputs0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outputs0, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "outputs0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outputs0, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_324": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_325": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_326": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_327": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_329": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_343": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(y).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_347": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_358": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_359": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_382": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask * self.beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_383": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "distribution.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_392": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(features, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_393": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features * (len(sizes) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_394": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_397": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_398": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_416": {
                "variable": {
                    "value": "self.keep_channel_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_417": {
                "variable": {
                    "value": "self.addition_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.out_channel, self.out_channel, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_422": {
                "variable": {
                    "value": "sd_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sd_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(sd_f, scale_factor=self.scale_factor, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_423": {
                "variable": {
                    "value": "cat_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sd_f, bb_f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_435": {
                "variable": {
                    "value": "self.keep_channel_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * f_channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "f_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_436": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_437": {
                "variable": {
                    "value": "self.gen_one_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "f_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_438": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "cat_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sd_f, ds_f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_445": {
                "variable": {
                    "value": "merge_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen_one_channel(cat_f)",
                            "Call"
                        ],
                        [
                            "F.interpolate(merge_f, size=self.input_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(merge_f)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_576": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels + self.rank + int(with_r)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_594": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels + self.rank + int(with_r)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_612": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels + self.rank + int(with_r)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_637": {
                "variable": {
                    "value": "xx_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 1, dim_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_638": {
                "variable": {
                    "value": "yy_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 1, dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_640": {
                "variable": {
                    "value": "xx_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_641": {
                "variable": {
                    "value": "yy_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_645": {
                "variable": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(dim_x, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.arange(dim_y, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "xx_range[None, None, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(dim_y, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "xx_range[None, None, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "xx_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([1, 1, 1, dim_x], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, 1, dim_x], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, dim_x], dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_646": {
                "variable": {
                    "value": "yy_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(dim_x, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "yy_range[None, None, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(dim_x, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "yy_range[None, None, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "yy_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([1, 1, 1, dim_y], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, 1, dim_y], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, dim_y], dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_671": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, xx_channel, yy_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_683": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_686": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_721": {
                "variable": {
                    "value": "self.pix_shf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_723": {
                "variable": {
                    "value": "self.upsmp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Unfold_724": {
                "variable": {
                    "value": "self.unfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "k_up // 2 * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_734": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.comp(X)",
                            "Call"
                        ],
                        [
                            "self.enc(W)",
                            "Call"
                        ],
                        [
                            "self.pix_shf(W)",
                            "Call"
                        ],
                        [
                            "F.softmax(W, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_740": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bkhw,bckhw->bchw",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[W, X]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_758": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_channels_reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels // reduction_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_759": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_channels_reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels // reduction_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_760": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_761": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_777": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "fc_out_2.view(a, b, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_792": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_793": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_815": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "squeeze_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor.view(batch_size, num_channels, -1).mean(dim=2)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "squeeze_tensor.view(batch_size, 1, a, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_840": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cSE(input_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_218": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "outputs0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outputs0, feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_264": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_293": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_399": {
                "*args": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_465": {
                "variable": {
                    "value": "xx_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, xx_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_688": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_805": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "weights.view(1, channel, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_807": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "input_tensor.cuda()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "weights.view(1, channel, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, 2 ** (i - 1), 2 ** (i - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, p, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "CoordConv2d(in_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, 2 ** (i - 1), 2 ** (i - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, p, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_221": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_267": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_296": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_327": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_360": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_361": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_404": {
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.interpolate(stage(feats), size=(h, w), mode='bilinear', align_corners=True) for stage in self.stages] + [feats]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_418": {
                "in_channels": {
                    "value": "self.out_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_419": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_478": {
                "variable": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(xx_channel - 0.5, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_479": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, rr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_483": {
                "variable": {
                    "value": "xx_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 1, dim_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_484": {
                "variable": {
                    "value": "yy_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 1, dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_486": {
                "variable": {
                    "value": "xx_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_487": {
                "variable": {
                    "value": "yy_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_491": {
                "variable": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(dim_x, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.arange(dim_y, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "xx_range[None, None, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(dim_y, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "xx_range[None, None, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "xx_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([1, 1, 1, dim_x], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, 1, dim_x], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, dim_x], dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_492": {
                "variable": {
                    "value": "yy_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(dim_x, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "yy_range[None, None, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(dim_x, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "yy_range[None, None, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "yy_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([1, 1, 1, dim_y], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, 1, dim_y], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, dim_y], dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_519": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, xx_channel, yy_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.UpsamplingBilinear2d(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.UpsamplingBilinear2d(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_299": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.UpsamplingBilinear2d(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_403": {
                "input": {
                    "value": "stage(feats)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_522": {
                "variable": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(xx_channel - 0.5, 2) + torch.pow(yy_channel - 0.5, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_523": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, rr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_527": {
                "variable": {
                    "value": "xx_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 1, 1, dim_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_528": {
                "variable": {
                    "value": "yy_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 1, 1, dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_529": {
                "variable": {
                    "value": "zz_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 1, 1, dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_531": {
                "variable": {
                    "value": "xy_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_534": {
                "variable": {
                    "value": "yz_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_537": {
                "variable": {
                    "value": "zx_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_540": {
                "variable": {
                    "value": "xy_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xy_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(dim_y, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "xy_range[None, None, None, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "xx_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([1, 1, 1, dim_x], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, 1, dim_x], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, dim_x], dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_541": {
                "variable": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xy_channel + i for i in range(dim_z)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_543": {
                "variable": {
                    "value": "yz_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yz_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(dim_z, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "yz_range[None, None, None, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "yy_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([1, 1, 1, dim_y], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, 1, dim_y], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1, 1, dim_y], dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_545": {
                "variable": {
                    "value": "yy_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[yz_channel + i for i in range(dim_x)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_547": {
                "variable": {
                    "value": "zx_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zx_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(dim_x, dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "zx_range[None, None, None, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "zz_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([1, 1, 1, 1, dim_z], dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_549": {
                "variable": {
                    "value": "zz_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zx_channel + i for i in range(dim_y)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_556": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, xx_channel, yy_channel, zz_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "2 ** (i - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2 ** (i - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                },
                "dilation": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm2d_142": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm2d_147": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "2 ** (i - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2 ** (i - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_180": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_181": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ],
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                },
                "dilation": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_478": {
                "input": {
                    "value": "xx_channel - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_559": {
                "variable": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(xx_channel - 0.5, 2) + torch.pow(yy_channel - 0.5, 2) + torch.pow(zz_channel - 0.5, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, rr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_225": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_271": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_300": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_522": {
                "input": {
                    "value": "yy_channel - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_561": {
                "input": {
                    "value": "zz_channel - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_559": {
                "input": {
                    "value": "xx_channel - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_560": {
                "input": {
                    "value": "yy_channel - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/loss.py": {
        "torch": {
            "L1Loss_31": {
                "variable": {
                    "value": "criterion_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_39": {
                "variable": {
                    "value": "criterion_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "criterion_1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor([1, 10]).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "prob_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_72": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wce_weight if seg_type == 'wce' else nce_weight",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_91": {
                "variable": {
                    "value": "num_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(label != 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_96": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(label != 0).float()",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_215": {
                "variable": {
                    "value": "diag_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "bottom_left_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_97": {
                "input": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy(prediction.float(), label.float(), weight=mask, reduce=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_153": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "limits_mask.to(dtype=limits.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_154": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curves[limits_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets_coord[limits_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_233": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.regluar_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_166": {
                "variable": {
                    "value": "loss_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_r_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets_coord",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_217": {
                "n": {
                    "value": "n - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "m": {
                    "value": "n - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "target.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_152": {
                "input": {
                    "value": "targets_coord",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_185": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "limits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "limits_mask.to(dtype=limits.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_loss_186": {
                "variable": {
                    "value": "loss_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curves[limits_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets_coord[limits_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_234": {
                "input": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(x, self.regluar_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_113": {
                "input": {
                    "value": "target_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target == i).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_194": {
                "variable": {
                    "value": "maxpool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_184": {
                "input": {
                    "value": "targets_coord",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/network.py": {
        "torch": {
            "interpolate_510": {
                "variable": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "down",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "left.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_515": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "distribution.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_32": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.final_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.final_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.final_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.final_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_57": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_152": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.downsample_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.downsample_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.downsample_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.res_blocks_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.res_blocks_a, self.res_blocks_b, self.res_blocks_c]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_164": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.regress_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * 4 * 4, 600)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_219": {
                "variable": {
                    "value": "ref_curves",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_curves",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_blocks_mid(prob_map.unsqueeze(dim=1))",
                            "Call"
                        ],
                        [
                            "self.avgpool(ref_curves)",
                            "Call"
                        ],
                        [
                            "torch.flatten(ref_curves, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(ref_curves)",
                            "Call"
                        ],
                        [
                            "self.res_blocks_mid(prob_map.unsqueeze(dim=1))",
                            "Call"
                        ],
                        [
                            "self.avgpool(ref_curves)",
                            "Call"
                        ],
                        [
                            "torch.flatten(ref_curves, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(ref_curves)",
                            "Call"
                        ],
                        [
                            "self.res_blocks_mid(prob_map.unsqueeze(dim=1))",
                            "Call"
                        ],
                        [
                            "self.avgpool(ref_curves)",
                            "Call"
                        ],
                        [
                            "torch.flatten(ref_curves, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(ref_curves)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_256": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_259": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_262": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_265": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_277": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.downsample_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_282": {
                "variable": {
                    "value": "self.downsample_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_284": {
                "variable": {
                    "value": "self.downsample_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.res_blocks_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.res_blocks_a, self.res_blocks_b, self.res_blocks_c]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_289": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_290": {
                "variable": {
                    "value": "self.regress_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * 4 * 4, 600)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_330": {
                "variable": {
                    "value": "ref_curves",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_curves",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_blocks_mid(prob_map.unsqueeze(dim=1))",
                            "Call"
                        ],
                        [
                            "self.avgpool(ref_curves)",
                            "Call"
                        ],
                        [
                            "torch.flatten(ref_curves, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(ref_curves)",
                            "Call"
                        ],
                        [
                            "self.res_blocks_mid(prob_map.unsqueeze(dim=1))",
                            "Call"
                        ],
                        [
                            "self.avgpool(ref_curves)",
                            "Call"
                        ],
                        [
                            "torch.flatten(ref_curves, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(ref_curves)",
                            "Call"
                        ],
                        [
                            "self.res_blocks_mid(prob_map.unsqueeze(dim=1))",
                            "Call"
                        ],
                        [
                            "self.avgpool(ref_curves)",
                            "Call"
                        ],
                        [
                            "torch.flatten(ref_curves, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(ref_curves)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_369": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_372": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_375": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_378": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_389": {
                "variable": {
                    "value": "self.final_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_390": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_393": {
                "variable": {
                    "value": "self.laternal_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_394": {
                "variable": {
                    "value": "self.laternal_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_395": {
                "variable": {
                    "value": "self.laternal_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_396": {
                "variable": {
                    "value": "self.laternal_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "variable": {
                    "value": "self.laternal_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_400": {
                "variable": {
                    "value": "self.refine_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unetConv2(filters[0], filters[0], self.is_batchnorm), SELayer(filters[0])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_404": {
                "variable": {
                    "value": "self.refine_conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unetConv2(filters[0], filters[0], self.is_batchnorm), unetConv2(filters[0], filters[0], self.is_batchnorm), SELayer(filters[0])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_409": {
                "variable": {
                    "value": "self.refine_conv_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unetConv2(filters[0], filters[0], self.is_batchnorm), unetConv2(filters[0], filters[0], self.is_batchnorm), unetConv2(filters[0], filters[0], self.is_batchnorm), SELayer(filters[0])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_415": {
                "variable": {
                    "value": "self.refine_conv_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[unetConv2(filters[0], filters[0], self.is_batchnorm), unetConv2(filters[0], filters[0], self.is_batchnorm), unetConv2(filters[0], filters[0], self.is_batchnorm), unetConv2(filters[0], filters[0], self.is_batchnorm), SELayer(filters[0])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_424": {
                "variable": {
                    "value": "self.final_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_428": {
                "variable": {
                    "value": "self.downsample_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.downsample_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_432": {
                "variable": {
                    "value": "self.downsample_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_436": {
                "variable": {
                    "value": "self.res_blocks_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.res_blocks_a, self.res_blocks_b, self.res_blocks_c]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_437": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_438": {
                "variable": {
                    "value": "self.regress_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * 4 * 4, 600)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_480": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up_concat2(up3, conv2)",
                            "Call"
                        ],
                        [
                            "self.up_concat2(up3, conv2)",
                            "Call"
                        ],
                        [
                            "self.up_concat2(up3, conv2)",
                            "Call"
                        ],
                        [
                            "self.refine_conv_2(self.laternal_2(up2))",
                            "Call"
                        ],
                        [
                            "F.interpolate(up2, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_481": {
                "variable": {
                    "value": "up3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up_concat3(up4, conv3)",
                            "Call"
                        ],
                        [
                            "self.up_concat3(up4, conv3)",
                            "Call"
                        ],
                        [
                            "self.up_concat3(up4, conv3)",
                            "Call"
                        ],
                        [
                            "self.refine_conv_3(self.laternal_3(up3))",
                            "Call"
                        ],
                        [
                            "F.interpolate(up3, scale_factor=4, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_482": {
                "variable": {
                    "value": "up4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up_concat4(center, conv4)",
                            "Call"
                        ],
                        [
                            "self.up_concat4(center, conv4)",
                            "Call"
                        ],
                        [
                            "self.up_concat4(center, conv4)",
                            "Call"
                        ],
                        [
                            "self.refine_conv_4(self.laternal_4(up4))",
                            "Call"
                        ],
                        [
                            "F.interpolate(up4, scale_factor=8, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_483": {
                "variable": {
                    "value": "up5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refine_conv_5(self.laternal_5(center))",
                            "Call"
                        ],
                        [
                            "F.interpolate(up5, scale_factor=16, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_485": {
                "variable": {
                    "value": "refine_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up1, up2, up3, up4, up5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_497": {
                "variable": {
                    "value": "ref_curves",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_curves",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_blocks_mid(prob_map.unsqueeze(dim=1))",
                            "Call"
                        ],
                        [
                            "self.avgpool(ref_curves)",
                            "Call"
                        ],
                        [
                            "torch.flatten(ref_curves, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(ref_curves)",
                            "Call"
                        ],
                        [
                            "self.res_blocks_mid(prob_map.unsqueeze(dim=1))",
                            "Call"
                        ],
                        [
                            "self.avgpool(ref_curves)",
                            "Call"
                        ],
                        [
                            "torch.flatten(ref_curves, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(ref_curves)",
                            "Call"
                        ],
                        [
                            "self.res_blocks_mid(prob_map.unsqueeze(dim=1))",
                            "Call"
                        ],
                        [
                            "self.avgpool(ref_curves)",
                            "Call"
                        ],
                        [
                            "torch.flatten(ref_curves, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(ref_curves)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_511": {
                "tensors": {
                    "value": "[left, interpolated]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_533": {
                "variable": {
                    "value": "self.init_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_590": {
                "variable": {
                    "value": "self.low_dim_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_591": {
                "variable": {
                    "value": "self.low_dim_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_592": {
                "variable": {
                    "value": "self.low_dim_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_593": {
                "variable": {
                    "value": "self.low_dim_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_594": {
                "variable": {
                    "value": "self.low_dim_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_615": {
                "variable": {
                    "value": "self.W_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.s, self.h, self.w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_616": {
                "variable": {
                    "value": "self.intergate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.s, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_619": {
                "variable": {
                    "value": "self.downsample_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(5, 32, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_621": {
                "variable": {
                    "value": "self.downsample_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_623": {
                "variable": {
                    "value": "self.downsample_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_627": {
                "variable": {
                    "value": "self.res_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.res_blocks_a, self.res_blocks_b, self.res_blocks_c]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_628": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_629": {
                "variable": {
                    "value": "self.regress_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * 4 * 4, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_633": {
                "variable": {
                    "value": "self.regress_anterior_pts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_634": {
                "variable": {
                    "value": "self.regress_posterior_pts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_698": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m_f1, m_f2, m_f3, m_f4, m_f5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_714": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_blocks(y_hat)",
                            "Call"
                        ],
                        [
                            "self.avgpool(y)",
                            "Call"
                        ],
                        [
                            "torch.flatten(y, 1)",
                            "Call"
                        ],
                        [
                            "self.regress_mid(y)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_718": {
                "variable": {
                    "value": "y_r_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y + y_argmax, a_pts, p_pts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_573": {
                "tensors": {
                    "value": "[curves, limits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "*args": {
                    "value": "layers.ResBlock2d(16, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "in_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "in_features": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "tensors": {
                    "value": "[curves, limits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "*args": {
                    "value": "layers.ResBlock2d(16, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_280": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_282": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_284": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_284": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "in_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "in_features": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_335": {
                "tensors": {
                    "value": "[curves, limits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_353": {
                "*args": {
                    "value": "layers.ResBlock2d(16, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_428": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_428": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_430": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_430": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_432": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_432": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_439": {
                "in_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_440": {
                "in_features": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_504": {
                "tensors": {
                    "value": "[curves, limits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_534": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_542": {
                "*args": {
                    "value": "downsample()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_554": {
                "*args": {
                    "value": "layers.ResBlock2d(32, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_571": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_615": {
                "*size": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_616": {
                "in_channels": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_619": {
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_619": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_621": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_621": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_623": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_623": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_630": {
                "in_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_631": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_632": {
                "in_features": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_119": {
                "output_size": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_122": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_124": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_246": {
                "output_size": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_249": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_251": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_359": {
                "output_size": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_362": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_364": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_560": {
                "output_size": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_563": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_564": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_565": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/resnet.py": {
        "torch": {
            "rand_387": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "304",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_151": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_159": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.fc_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(param.shape[0], 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_211": {
                "variable": {
                    "value": "theta[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param[:, 0] * math.pi * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_214": {
                "variable": {
                    "value": "theta[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param[:, 0] * math.pi * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_215": {
                "variable": {
                    "value": "theta[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param[:, 0] * math.pi * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "affine_grid_224": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((param.shape[0], 6), requires_grad=True).cuda()",
                            "Call"
                        ],
                        [
                            "self._param2theta(param)",
                            "Call"
                        ],
                        [
                            "theta.view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "ori_x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_225": {
                "variable": {
                    "value": "align_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ori_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(x)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, ori_x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 1, 400, 304).cuda()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sin_212": {
                "input": {
                    "value": "param[:, 0] * math.pi * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/vgg.py": {
        "torch": {
            "AdaptiveAvgPool2d_32": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "*args": {
                    "value": "*C1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "*args": {
                    "value": "*C2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "*args": {
                    "value": "*C3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "*args": {
                    "value": "*C4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "*args": {
                    "value": "*C5",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_71": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/dicom.py": {
        "torch": {}
    },
    "lib/utils/eval.py": {
        "torch": {
            "sum_291": {
                "variable": {
                    "value": "intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_i * target_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_289": {
                "input": {
                    "value": "target_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target == class_i",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils/logger.py": {
        "torch": {}
    },
    "lib/utils/metrics.py": {
        "torch": {
            "sum_99": {
                "variable": {
                    "value": "intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_label * gt_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_97": {
                "input": {
                    "value": "gt_label",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/midline.py": {
        "torch": {
            "zeros_262": {
                "variable": {
                    "value": "res_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "304",
                            "int"
                        ]
                    ]
                }
            },
            "round_268": {
                "variable": {
                    "value": "x_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg_v[h].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_409": {
                "input": {
                    "value": "gt_curves",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_440": {
                "input": {
                    "value": "gt_curves",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_459": {
                "input": {
                    "value": "gt_curves",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/utils.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'dice_val': dice_val, 'dice_best': dice_best}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_latest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(ckpt_dir, 'ckpt_latest.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_107": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'dice_val': dice_val, 'dice_best': dice_best}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(ckpt_dir, 'ckpt_{}.pth.tar'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_110": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'dice_val': dice_val, 'dice_best': dice_best}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(ckpt_dir, 'ckpt_best.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.dataset('test', cfg.data_param, cfg.transform_param, logger)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.training_setting_param.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "cfg.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "cfg.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.dataset('train', cfg.data_param, cfg.transform_param, logger)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.training_setting_param.batch_size_per_gpu * cfg.devices_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.training_setting_param.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.dataset('val', cfg.data_param, cfg.transform_param, logger)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.training_setting_param.batch_size_per_gpu * cfg.devices_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.training_setting_param.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_51": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cfg.transform_param.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "cfg.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "cfg.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}