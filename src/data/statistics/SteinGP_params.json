{
    "steingp/utils.py": {
        "sklearn": {
            "roc_auc_score_60": {
                "y_true": {
                    "value": "truth",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "steingp/bandwidths.py": {
        "tensorflow": {
            "convert_to_tensor_18": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(0.5 * median / tf.cast(tf.math.log(n + 1.0), dtype=tf.float64))",
                            "Call"
                        ],
                        [
                            "h + self.direction * (self.window_size - self.step) * gap",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "median",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(lower + upper) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * median / tf.cast(tf.math.log(n + 1.0), dtype=tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_42": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(0.5 * median / tf.cast(tf.math.log(n + 1.0), dtype=tf.float64))",
                            "Call"
                        ],
                        [
                            "h + self.direction * (self.window_size - self.step) * gap",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.math.log(n + 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_40": {
                "x": {
                    "value": "n + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "steingp/datasets.py": {
        "tensorflow": {
            "reshape_49": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "generator.sample(seed=seed())",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "tensor": {
                    "value": "y + tf.cast(tfp.distributions.Normal(0, obs_noise).sample(y.shape, seed=seed()), tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "tf.zeros_like(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Xfull[train_idx, :]",
                            "Subscript"
                        ],
                        [
                            "Xfull[train_idx, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_51": {
                "x": {
                    "value": "tfp.distributions.Normal(0, obs_noise).sample(y.shape, seed=seed())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "steingp/gp.py": {
        "tensorflow": {
            "reshape_189": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat((tf.expand_dims(score[0], axis=1), tf.expand_dims(score[1:], axis=1)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat((score[0], tf.expand_dims(score[1], axis=1), tf.expand_dims(score[2:], axis=1)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(t, shape=p.shape)",
                            "Call"
                        ],
                        [
                            "theta.T",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "score_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(objective, model.trainable_variables)",
                            "Call"
                        ],
                        [
                            "tape.gradient(objective, self.trainable_variables)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_163": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_168": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat((score_func[0], tf.expand_dims(score_func[1:], axis=1)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_173": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "score_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(objective, model.trainable_variables)",
                            "Call"
                        ],
                        [
                            "tape.gradient(objective, self.trainable_variables)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_29": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_74": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_132": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat((score_func[0], tf.expand_dims(score_func[1], axis=1), tf.expand_dims(score_func[2:], axis=1)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat((score_func[0], tf.expand_dims(score_func[1:], axis=1)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_35": {
                "values": {
                    "value": "(tf.expand_dims(score[0], axis=1), tf.expand_dims(score[1:], axis=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_79": {
                "values": {
                    "value": "(score[0], tf.expand_dims(score[1], axis=1), tf.expand_dims(score[2:], axis=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_169": {
                "values": {
                    "value": "(score_func[0], tf.expand_dims(score_func[1:], axis=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_139": {
                "values": {
                    "value": "(score_func[0], tf.expand_dims(score_func[1], axis=1), tf.expand_dims(score_func[2:], axis=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_145": {
                "values": {
                    "value": "(score_func[0], tf.expand_dims(score_func[1:], axis=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "input": {
                    "value": "score[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "input": {
                    "value": "score[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "input": {
                    "value": "score[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_170": {
                "input": {
                    "value": "score_func[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_140": {
                "input": {
                    "value": "score_func[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_141": {
                "input": {
                    "value": "score_func[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_146": {
                "input": {
                    "value": "score_func[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "steingp/kernel.py": {
        "tensorflow": {
            "transpose_176": {
                "variable": {
                    "value": "dKxy",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tape.gradient(Kxy, theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_182": {
                "variable": {
                    "value": "x_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "fill_183": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(noise, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_198": {
                "variable": {
                    "value": "median",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(lower + upper) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_199": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * median / tf.cast(tf.math.log(n + 1.0), dtype=tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(X), ndim)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.square(X), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_part_35": {
                "variable": {
                    "value": "x_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "fill_36": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(noise, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_83": {
                "variable": {
                    "value": "l2_pdist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(pdist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_86": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_pdist + c",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_117": {
                "variable": {
                    "value": "sigma_I",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.sigma * tf.eye(N)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_137": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.b",
                            "Attribute"
                        ],
                        [
                            "tf.cast(tfp.distributions.Uniform(low=0.0, high=2 * tf.constant(pi)).sample(sample_shape=(self.n_features, 1)), tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_165": {
                "x": {
                    "value": "-pdist / bw ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_diag_184": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "x_diag + noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_201": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(0.5 * median / tf.cast(tf.math.log(n + 1.0), dtype=tf.float64))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_diag_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "x_diag + noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_43": {
                "variable": {
                    "value": "dK",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tape.gradient(K, theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_61": {
                "x": {
                    "value": "-pdist / bw ** 2 / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_71": {
                "values": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pariwise_distance(X)",
                            "Call"
                        ],
                        [
                            "pariwise_distance(tf.transpose(theta))",
                            "Call"
                        ],
                        [
                            "self.slow_pdist(tf.transpose(theta))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pariwise_distance(tf.transpose(theta))",
                            "Call"
                        ],
                        [
                            "square_distance(t, t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_127": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tfp.distributions.Normal(loc=0.0, scale=1.0).sample(sample_shape=(self.n_features, D))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_132": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tfp.distributions.Uniform(low=0.0, high=2 * tf.constant(pi)).sample(sample_shape=(self.n_features, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_183": {
                "value": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([n], tf.constant(noise, dtype=tf.float64))",
                            "Call"
                        ],
                        [
                            "tf.fill([n], tf.constant(noise, dtype=tf.float64))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_214": {
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ndim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape.ndims - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_216": {
                "a": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(X), ndim), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(X), 1), [-1, 1])",
                            "Call"
                        ],
                        [
                            "1.0 / tf.math.sqrt(tf.cast(self.n_features, tf.float64))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GradientTape_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_28": {
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "a": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(X), ndim), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(tf.square(X), 1), [-1, 1])",
                            "Call"
                        ],
                        [
                            "1.0 / tf.math.sqrt(tf.cast(self.n_features, tf.float64))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_36": {
                "value": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([n], tf.constant(noise, dtype=tf.float64))",
                            "Call"
                        ],
                        [
                            "tf.fill([n], tf.constant(noise, dtype=tf.float64))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_82": {
                "a": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "pdist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pariwise_distance(X)",
                            "Call"
                        ],
                        [
                            "pariwise_distance(tf.transpose(theta))",
                            "Call"
                        ],
                        [
                            "self.slow_pdist(tf.transpose(theta))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pariwise_distance(tf.transpose(theta))",
                            "Call"
                        ],
                        [
                            "square_distance(t, t)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "a": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm * tf.cast(tf.math.sqrt(2.0), dtype=tf.float64) * tf.math.cos(self.sigma * tf.matmul(W, X, transpose_b=True) + B)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm * tf.cast(tf.math.sqrt(2.0), dtype=tf.float64) * tf.math.cos(self.sigma * tf.matmul(W, X, transpose_b=True) + B)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_138": {
                "x": {
                    "value": "tf.cast(self.n_features, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_139": {
                "x": {
                    "value": "self.sigma * tf.matmul(W, X, transpose_b=True) + B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_155": {
                "a": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_175": {
                "a": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_199": {
                "x": {
                    "value": "tf.math.log(n + 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_214": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_28": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "a": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_57": {
                "a": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_70": {
                "value": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "eye_117": {
                "num_rows": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_138": {
                "x": {
                    "value": "self.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_139": {
                "x": {
                    "value": "tf.math.sqrt(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_199": {
                "x": {
                    "value": "n + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_29": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_69": {
                "x": {
                    "value": "tf.linalg.norm(theta[i, :, :] - theta[j, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_139": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_69": {
                "tensor": {
                    "value": "theta[i, :, :] - theta[j, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w",
                            "Attribute"
                        ],
                        [
                            "tf.cast(tfp.distributions.Normal(loc=0.0, scale=1.0).sample(sample_shape=(self.n_features, D)), tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_134": {
                "value": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "steingp/svgd.py": {
        "tensorflow": {
            "constant_221": {
                "variable": {
                    "value": "historical_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_258": {
                "variable": {
                    "value": "grad_square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.matmul(Kxy, score_fn) + dKxy) / n_particles",
                            "BinOp"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_264": {
                "variable": {
                    "value": "adj_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.matmul(Kxy, score_fn) + dKxy) / n_particles",
                            "BinOp"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "fudge_factor + tf.sqrt(historical_grad)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "self.historical_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "expected_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_101": {
                "variable": {
                    "value": "grad_square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.matmul(Kxy, score_fn) + dKxy) / n_particles",
                            "BinOp"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_108": {
                "variable": {
                    "value": "adj_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.matmul(Kxy, score_fn) + dKxy) / n_particles",
                            "BinOp"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.fudge_factor + tf.sqrt(self.historical_grad)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_129": {
                "variable": {
                    "value": "self.historical_grad_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_181": {
                "variable": {
                    "value": "score_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_207": {
                "variable": {
                    "value": "grad_square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.matmul(Kxy, score_fn) + dKxy) / n_particles",
                            "BinOp"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_213": {
                "variable": {
                    "value": "adj_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.matmul(Kxy, score_fn) + dKxy) / n_particles",
                            "BinOp"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ],
                        [
                            "self._phi_hat(K, score_fn, dK)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.fudge_factor + tf.sqrt(hist_grad)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_241": {
                "variable": {
                    "value": "score_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_284": {
                "values": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_60": {
                "values": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "score_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_165": {
                "values": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_282": {
                "variable": {
                    "value": "smp",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, n_particles)",
                            "Tuple"
                        ],
                        [
                            "(p.shape[0], n_particles)",
                            "Tuple"
                        ],
                        [
                            "(1, self.n_particles)",
                            "Tuple"
                        ],
                        [
                            "(p.shape[0], self.n_particles)",
                            "Tuple"
                        ],
                        [
                            "(1, self.n_particles)",
                            "Tuple"
                        ],
                        [
                            "(p.shape[0], self.n_particles)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_58": {
                "variable": {
                    "value": "smp",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, n_particles)",
                            "Tuple"
                        ],
                        [
                            "(p.shape[0], n_particles)",
                            "Tuple"
                        ],
                        [
                            "(1, self.n_particles)",
                            "Tuple"
                        ],
                        [
                            "(p.shape[0], self.n_particles)",
                            "Tuple"
                        ],
                        [
                            "(1, self.n_particles)",
                            "Tuple"
                        ],
                        [
                            "(p.shape[0], self.n_particles)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "incremants",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "uniform_163": {
                "variable": {
                    "value": "smp",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, n_particles)",
                            "Tuple"
                        ],
                        [
                            "(p.shape[0], n_particles)",
                            "Tuple"
                        ],
                        [
                            "(1, self.n_particles)",
                            "Tuple"
                        ],
                        [
                            "(p.shape[0], self.n_particles)",
                            "Tuple"
                        ],
                        [
                            "(1, self.n_particles)",
                            "Tuple"
                        ],
                        [
                            "(p.shape[0], self.n_particles)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "input_tensor": {
                    "value": "objs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_185": {
                "a": {
                    "value": "adj_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(grads, fudge_factor + tf.sqrt(historical_grad))",
                            "Call"
                        ],
                        [
                            "self.adagrad(grads, i)",
                            "Call"
                        ],
                        [
                            "tf.divide(grads, self.fudge_factor + tf.sqrt(self.historical_grad))",
                            "Call"
                        ],
                        [
                            "self.adagrad(grads, nit, self.historical_grad_h)",
                            "Call"
                        ],
                        [
                            "tf.divide(grads, self.fudge_factor + tf.sqrt(hist_grad))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_197": {
                "variable": {
                    "value": "incremants",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_245": {
                "a": {
                    "value": "adj_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(grads, fudge_factor + tf.sqrt(historical_grad))",
                            "Call"
                        ],
                        [
                            "self.adagrad(grads, i)",
                            "Call"
                        ],
                        [
                            "tf.divide(grads, self.fudge_factor + tf.sqrt(self.historical_grad))",
                            "Call"
                        ],
                        [
                            "self.adagrad(grads, nit, self.historical_grad_h)",
                            "Call"
                        ],
                        [
                            "tf.divide(grads, self.fudge_factor + tf.sqrt(hist_grad))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_246": {
                "input_tensor": {
                    "value": "objs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "multiply_262": {
                "x": {
                    "value": "historical_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "historical_grad + grad_square",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(historical_grad, alpha) + (1 - alpha) * grad_square",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_264": {
                "x": {
                    "value": "historical_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "historical_grad + grad_square",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(historical_grad, alpha) + (1 - alpha) * grad_square",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_63": {
                "a": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "score_func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "a": {
                    "value": "adj_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(grads, fudge_factor + tf.sqrt(historical_grad))",
                            "Call"
                        ],
                        [
                            "self.adagrad(grads, i)",
                            "Call"
                        ],
                        [
                            "tf.divide(grads, self.fudge_factor + tf.sqrt(self.historical_grad))",
                            "Call"
                        ],
                        [
                            "self.adagrad(grads, nit, self.historical_grad_h)",
                            "Call"
                        ],
                        [
                            "tf.divide(grads, self.fudge_factor + tf.sqrt(hist_grad))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_83": {
                "input_tensor": {
                    "value": "objs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "multiply_106": {
                "x": {
                    "value": "self.historical_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_109": {
                "x": {
                    "value": "self.historical_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "a": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "score_func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_211": {
                "x": {
                    "value": "hist_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hist_grad + grad_square",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(hist_grad, self.alpha) + (1 - self.alpha) * grad_square",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "x": {
                    "value": "hist_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hist_grad + grad_square",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(hist_grad, self.alpha) + (1 - self.alpha) * grad_square",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_243": {
                "a": {
                    "value": "Kxy",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "score_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack(scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack(scores, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_89": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_196": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}