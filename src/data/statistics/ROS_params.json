{
    "code/compute_score.py": {
        "sklearn": {}
    },
    "code/steps_separation_adaptation.py": {
        "sklearn": {}
    },
    "code/transformations.py": {
        "sklearn": {}
    },
    "code/utilities.py": {
        "tensorflow": {
            "FileWriter_156": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_163": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.compat.v1.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_189": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "im_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_198": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_209": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "HistogramProto_222": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_236": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "numel_84": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_277": {
                "input": {
                    "value": "predict_prob + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_278": {
                "input": {
                    "value": "instance_level_weight * ce * class_level_weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_301": {
                "input": {
                    "value": "instance_level_weight * bce * class_level_weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_321": {
                "input": {
                    "value": "predict_prob + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_322": {
                "input": {
                    "value": "instance_level_weight * entropy * class_level_weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_300": {
                "input": {
                    "value": "1.0 - predict_prob + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/center_loss.py": {
        "torch": {
            "arange_37": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_33": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_34": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_34": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_24": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/data.py": {
        "torch": {}
    },
    "code/networks.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.__in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.__in_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.bn_sharedfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.__in_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_45": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mod",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mod2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottle_neck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottle_neck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottle_neck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottle_neck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_201": {
                "tensors": {
                    "value": "outs_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.__getattr__('discriminator_feat_%04d' % i)(x) for i in range(self.n)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "nn.Linear(4096 * 2, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "*args": {
                    "value": "nn.Linear(2048 * 2, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "*args": {
                    "value": "nn.Linear(4096 * 2, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "*args": {
                    "value": "nn.Linear(2048 * 2, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "nn.BatchNorm1d(bottle_neck_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_136": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "*args": {
                    "value": "nn.BatchNorm1d(bottle_neck_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_148": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "in_features": {
                    "value": "4096 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_170": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_171": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_175": {
                "in_features": {
                    "value": "2048 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_176": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_177": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "4096 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_184": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_185": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "2048 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_189": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_190": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "ndarray": {
                    "value": "np.asarray([0.485, 0.456, 0.406], dtype=np.float32).reshape((1, 3, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "np.asarray([0.229, 0.224, 0.225], dtype=np.float32).reshape((1, 3, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "ndarray": {
                    "value": "np.asarray([0.485, 0.456, 0.406], dtype=np.float32).reshape((1, 3, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "np.asarray([0.229, 0.224, 0.225], dtype=np.float32).reshape((1, 3, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_132": {
                "num_features": {
                    "value": "bottle_neck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_133": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_144": {
                "num_features": {
                    "value": "bottle_neck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_145": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/train.py": {
        "torch": {
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}