{
    "data/dataset.py": {
        "torch": {
            "zeros_93": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(string)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "CrossEntropyLoss_63": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TCANet(args.emsize, n_dict, num_chans, args.valid_len, args.num_subblocks, temp_attn=args.temp_attn, nheads=args.nheads, en_res=args.en_res, conv=args.conv, dropout=args.dropout, emb_dropout=args.emb_dropout, key_size=args.key_size, kernel_size=args.ksize, tied_weights=args.tied, dataset_name=args.dataset_name, visual=args.visual)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "load_model(model, args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__107": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/optimizations.py": {
        "torch": {
            "dropout_59": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, name_w + '_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/tcanet.py": {
        "torch": {
            "Embedding_24": {
                "variable": {
                    "value": "self.word_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "emb_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.word_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_63": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(y[:, :, -1])",
                            "Call"
                        ],
                        [
                            "self.decoder(y[:, :, -1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_68": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(y[:, :, -1])",
                            "Call"
                        ],
                        [
                            "self.decoder(y[:, :, -1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/tcn_block.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size if i == 0 else num_channels[i - 1]",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "key_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_size",
                            "Method Argument"
                        ],
                        [
                            "key_size",
                            "Method Argument"
                        ],
                        [
                            "key_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size if i == 0 else num_channels[i - 1]",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "key_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_size",
                            "Method Argument"
                        ],
                        [
                            "key_size",
                            "Method Argument"
                        ],
                        [
                            "key_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size if i == 0 else num_channels[i - 1]",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "value_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_query(input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(keys, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "weight_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp / self.sqrt_key_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_49": {
                "variable": {
                    "value": "value_attentioned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(temp / self.sqrt_key_size, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_49": {
                "variable": {
                    "value": "value_attentioned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "*args": {
                    "value": "*layers_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "transpose_42": {
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_keys(input)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.linear_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inputs * self.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_inputs",
                            "Method Argument"
                        ],
                        [
                            "n_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_72": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_inputs",
                            "Method Argument"
                        ],
                        [
                            "n_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_87": {
                "module": {
                    "value": "nn.Conv1d(n_inputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_90": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_118": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(x) for att in self.attentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "weight_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weight.sum(dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_87": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_inputs",
                            "Method Argument"
                        ],
                        [
                            "n_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_93": {
                "module": {
                    "value": "nn.Conv1d(n_outputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_93": {
                "in_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/tcn_block_time_test.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size if i == 0 else num_channels[i - 1]",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "key_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_size",
                            "Method Argument"
                        ],
                        [
                            "key_size",
                            "Method Argument"
                        ],
                        [
                            "key_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size if i == 0 else num_channels[i - 1]",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "key_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key_size",
                            "Method Argument"
                        ],
                        [
                            "key_size",
                            "Method Argument"
                        ],
                        [
                            "key_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_size if i == 0 else num_channels[i - 1]",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "value_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_46": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_query(input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(keys, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "weight_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp / self.sqrt_key_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_58": {
                "variable": {
                    "value": "value_attentioned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(temp / self.sqrt_key_size, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_58": {
                "variable": {
                    "value": "value_attentioned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*layers_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "transpose_46": {
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_keys(input)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.linear_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inputs * self.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_inputs",
                            "Method Argument"
                        ],
                        [
                            "n_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_91": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_inputs",
                            "Method Argument"
                        ],
                        [
                            "n_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_103": {
                "module": {
                    "value": "nn.Conv1d(n_inputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_106": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(x) for att in self.attentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "variable": {
                    "value": "weight_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weight.sum(dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_103": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_inputs",
                            "Method Argument"
                        ],
                        [
                            "n_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_109": {
                "module": {
                    "value": "nn.Conv1d(n_outputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_109": {
                "in_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ],
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/__init__.py": {
        "torch": {
            "DataLoader_16": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RawDataset(dir_data_root, dataset_name, task, seq_len, valid_len, is_corpus)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/dataset.py": {
        "torch": {
            "zeros_108": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(string)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_24": {
                "variable": {
                    "value": "self.permute",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1111",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.dir_model + '/' + args.log + '_model.pt'",
                            "BinOp"
                        ],
                        [
                            "args.dir_model + '/' + args.log + '_model.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_27": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.dir_model + '/' + args.log + '_model.pt'",
                            "BinOp"
                        ],
                        [
                            "args.dir_model + '/' + args.log + '_model.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_41": {
                "variable": {
                    "value": "visual_info_old",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_46": {
                "obj": {
                    "value": "visual_info_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visual_info_old + visual_info_all",
                            "BinOp"
                        ],
                        [
                            "visual_info_all",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}