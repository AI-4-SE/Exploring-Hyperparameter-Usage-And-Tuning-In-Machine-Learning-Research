{
    "src/loss.py": {
        "tensorflow": {
            "log_8": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_9": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(10, dtype=numerator.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_16": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "s * s_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_17": {
                "variable": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "s * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "variable": {
                    "value": "s_target_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "s_target * s_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_21": {
                "variable": {
                    "value": "e_noise_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "e_noise * e_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_38": {
                "variable": {
                    "value": "sisnr_perm_invariant",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sisnr_perm0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sisnr_perm0_spk0 + sisnr_perm0_spk1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "sisnr_perm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sisnr_perm1_spk0 + sisnr_perm1_spk1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_9": {
                "value": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numerator.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/network.py": {
        "tensorflow": {
            "Bidirectional_25": {
                "variable": {
                    "value": "self.intra_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "keras.layers.LSTM(units=self.units_per_lstm // 2, return_sequences=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_26": {
                "variable": {
                    "value": "self.intra_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_filters_in_encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_27": {
                "variable": {
                    "value": "self.intra_ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Bidirectional_29": {
                "variable": {
                    "value": "self.inter_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "keras.layers.LSTM(units=self.units_per_lstm // 2, return_sequences=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_30": {
                "variable": {
                    "value": "self.inter_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.fc_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_31": {
                "variable": {
                    "value": "self.inter_ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "T_shaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size * self.num_overlapping_chunks, self.chunk_size, self.num_filters_in_encoder)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.intra_rnn(T_shaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U, (self.batch_size * self.num_overlapping_chunks * self.chunk_size, self.units_per_lstm))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size * self.num_overlapping_chunks * self.chunk_size, self.units_per_lstm)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "U_Hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U_Hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.intra_fc(U)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U_Hat, (self.batch_size, self.num_overlapping_chunks * self.chunk_size * self.num_filters_in_encoder))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.num_overlapping_chunks * self.chunk_size * self.num_filters_in_encoder)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "LN_U_Hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "LN_U_Hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.intra_ln(U_Hat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(LN_U_Hat, (self.batch_size, self.num_overlapping_chunks, self.chunk_size, self.num_filters_in_encoder))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.num_overlapping_chunks, self.chunk_size, self.num_filters_in_encoder)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "variable": {
                    "value": "T_Hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "T_Hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T + LN_U_Hat",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(T_Hat, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "T_Hat_shaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "T_Hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T + LN_U_Hat",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(T_Hat, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size * self.chunk_size, self.num_overlapping_chunks, self.num_filters_in_encoder)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inter_rnn(T_Hat_shaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, (self.batch_size * self.chunk_size * self.num_overlapping_chunks, self.units_per_lstm))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size * self.chunk_size * self.num_overlapping_chunks, self.units_per_lstm)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "V_Hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V_Hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inter_fc(V)",
                            "Call"
                        ],
                        [
                            "tf.reshape(V_Hat, (self.batch_size, self.num_overlapping_chunks * self.fc_units * self.chunk_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.num_overlapping_chunks * self.fc_units * self.chunk_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "T_Out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "LN_V_Hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inter_ln(V_Hat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.chunk_size, self.num_overlapping_chunks, self.fc_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "variable": {
                    "value": "T_Out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "T_Out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(LN_V_Hat, (self.batch_size, self.chunk_size, self.num_overlapping_chunks, self.fc_units))",
                            "Call"
                        ],
                        [
                            "T_Hat + T_Out",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(T_Out, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_concat[:, ::self.num_full_chunks, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([x, x_concat[:, i::self.num_full_chunks, :, :]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.overlap_and_add(x, self.chunk_advance)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.signal_length_samples // self.chunk_size, self.chunk_size, self.num_filters_in_encoder)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_81": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_concat[:, ::self.num_full_chunks, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([x, x_concat[:, i::self.num_full_chunks, :, :]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.overlap_and_add(x, self.chunk_advance)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shift": {
                    "value": "-self.chunk_advance",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.roll(x, shift=-self.chunk_advance, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x2, (self.batch_size, self.signal_length_samples // self.chunk_size, self.chunk_size, self.num_filters_in_encoder))",
                            "Call"
                        ],
                        [
                            "x2[:, :-1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.signal_length_samples // self.chunk_size, self.chunk_size, self.num_filters_in_encoder)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_92": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_concat[:, ::self.num_full_chunks, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([x, x_concat[:, i::self.num_full_chunks, :, :]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.overlap_and_add(x, self.chunk_advance)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "overlap_and_add_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "signal": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_concat[:, ::self.num_full_chunks, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([x, x_concat[:, i::self.num_full_chunks, :, :]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.overlap_and_add(x, self.chunk_advance)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "self.chunk_advance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_101": {
                "variable": {
                    "value": "network_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.signal_length_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[decoded_spk0, decoded_spk1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Model_126": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.Input(shape=[self.signal_length_samples])",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([decoded_spk0, decoded_spk1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, x_concat[:, i::self.num_full_chunks, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_concat[:, ::self.num_full_chunks, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([x, x_concat[:, i::self.num_full_chunks, :, :]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.overlap_and_add(x, self.chunk_advance)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "overlap_and_add_97": {
                "signal": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_concat[:, ::self.num_full_chunks, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([x, x_concat[:, i::self.num_full_chunks, :, :]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.overlap_and_add(x, self.chunk_advance)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "self.encoder_hop_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_25": {
                "units": {
                    "value": "self.units_per_lstm // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_29": {
                "units": {
                    "value": "self.units_per_lstm // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1D_103": {
                "filters": {
                    "value": "self.num_filters_in_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.encoder_filter_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.encoder_hop_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "input": {
                    "value": "network_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.Input(shape=[self.signal_length_samples])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Lambda_108": {
                "function": {
                    "value": "self.segment_encoded_signal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Lambda_113": {
                "function": {
                    "value": "self.overlap_and_add_mask_segments",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_118": {
                "units": {
                    "value": "self.encoder_filter_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_121": {
                "units": {
                    "value": "self.encoder_filter_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Lambda_119": {
                "function": {
                    "value": "self.overlap_and_add_in_decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Lambda_122": {
                "function": {
                    "value": "self.overlap_and_add_in_decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "tensorflow": {
            "TensorBoard_80": {
                "variable": {
                    "value": "tensorboard_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(tensorboard_dir)",
                    "type": "Call",
                    "possible_values": []
                },
                "update_freq": {
                    "value": "batch",
                    "type": "str",
                    "possible_values": []
                },
                "write_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_84": {
                "variable": {
                    "value": "model_save_callbback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(experiment_dir, 'state_epoch_{epoch}.h5')",
                    "type": "Call",
                    "possible_values": []
                },
                "save_freq": {
                    "value": "epoch",
                    "type": "str",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "load_weights_on_restart": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_97": {
                "variable": {
                    "value": "learning_rate_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scheduler",
                            "Call"
                        ]
                    ]
                }
            },
            "EarlyStopping_98": {
                "variable": {
                    "value": "early_stopping_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "patience": {
                    "value": "num_epochs_for_early_stopping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_epochs_for_early_stopping",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "adam",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "INITIAL_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "clipnorm": {
                    "value": "optimizer_clip_l2_norm_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_clip_l2_norm_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "create_file_writer_42": {
                "variable": {
                    "value": "valid_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "audio_44": {
                "name": {
                    "value": "f'{epoch}_audio'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(output, (self.n_utterances * NUM_SPEAKERS, self.utterance_length_in_samples, 1)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "sample_rate": {
                    "value": "self.samplerate_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoding": {
                    "value": "wav",
                    "type": "str",
                    "possible_values": []
                },
                "step": {
                    "value": "self._total_batches_seen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "NUM_LOG_AUDIO_FILES_PER_EPOCH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}