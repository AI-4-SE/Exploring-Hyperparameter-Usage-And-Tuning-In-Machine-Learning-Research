{
    "idas/metrics/py_metrics.py": {
        "sklearn": {
            "confusion_matrix_35": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_actual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(true).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(pred).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/layers/noise_operations.py": {
        "tensorflow": {
            "cond_89": {
                "variable": {
                    "value": "forward_pass",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : forward_pass",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : input_tensor",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_42": {
                "variable": {
                    "value": "forward_pass",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : input_tensor + noise",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : input_tensor",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "clip_by_value_36": {
                "variable": {
                    "value": "fw_pass",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'InstanceNoiseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'LabelNoiseLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cond_71": {
                "variable": {
                    "value": "fw_pass",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(c, prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : incoming",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : -1.0 * incoming",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_80": {
                "variable": {
                    "value": "fw_pass",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(c, prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : incoming",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.abs(incoming - 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'InstanceNoiseLayer'",
                            "MethodArgument"
                        ],
                        [
                            "'LabelNoiseLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "truncate_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "flip_sign",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "flip_label",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_41": {
                "input": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "uniform_70": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_71": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.uniform([1], minval=0.0, maxval=1.0, dtype=tf.float32)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.random.uniform([1], minval=0.0, maxval=1.0, dtype=tf.float32)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_79": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_80": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.uniform([1], minval=0.0, maxval=1.0, dtype=tf.float32)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.random.uniform([1], minval=0.0, maxval=1.0, dtype=tf.float32)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_80": {
                "x": {
                    "value": "incoming - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/layers/spectral_norm.py": {
        "tensorflow": {
            "reshape_27": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_43": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_44": {
                "variable": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_46": {
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_38": {
                "variable": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(u_hat, tf.transpose(w))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_41": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(v_hat, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_46": {
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_48": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_37": {
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "filter": {
                    "value": "spectral_norm(w, self.iteration)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_89": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/multi_res_discriminator.py": {
        "tensorflow": {
            "zeros_initializer_24": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_dict['lvl_0']",
                            "Subscript"
                        ],
                        [
                            "instance_noise_layer(input_0, self.is_training, mean=0.0, stddev=0.2) if self.instance_noise else input_0",
                            "IfExp"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.n_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_121": {
                "variable": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(input_0, filters=self.n_filters, kernel_size=4, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(layer, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self._conv_and_maybe_downsample_block(layer_and_concat, n_filters=self.n_filters * 2 * 2 ** i, stride=1 if i == self.n_blocks - 1 else 2, scope='sn_conv_{0}'.format(str(i)))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_150": {
                "variable": {
                    "value": "n_norm_act",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "n_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "spectral_norm_conv2d(incoming, filters=n_filters, kernel_size=4, stride=stride, padding='same')",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_97": {
                "variable": {
                    "value": "in_dict[lvl_{0}.format(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "images": {
                    "value": "tensor_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[in_shape[1] // 2 ** i, in_shape[2] // 2 ** i]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_124": {
                "variable": {
                    "value": "squeezed_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(input_0, filters=self.n_filters, kernel_size=4, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(layer, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self._conv_and_maybe_downsample_block(layer_and_concat, n_filters=self.n_filters * 2 * 2 ** i, stride=1 if i == self.n_blocks - 1 else 2, scope='sn_conv_{0}'.format(str(i)))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "13",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "layer_and_concat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[squeezed_layer, input_i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_168": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(w, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.glorot_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_171": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "spectral_norm_conv2d(incoming, filters=1, kernel_size=4, stride=1, padding='valid', scope='sn_conv_out')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(incoming, filters=1, kernel_size=(w, h), strides=1, padding='valid', kernel_initializer=tf.glorot_uniform_initializer(), bias_initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_170": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/multi_res_segmentor.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_173": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_178": {
                "variable": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "upsampled",
                            "Name"
                        ],
                        [
                            "layers.conv2d(upsampled, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_180": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "conv1",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_185": {
                "variable": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_187": {
                "variable": {
                    "value": "pool",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_215": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv1_act, concat_layer_in]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_217": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([conv1_act, concat_layer_in], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_221": {
                "variable": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_223": {
                "variable": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_227": {
                "variable": {
                    "value": "conv3_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv2_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_244": {
                "variable": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_248": {
                "variable": {
                    "value": "code1_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(code1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_250": {
                "variable": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "code1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(code1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_254": {
                "variable": {
                    "value": "code2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(code1_act, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(code2, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_263": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_channels_out",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "Bottleneck",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_normalization_177": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "upsampled",
                            "Name"
                        ],
                        [
                            "layers.conv2d(upsampled, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_184": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_transpose_199": {
                "variable": {
                    "value": "upsampled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_206": {
                "variable": {
                    "value": "upsampled",
                    "type": "Name",
                    "possible_values": []
                },
                "images": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_208": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "upsampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d_transpose(incoming, filters=nb_filters, kernel_size=2, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(incoming, size=[new_height, new_width], align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_211": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "upsampled",
                            "Name"
                        ],
                        [
                            "layers.conv2d(upsampled, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_normalization_220": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_normalization_226": {
                "variable": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv2_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_230": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.n_out_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_232": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv2_act, filters=self.n_out_att, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_233": {
                "variable": {
                    "value": "attention_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_normalization_247": {
                "variable": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(code1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_253": {
                "variable": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(code1_act, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(code2, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "one_hot_270": {
                "indices": {
                    "value": "tf.argmax(self.prediction, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_272": {
                "logits": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "concat_layer_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "AttentionMap",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_270": {
                "input": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "config.py": {
        "tensorflow": {
            "DEFINE_string_20": {
                "name": {
                    "value": "RUN_ID",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Unique identifier for the experiment",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mark_flag_as_required_21": {
                "flag_name": {
                    "value": "RUN_ID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_26": {
                "name": {
                    "value": "experiment",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": " Experiment to run. ",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mark_flag_as_required_27": {
                "flag_name": {
                    "value": "experiment",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_33": {
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "b_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "n_epochs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training epochs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_44": {
                "name": {
                    "value": "augment",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Perform data augmentation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_45": {
                "name": {
                    "value": "standardize",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Perform data standardization (z-score)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_52": {
                "name": {
                    "value": "verbose",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Verbosity, for print reports.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_55": {
                "name": {
                    "value": "tensorboard_on",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True: save tensorboard logs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_56": {
                "name": {
                    "value": "skip_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "3000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "frequency of printing batch report",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "train_summaries_skip",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of skips before writing summaries for training steps (used to reduce its verbosity; put 1 to avoid this)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_59": {
                "name": {
                    "value": "tensorboard_verbose",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True: save also layers weights every N epochs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "num_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of threads for loading data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "CUDA_VISIBLE_DEVICE",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "visible gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_72": {
                "name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": " Dataset name. ",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_73": {
                "name": {
                    "value": "data_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": " Path of data files. ",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mark_flag_as_required_74": {
                "flag_name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mark_flag_as_required_75": {
                "flag_name": {
                    "value": "data_path",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_76": {
                "name": {
                    "value": "results_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": ".",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "results directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_79": {
                "name": {
                    "value": "n_sup_vols",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\" Number of labelled data to use as training volumes (e.g. 'perc25')\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_80": {
                "name": {
                    "value": "split_number",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\" Split number for cross-validation (e.g. 'split0') \"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mark_flag_as_required_81": {
                "flag_name": {
                    "value": "n_sup_vols",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mark_flag_as_required_82": {
                "flag_name": {
                    "value": "split_number",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data_interface/interfaces/acdc/acdc_disc_interface.py": {
        "tensorflow": {
            "reshape_76": {
                "variable": {
                    "value": "y_train",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(y_train, angles[0], interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(y_train, translations, interpolation='NEAREST')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_108": {
                "variable": {
                    "value": "_train_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_train_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_109": {
                "variable": {
                    "value": "_valid_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_validation_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "'{0}_data'.format(self.dataset_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "input_data",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_input_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_163": {
                "variable": {
                    "value": "input_data",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "input_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(_input_data, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.cast(input_data, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unbatch_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbatch_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_161": {
                "name": {
                    "value": "disc_data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "py_func_116": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_122": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_132": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_interface/interfaces/acdc/acdc_sup_interface.py": {
        "tensorflow": {
            "reshape_78": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_channels_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "y_train",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(y_train, angles[0], interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(y_train, translations, interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.cast(y_train, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_90": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.025",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_91": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.95",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "y_train",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(y_train, angles[0], interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(y_train, translations, interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.cast(y_train, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_138": {
                "variable": {
                    "value": "_train_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_train_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_139": {
                "variable": {
                    "value": "_valid_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_validation_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_140": {
                "variable": {
                    "value": "_test_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_test_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_136": {
                "name": {
                    "value": "'{0}_data'.format(self.dataset_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "input_data",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_input_data",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_channels_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_210": {
                "variable": {
                    "value": "input_data",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "input_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(_input_data, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.cast(input_data, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "output_data",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_output_data",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_215": {
                "variable": {
                    "value": "output_data",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "output_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(_output_data, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.cast(output_data, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_98": {
                "input": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unbatch_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbatch_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_207": {
                "name": {
                    "value": "input_sup",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_212": {
                "name": {
                    "value": "output_sup",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "py_func_148": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename, standardize]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_154": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename, standardize]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_160": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename, standardize]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data_interface/interfaces/acdc/acdc_sup_scrib_interface.py": {
        "tensorflow": {
            "reshape_78": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_channels_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "y_train_scrib",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_train_scrib",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_train_scrib, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(y_train_scrib, angles[0], interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(y_train_scrib, translations, interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.cast(y_train_scrib, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "y_train_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_train_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_train_mask, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(y_train_mask, angles[0], interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(y_train_mask, translations, interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.cast(y_train_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_93": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.025",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_94": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.95",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_96": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "y_train_scrib",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_train_scrib",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_train_scrib, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(y_train_scrib, angles[0], interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(y_train_scrib, translations, interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.cast(y_train_scrib, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_98": {
                "variable": {
                    "value": "y_train_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_train_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_train_mask, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(y_train_mask, angles[0], interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(y_train_mask, translations, interpolation='NEAREST')",
                            "Call"
                        ],
                        [
                            "tf.cast(y_train_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_145": {
                "variable": {
                    "value": "_train_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_train_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "_valid_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_validation_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_147": {
                "variable": {
                    "value": "_test_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_test_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_143": {
                "name": {
                    "value": "'{0}_data'.format(self.dataset_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "input_img",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_input_img",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_channels_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_217": {
                "variable": {
                    "value": "input_img",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "input_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(_input_img, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.cast(input_img, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "output_scrib",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_output_scrib",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_222": {
                "variable": {
                    "value": "output_scrib",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "output_scrib",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(_output_scrib, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.cast(output_scrib, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "output_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_output_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_227": {
                "variable": {
                    "value": "output_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "output_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(_output_mask, shape=[-1, self.input_size[0], self.input_size[1], self.n_classes])",
                            "Call"
                        ],
                        [
                            "tf.cast(output_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_102": {
                "input": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_train, shape=[-1, self.input_size[0], self.input_size[1], self.n_channels_in])",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x_train, angles[0], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.translate(x_train, translations, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(x_train, max_delta=0.025)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x_train, lower=0.95, upper=1.05)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_train, tf.float32)",
                            "Call"
                        ],
                        [
                            "x_train + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unbatch_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbatch_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_214": {
                "name": {
                    "value": "input_img_sup",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_219": {
                "name": {
                    "value": "output_scrib_sup",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_224": {
                "name": {
                    "value": "output_mask_sup",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "py_func_155": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename, standardize]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_161": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename, standardize]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_167": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename, standardize]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data_interface/interfaces/acdc/acdc_unsup_interface.py": {
        "tensorflow": {
            "cast_110": {
                "x": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_142": {
                "variable": {
                    "value": "_train_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_train_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_143": {
                "variable": {
                    "value": "_valid_data",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_validation_paths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "'{0}_data'.format(self.dataset_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "input_data",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_input_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size[0], self.input_size[1], self.n_channels_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unbatch_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbatch_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_193": {
                "name": {
                    "value": "unsup_data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "py_func_150": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename, standardize, augment]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_156": {
                "func": {
                    "value": "self.data_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename, standardize, False]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_interface/utils_acdc/prepare_dataset.py": {
        "tensorflow": {
            "device_219": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_221": {
                "indices": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/acdc/model.py": {
        "tensorflow": {
            "Variable_58": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "FLAGS.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "self.last_val_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "10000000000.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "last_val_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "self.g_train_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_train_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_113": {
                "variable": {
                    "value": "self.g_valid_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_validation_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "self.g_test_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_test_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "self.g_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_epoch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "up_value",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "update_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_125": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "self.global_seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_325": {
                "variable": {
                    "value": "w_dynamic",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stop_gradient(self.sup_disc_loss / self.masked_wxentropy_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_343": {
                "variable": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_372": {
                "variable": {
                    "value": "self.global_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.train_op_sup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "train_op_generator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen_optimizer.apply_gradients(gen_grads_and_vars, global_step=self.g_train_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_434": {
                "variable": {
                    "value": "self.sup_train_scalar_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sup_train_scalar_summaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tr_dice_loss, tr_adv_disc, tr_adv_gen, tr_wxentropy_loss, tr_disc_loss]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_435": {
                "variable": {
                    "value": "self.sup_valid_scalar_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sup_valid_scalar_summaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[val_dice_loss, val_adv_disc, val_adv_gen, val_wxentropy_loss, val_disc_loss]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_439": {
                "variable": {
                    "value": "self.all_train_scalar_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "all_train_summaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_447": {
                "variable": {
                    "value": "self.sup_valid_images_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sup_valid_images_summaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[img_inp_s, img_mask, img_pred_mask]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_448": {
                "variable": {
                    "value": "self.sup_test_images_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sup_test_images_summaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img_test_results",
                            "Name"
                        ]
                    ]
                }
            },
            "FileWriter_624": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.graph_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_627": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_388": {
                "variable": {
                    "value": "tr_adv_disc",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train/adv_disc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.adv_disc_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_389": {
                "variable": {
                    "value": "tr_adv_gen",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train/adv_gen",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.adv_gen_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_392": {
                "variable": {
                    "value": "val_adv_disc",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "validation/adv_disc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.adv_disc_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_393": {
                "variable": {
                    "value": "val_adv_gen",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "validation/adv_gen",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.adv_gen_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_396": {
                "variable": {
                    "value": "tr_dice_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train/dice_sup",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 - self.dice_sup",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_397": {
                "variable": {
                    "value": "val_dice_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "validation/dice_sup",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 - self.dice_sup",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_400": {
                "variable": {
                    "value": "tr_wxentropy_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train/masked_wxentropy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.masked_wxentropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_401": {
                "variable": {
                    "value": "tr_disc_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "train/discriminator",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.sup_disc_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_402": {
                "variable": {
                    "value": "val_wxentropy_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "validation/masked_wxentropy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.masked_wxentropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_403": {
                "variable": {
                    "value": "val_disc_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "validation/discriminator",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.sup_disc_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_407": {
                "variable": {
                    "value": "img_inp_s",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "0_input_sup",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acdc_sup_input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_409": {
                "variable": {
                    "value": "img_pred_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "0_pred_mask",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.disc_pred_mask_oh[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_411": {
                "variable": {
                    "value": "img_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "0_gt_mask",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acdc_disc_output_mask[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_417": {
                "variable": {
                    "value": "img_scrib_0",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "0_input_sup",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acdc_sup_input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_418": {
                "variable": {
                    "value": "img_scrib_1",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "1_pred_segm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.sup_pred_mask_oh[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_419": {
                "variable": {
                    "value": "img_scrib_2",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "2_gt_segm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acdc_sup_output_mask[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_420": {
                "variable": {
                    "value": "img_scrib_3",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "3_gt_scribble",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acdc_sup_output_scrib[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_421": {
                "variable": {
                    "value": "img_scrib_4",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "4_all_gt_scribble",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_sum(self.acdc_sup_output_scrib, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_454": {
                "variable": {
                    "value": "self.weights_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "weights_summary",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.summary.histogram(v, tf.get_default_graph().get_tensor_by_name(v)) for v in _vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_634": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_635": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.dirname(self.last_checkpoint_dir + '/checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_712": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.dirname(self.checkpoint_dir + '/checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "best_val_loss_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "Generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "WXEntropy_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_312": {
                "name_or_scope": {
                    "value": "Discriminator_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_325": {
                "input": {
                    "value": "self.sup_disc_loss / self.masked_wxentropy_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_344": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_350": {
                "variable": {
                    "value": "disc_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_378": {
                "name_or_scope": {
                    "value": "Dice_sup",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_387": {
                "name": {
                    "value": "Adversarial",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_395": {
                "name": {
                    "value": "Dice_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_399": {
                "name": {
                    "value": "Supervised_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_406": {
                "name": {
                    "value": "0_Input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_408": {
                "name": {
                    "value": "1_Segmentation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_410": {
                "name": {
                    "value": "2_Segmentation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_412": {
                "name": {
                    "value": "3_AttentionMaps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_416": {
                "name": {
                    "value": "4_Scribbles",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_424": {
                "name": {
                    "value": "5_TEST_RESULTS",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Summary_563": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_602": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_624": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_630": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_default_graph_653": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_316": {
                "input_tensor": {
                    "value": "tf.squared_difference(self.disc_pred_fake, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_341": {
                "x": {
                    "value": "decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(self.g_epoch, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_348": {
                "name": {
                    "value": "discriminator_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_357": {
                "name": {
                    "value": "generator_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_360": {
                "variable": {
                    "value": "gen_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_367": {
                "name": {
                    "value": "supervised_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_413": {
                "name": {
                    "value": "'0_attention_map_{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.sup_multiscale_segmentor_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_421": {
                "input_tensor": {
                    "value": "self.acdc_sup_output_scrib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_426": {
                "name": {
                    "value": "0_input_sup",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.acdc_sup_input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_427": {
                "name": {
                    "value": "1_pred_segm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.sup_pred_mask_oh[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_453": {
                "name": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.get_default_graph().get_tensor_by_name(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_631": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_632": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_313": {
                "input_tensor": {
                    "value": "tf.squared_difference(self.disc_pred_real, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_314": {
                "input_tensor": {
                    "value": "tf.squared_difference(self.disc_pred_fake, -1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_316": {
                "x": {
                    "value": "self.disc_pred_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_318": {
                "input_tensor": {
                    "value": "tf.squared_difference(self.sup_disc_pred_real, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "input_tensor": {
                    "value": "tf.squared_difference(self.sup_disc_pred_fake, -1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_341": {
                "x": {
                    "value": "self.g_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_358": {
                "control_inputs": {
                    "value": "[train_op_discriminator]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_452": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squared_difference_313": {
                "x": {
                    "value": "self.disc_pred_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squared_difference_314": {
                "x": {
                    "value": "self.disc_pred_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squared_difference_318": {
                "x": {
                    "value": "self.sup_disc_pred_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squared_difference_319": {
                "x": {
                    "value": "self.sup_disc_pred_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "trainable_variables_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "idas/callbacks/dsd_callback.py": {
        "tensorflow": {
            "reshape_43": {
                "variable": {
                    "value": "flat_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name(lyr)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_44": {
                "variable": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(flat_layer)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_45": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "N * (1.0 - tf.constant(sparsity, dtype=tf.float32))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "top_k_46": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.abs(flat_layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int32(N * (1.0 - tf.constant(sparsity, dtype=tf.float32)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_47": {
                "variable": {
                    "value": "_lambda",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "get_collection_40": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_46": {
                "x": {
                    "value": "flat_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(layer, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_50": {
                "ref": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name(lyr)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.multiply(layer, tf.to_float(tf.abs(layer) >= _lambda))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_44": {
                "input": {
                    "value": "flat_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(layer, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_50": {
                "x": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name(lyr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(tf.abs(layer) >= _lambda)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_45": {
                "value": {
                    "value": "sparsity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "node['sparsity']",
                            "Subscript"
                        ],
                        [
                            "kwargs['sparsity']",
                            "Subscript"
                        ],
                        [
                            "0.3",
                            "Constant"
                        ],
                        [
                            "kwargs['sparsity']",
                            "Subscript"
                        ],
                        [
                            "0.3",
                            "Constant"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_50": {
                "x": {
                    "value": "tf.abs(layer) >= _lambda",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_50": {
                "x": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name(lyr)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "idas/callbacks/lr_annealing_callback.py": {
        "tensorflow": {
            "placeholder_151": {
                "variable": {
                    "value": "up_value",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "update_lr_value",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/general_adaptive_loss/adaptive.py": {
        "tensorflow": {
            "tile_67": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(scale_init, float_dtype)[tf.newaxis, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "latent_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "LatentScale",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros((1, x.shape[1]), float_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_248": {
                "variable": {
                    "value": "log_df",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "LogDf",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros((1, x.shape[1]), float_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_357": {
                "variable": {
                    "value": "x_stack",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(x, (0, 3, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, width, height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_373": {
                "variable": {
                    "value": "x_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(tf.reshape(x_stack, [-1, num_channels, width, height]), [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, width * height * num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_386": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, width, height, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_387": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alpha_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[width, height, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_388": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scale_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[width, height, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_175": {
                "condition": {
                    "value": "tf.equal(tf.rank(x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.rank(x)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_176": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.equal(tf.rank(x), 2), [tf.rank(x)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.equal(tf.rank(x), 2), [tf.rank(x)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.equal(tf.rank(x), 4), [tf.rank(x)])]",
                            "List"
                        ]
                    ]
                }
            },
            "tile_180": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(alpha_lo, float_dtype)[tf.newaxis, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_191": {
                "variable": {
                    "value": "latent_alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "LatentAlpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.fill((1, x.shape[1]), tf.cast(latent_alpha_init, dtype=float_dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_246": {
                "condition": {
                    "value": "tf.equal(tf.rank(x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.rank(x)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_247": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.equal(tf.rank(x), 2), [tf.rank(x)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.equal(tf.rank(x), 2), [tf.rank(x)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.equal(tf.rank(x), 4), [tf.rank(x)])]",
                            "List"
                        ]
                    ]
                }
            },
            "Assert_347": {
                "condition": {
                    "value": "tf.equal(tf.rank(x), 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.rank(x)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_348": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.equal(tf.rank(x), 2), [tf.rank(x)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.equal(tf.rank(x), 2), [tf.rank(x)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.equal(tf.rank(x), 4), [tf.rank(x)])]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_min_396": {
                "variable": {
                    "value": "alpha_min",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.cast(alpha_lo, float_dtype)[tf.newaxis, tf.newaxis], (1, x.shape[1]))",
                            "Call"
                        ],
                        [
                            "utils.affine_sigmoid(latent_alpha, lo=alpha_lo, hi=alpha_hi)",
                            "Call"
                        ],
                        [
                            "tf.reshape(alpha_mat, [width, height, num_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_397": {
                "variable": {
                    "value": "alpha_max",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.cast(alpha_lo, float_dtype)[tf.newaxis, tf.newaxis], (1, x.shape[1]))",
                            "Call"
                        ],
                        [
                            "utils.affine_sigmoid(latent_alpha, lo=alpha_lo, hi=alpha_hi)",
                            "Call"
                        ],
                        [
                            "tf.reshape(alpha_mat, [width, height, num_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_402": {
                "variable": {
                    "value": "log_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.cast(scale_init, float_dtype)[tf.newaxis, tf.newaxis], (1, x.shape[1]))",
                            "Call"
                        ],
                        [
                            "utils.affine_softplus(latent_scale, lo=scale_lo, ref=scale_init)",
                            "Call"
                        ],
                        [
                            "_construct_scale(x, scale_lo, scale_init, float_dtype)",
                            "Call"
                        ],
                        [
                            "_construct_scale(x, scale_lo, scale_init, float_dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(scale_mat, [width, height, num_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_403": {
                "variable": {
                    "value": "log_scale_min",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.log(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_404": {
                "variable": {
                    "value": "log_scale_max",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.log(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_175": {
                "x": {
                    "value": "tf.rank(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_246": {
                "x": {
                    "value": "tf.rank(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_251": {
                "x": {
                    "value": "log_df",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='LogDf', initializer=tf.zeros((1, x.shape[1]), float_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_347": {
                "x": {
                    "value": "tf.rank(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_357": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.rgb_to_syuv(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_374": {
                "a": {
                    "value": "tf.reshape(x_stack, [-1, num_channels, width, height])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_398": {
                "name": {
                    "value": "robust/alpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "(alpha[tf.newaxis] - alpha_min) / (alpha_max - alpha_min + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_401": {
                "name": {
                    "value": "robust/alpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.cast(alpha_lo, float_dtype)[tf.newaxis, tf.newaxis], (1, x.shape[1]))",
                            "Call"
                        ],
                        [
                            "utils.affine_sigmoid(latent_alpha, lo=alpha_lo, hi=alpha_hi)",
                            "Call"
                        ],
                        [
                            "tf.reshape(alpha_mat, [width, height, num_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "image_405": {
                "name": {
                    "value": "robust/log_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "(log_scale[tf.newaxis] - log_scale_min) / (log_scale_max - log_scale_min + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_408": {
                "name": {
                    "value": "robust/log_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "log_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.log(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_68": {
                "x": {
                    "value": "scale_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "shape": {
                    "value": "(1, x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rank_175": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.rgb_to_syuv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_246": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.rgb_to_syuv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_249": {
                "shape": {
                    "value": "(1, x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rank_347": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.rgb_to_syuv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_375": {
                "tensor": {
                    "value": "x_stack",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(x, (0, 3, 1, 2)), (-1, width, height))",
                            "Call"
                        ],
                        [
                            "wavelet.flatten(wavelet.rescale(wavelet.construct(x_stack, wavelet_num_levels, representation), wavelet_scale_base))",
                            "Call"
                        ],
                        [
                            "utils.image_dct(x_stack)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_channels, width, height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_181": {
                "x": {
                    "value": "alpha_lo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "fill_193": {
                "dims": {
                    "value": "(1, x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(latent_alpha_init, dtype=float_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_194": {
                "x": {
                    "value": "latent_alpha_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.inv_affine_sigmoid(alpha_init, lo=alpha_lo, hi=alpha_hi)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "idas/losses/general_adaptive_loss/cubic_spline.py": {
        "tensorflow": {
            "assert_type_62": {
                "tensor": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "tf_type": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_type_63": {
                "tensor": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": []
                },
                "tf_type": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_78": {
                "variable": {
                    "value": "x_lo",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.clip_by_value(x, 0.0, tf.cast(tf.shape(values)[0] - 2, float_dtype)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_88": {
                "variable": {
                    "value": "t_sq",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x - tf.cast(x_lo, float_dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_101": {
                "variable": {
                    "value": "neighbor_values_lo",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "x_lo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.clip_by_value(x, 0.0, tf.cast(tf.shape(values)[0] - 2, float_dtype))), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_102": {
                "variable": {
                    "value": "neighbor_values_hi",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "x_hi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_lo + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_103": {
                "variable": {
                    "value": "neighbor_tangents_lo",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "x_lo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.clip_by_value(x, 0.0, tf.cast(tf.shape(values)[0] - 2, float_dtype))), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_104": {
                "variable": {
                    "value": "neighbor_tangents_hi",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "x_hi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_lo + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Assert_67": {
                "condition": {
                    "value": "tf.equal(tf.rank(values), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.shape(values)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_69": {
                "condition": {
                    "value": "tf.equal(tf.rank(tangents), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.shape(values)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_71": {
                "condition": {
                    "value": "tf.equal(tf.shape(values)[0], tf.shape(tangents)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.shape(values)[0], tf.shape(tangents)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_76": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.equal(tf.rank(values), 1), [tf.shape(values)]), tf.Assert(tf.equal(tf.rank(tangents), 1), [tf.shape(values)]), tf.Assert(tf.equal(tf.shape(values)[0], tf.shape(tangents)[0]), [tf.shape(values)[0], tf.shape(tangents)[0]])]",
                            "List"
                        ]
                    ]
                }
            },
            "where_111": {
                "condition": {
                    "value": "t < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "value_before",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tangents[0] * t + values[0]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.where(t > 1.0, value_after, value_mid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_67": {
                "x": {
                    "value": "tf.rank(values)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_69": {
                "x": {
                    "value": "tf.rank(tangents)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_72": {
                "x": {
                    "value": "tf.shape(values)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(tangents)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "floor_79": {
                "x": {
                    "value": "tf.clip_by_value(x, 0.0, tf.cast(tf.shape(values)[0] - 2, float_dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_85": {
                "x": {
                    "value": "x_lo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.clip_by_value(x, 0.0, tf.cast(tf.shape(values)[0] - 2, float_dtype))), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_112": {
                "condition": {
                    "value": "t > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "value_after",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tangents[-1] * (t - 1.0) + values[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "value_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "neighbor_values_lo * h00 + neighbor_values_hi * h01 + neighbor_tangents_lo * h10 + neighbor_tangents_hi * h11",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rank_67": {
                "input": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "rank_69": {
                "input": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_69": {
                "input": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clip_by_value_80": {
                "t": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.cast(tf.shape(values)[0] - 2, float_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_73": {
                "input": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_74": {
                "input": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_80": {
                "x": {
                    "value": "tf.shape(values)[0] - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/general_adaptive_loss/distribution.py": {
        "tensorflow": {
            "where_127": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "alpha < 4",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(c(2.25) * alpha - c(4.5)) / (tf.abs(alpha - c(2)) + c(0.25)) + alpha + c(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "c(5) / c(18) * utils.log_safe(c(4) * alpha - c(15)) + c(8)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_138": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "x < 8",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "c(0.5) * x + tf.where(x <= 4, c(1.25) - tf.sqrt(c(1.5625) - x + c(0.25) * tf.square(x)), c(-1.25) + tf.sqrt(c(9.5625) - c(3) * x + c(0.25) * tf.square(x)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "c(3.75) + c(0.25) * utils.exp_safe(x * c(3.6) - c(28.8))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assert_type_216": {
                "tensor": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "tf_type": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_type_217": {
                "tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "numer / denom",
                            "BinOp"
                        ],
                        [
                            "tf.where(x < 8, c(0.5) * x + tf.where(x <= 4, c(1.25) - tf.sqrt(c(1.5625) - x + c(0.25) * tf.square(x)), c(-1.25) + tf.sqrt(c(9.5625) - c(3) * x + c(0.25) * tf.square(x))), c(3.75) + c(0.25) * utils.exp_safe(x * c(3.6) - c(28.8)))",
                            "Call"
                        ]
                    ]
                },
                "tf_type": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_124": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1.0 / numer - 1.0 / (2 * denom)) ** (2 * denom)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "alpha.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Assert_125": {
                "condition": {
                    "value": "tf.reduce_all(alpha >= 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[alpha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_126": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(x >= 0.0), [x])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(scale > 0.0), [scale]), tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_135": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1.0 / numer - 1.0 / (2 * denom)) ** (2 * denom)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Assert_136": {
                "condition": {
                    "value": "tf.reduce_all(x >= 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(x >= 0.0), [x])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(scale > 0.0), [scale]), tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_175": {
                "variable": {
                    "value": "x_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "f['x_scale']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_176": {
                "variable": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "f['values']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_177": {
                "variable": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "f['tangents']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Assert_180": {
                "condition": {
                    "value": "tf.reduce_all(alpha >= 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[alpha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_181": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(x >= 0.0), [x])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(scale > 0.0), [scale]), tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ]
                    ]
                }
            },
            "Assert_220": {
                "condition": {
                    "value": "tf.reduce_all(scale > 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_222": {
                "condition": {
                    "value": "tf.reduce_all(alpha >= 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[alpha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_224": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(x >= 0.0), [x])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.reduce_all(scale > 0.0), [scale]), tf.Assert(tf.reduce_all(alpha >= 0.0), [alpha])]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_all_125": {
                "input_tensor": {
                    "value": "alpha >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_136": {
                "input_tensor": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_180": {
                "input_tensor": {
                    "value": "alpha >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_220": {
                "input_tensor": {
                    "value": "scale > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_222": {
                "input_tensor": {
                    "value": "alpha >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_226": {
                "x": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "where_140": {
                "condition": {
                    "value": "x <= 4",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "c(1.25) - tf.sqrt(c(1.5625) - x + c(0.25) * tf.square(x))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "c(-1.25) + tf.sqrt(c(9.5625) - c(3) * x + c(0.25) * tf.square(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "x": {
                    "value": "c(1.5625) - x + c(0.25) * tf.square(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "x": {
                    "value": "c(9.5625) - c(3) * x + c(0.25) * tf.square(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_128": {
                "x": {
                    "value": "alpha - c(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_142": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(alpha < 4, (c(2.25) * alpha - c(4.5)) / (tf.abs(alpha - c(2)) + c(0.25)) + alpha + c(2), c(5) / c(18) * utils.log_safe(c(4) * alpha - c(15)) + c(8))",
                            "Call"
                        ],
                        [
                            "partition_spline_curve(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_143": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(alpha < 4, (c(2.25) * alpha - c(4.5)) / (tf.abs(alpha - c(2)) + c(0.25)) + alpha + c(2), c(5) / c(18) * utils.log_safe(c(4) * alpha - c(15)) + c(8))",
                            "Call"
                        ],
                        [
                            "partition_spline_curve(alpha)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "idas/losses/general_adaptive_loss/fit_partition_spline.py": {
        "tensorflow": {
            "linspace_61": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "tf.constant(-1, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.constant(1, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 ** 24 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_69": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "-losses",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(values_pad[2:] - values_pad[:-2]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tangents, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.where(np.arange(n) == n - 1, tf.zeros_like(tangents), tangents)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_123": {
                "variable": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "np.arange(n) == n - 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(tangents)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(values_pad[2:] - values_pad[:-2]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tangents, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.where(np.arange(n) == n - 1, tf.zeros_like(tangents), tangents)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_126": {
                "variable": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_gt[mask]",
                            "Subscript"
                        ],
                        [
                            "tf.Variable(values, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.where(np.arange(n) == n - 1, tf.ones_like(tangents) * 0.7052602544268957, values)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_127": {
                "variable": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "np.arange(n) == n - 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(tangents) * 0.7052602544268957",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_gt[mask]",
                            "Subscript"
                        ],
                        [
                            "tf.Variable(values, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.where(np.arange(n) == n - 1, tf.ones_like(tangents) * 0.7052602544268957, values)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_136": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(y - y_gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "x_knot_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_143": {
                "variable": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_62": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_63": {
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sign(t) * tf.abs(t) ** power",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "(y[1:] + y[:-1]) * (x[1:] - x[:-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "input": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(values_pad[2:] - values_pad[:-2]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tangents, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.where(np.arange(n) == n - 1, tf.zeros_like(tangents), tangents)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_136": {
                "x": {
                    "value": "y - y_gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_63": {
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sign(t) * tf.abs(t) ** power",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_129": {
                "input": {
                    "value": "tangents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(values_pad[2:] - values_pad[:-2]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tangents, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.where(np.arange(n) == n - 1, tf.zeros_like(tangents), tangents)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/general_adaptive_loss/static.py": {
        "tensorflow": {
            "assert_type_85": {
                "tensor": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(scale, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "tf_type": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_type_86": {
                "tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "tf_type": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_92": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_to_93": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(scale, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_89": {
                "condition": {
                    "value": "tf.reduce_all(tf.greater(scale, 0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_90": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.reduce_all(tf.greater(scale, 0.0)), [scale])]",
                            "List"
                        ]
                    ]
                }
            },
            "where_101": {
                "variable": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater_equal(alpha, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_108": {
                "variable": {
                    "value": "squared_scaled_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_120": {
                "variable": {
                    "value": "machine_epsilon",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "np.finfo(np.float32).eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "maximum_122": {
                "variable": {
                    "value": "beta_safe",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "machine_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(np.finfo(np.float32).eps, float_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.abs(alpha - 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_131": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(alpha, -tf.cast(float('inf'), float_dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_neginf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.math.expm1(-0.5 * squared_scaled_x)",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.where(tf.equal(alpha, 0.0), loss_zero, tf.where(tf.equal(alpha, 2.0), loss_two, tf.where(tf.equal(alpha, tf.cast(float('inf'), float_dtype)), loss_posinf, loss_otherwise)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_all_89": {
                "input_tensor": {
                    "value": "tf.greater(scale, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_92": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_93": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "greater_89": {
                "x": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(scale, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_100": {
                "x": {
                    "value": "alpha - tf.cast(2.0, float_dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_equal_102": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expm1_115": {
                "x": {
                    "value": "-0.5 * squared_scaled_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_122": {
                "x": {
                    "value": "alpha - 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_124": {
                "condition": {
                    "value": "tf.greater_equal(alpha, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-tf.ones_like(alpha)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_126": {
                "x": {
                    "value": "machine_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(np.finfo(np.float32).eps, float_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.abs(alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_132": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-tf.cast(float('inf'), float_dtype)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_133": {
                "condition": {
                    "value": "tf.equal(alpha, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.log1p_safe(0.5 * squared_scaled_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.where(tf.equal(alpha, 2.0), loss_two, tf.where(tf.equal(alpha, tf.cast(float('inf'), float_dtype)), loss_posinf, loss_otherwise))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_103": {
                "x": {
                    "value": "tf.square(x / scale) / b + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_equal_125": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_126": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_128": {
                "x": {
                    "value": "squared_scaled_x / beta_safe + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_134": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_135": {
                "condition": {
                    "value": "tf.equal(alpha, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_two",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * squared_scaled_x",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.where(tf.equal(alpha, tf.cast(float('inf'), float_dtype)), loss_posinf, loss_otherwise)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_126": {
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_132": {
                "x": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_136": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_137": {
                "condition": {
                    "value": "tf.equal(alpha, tf.cast(float('inf'), float_dtype))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_posinf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.expm1_safe(0.5 * squared_scaled_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_otherwise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beta_safe / alpha_safe * (tf.pow(squared_scaled_x / beta_safe + 1.0, 0.5 * alpha) - 1.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_138": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.broadcast_to(alpha, tf.shape(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(float('inf'), float_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_103": {
                "x": {
                    "value": "x / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_138": {
                "x": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "idas/losses/general_adaptive_loss/utils.py": {
        "tensorflow": {
            "transpose_152": {
                "variable": {
                    "value": "dct_y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.spectral.dct(image, type=2, norm='ortho')",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "variable": {
                    "value": "dct_x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.spectral.dct(dct_y, type=2, norm='ortho')",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "idct_159": {
                "variable": {
                    "value": "dct_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(dct_x, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "type": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "idct_160": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(dct_y, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "type": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "x_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "jacobian",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[vec(tf.gradients(vec(f(x_ph))[d], x_ph)[0]) for d in range(x.size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_40": {
                "x": {
                    "value": "tf.minimum(x, tf.cast(3e+37, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_45": {
                "x": {
                    "value": "tf.minimum(x, tf.cast(3e+37, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_50": {
                "x": {
                    "value": "tf.minimum(x, tf.cast(87.5, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expm1_55": {
                "x": {
                    "value": "tf.minimum(x, tf.cast(87.5, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_60": {
                "condition": {
                    "value": "y > 87.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.log(tf.math.expm1(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "yuv_to_rgb_147": {
                "images": {
                    "value": "yuv / _VOLUME_PRESERVING_YUV_SCALE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_40": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(3e+37, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_45": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(3e+37, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_50": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(87.5, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_55": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(87.5, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_60": {
                "x": {
                    "value": "tf.math.expm1(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_65": {
                "x": {
                    "value": "1.0 / y - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "real.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "scale.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rgb_to_yuv_129": {
                "images": {
                    "value": "rgb",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dct_152": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.spectral.idct(tf.transpose(dct_y, [0, 2, 1]), type=2, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "type": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dct_153": {
                "input": {
                    "value": "dct_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.spectral.dct(image, type=2, norm='ortho'), [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.spectral.idct(tf.transpose(dct_x, [0, 2, 1]), type=2, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "type": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_159": {
                "a": {
                    "value": "dct_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.spectral.dct(dct_y, type=2, norm='ortho'), [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "a": {
                    "value": "dct_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.spectral.dct(image, type=2, norm='ortho'), [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.spectral.idct(tf.transpose(dct_x, [0, 2, 1]), type=2, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "3e+37",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "3e+37",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_50": {
                "x": {
                    "value": "87.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "87.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expm1_60": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "x": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logit((alpha - lo) / (hi - lo))",
                            "Call"
                        ],
                        [
                            "inv_softplus((scale - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_89": {
                "features": {
                    "value": "real + shift",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_107": {
                "x": {
                    "value": "0.5 * df + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_106": {
                "x": {
                    "value": "0.5 * df",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_105": {
                "x": {
                    "value": "df",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_169": {
                "ys": {
                    "value": "vec(f(x_ph))[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, x.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_106": {
                "x": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ref - lo) * tf.nn.softplus(real + shift) + lo",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log1p_104": {
                "x": {
                    "value": "(x / scale) ** 2.0 / df",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/general_adaptive_loss/wavelet.py": {
        "tensorflow": {
            "range_159": {
                "variable": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mod_162": {
                "variable": {
                    "value": "i_mod",
                    "type": "Name",
                    "possible_values": []
                },
                "x1": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(-padding_below, n + padding_above, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "tf.maximum(1, 2 * (n - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_163": {
                "variable": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * (n - 1) - i_mod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "i_mod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.mod(i, tf.maximum(1, 2 * (n - 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_298": {
                "variable": {
                    "value": "min_sz",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "sz[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "sz[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_300": {
                "variable": {
                    "value": "max_num_levels",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.ceil(log2(tf.maximum(1, min_sz)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_164": {
                "params": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(2 * (n - 1) - i_mod, i_mod)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "x_undecimated",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(x_and_zeros, direction + 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "sz_ex",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(x) * [1, 2, 1]",
                            "BinOp"
                        ],
                        [
                            "tf.shape(x) * [1, 1, 2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_273": {
                "variable": {
                    "value": "x_undecimated",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_undecimated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(x_and_zeros, direction + 2), sz_ex)",
                            "Call"
                        ],
                        [
                            "x_undecimated[:, 0:up_sz[0], 0:up_sz[1]]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x_undecimated, [[0, 0], [0, up_sz[0] - tf.shape(x_undecimated)[1]], [0, up_sz[1] - tf.shape(x_undecimated)[2]]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, up_sz[0] - tf.shape(x_undecimated)[1]], [0, up_sz[1] - tf.shape(x_undecimated)[2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_281": {
                "variable": {
                    "value": "f_ex",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "f[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1 - direction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_455": {
                "variable": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([flat, pyr[d][1]], axis=2), tf.concat([pyr[d][2], pyr[d][0]], axis=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_155": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "maximum_162": {
                "x": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * (n - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Assert_205": {
                "condition": {
                    "value": "tf.equal(tf.rank(f), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.rank(f)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_206": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.equal(tf.rank(f), 1), [tf.rank(f)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.equal(tf.rank(f), 1), [tf.rank(f)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.greater_equal(max_num_levels, num_levels), [tf.shape(im), num_levels, max_num_levels])]",
                            "List"
                        ]
                    ]
                }
            },
            "Assert_256": {
                "condition": {
                    "value": "tf.equal(tf.rank(f), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.rank(f)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_257": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.equal(tf.rank(f), 1), [tf.rank(f)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.equal(tf.rank(f), 1), [tf.rank(f)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.greater_equal(max_num_levels, num_levels), [tf.shape(im), num_levels, max_num_levels])]",
                            "List"
                        ]
                    ]
                }
            },
            "ceil_300": {
                "x": {
                    "value": "log2(tf.maximum(1, min_sz))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_333": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_downsample(lo, filters.analysis_lo, 1, 0)",
                            "Call"
                        ],
                        [
                            "pyr[-1]",
                            "Subscript"
                        ],
                        [
                            "_upsample(_upsample(im, lo_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_lo, lo_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_lo, 0, 0) + _upsample(_upsample(lo_hi, hi_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_hi, hi_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_hi, 0, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Assert_335": {
                "condition": {
                    "value": "tf.greater_equal(max_num_levels, num_levels)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.shape(im), num_levels, max_num_levels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_339": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Assert(tf.equal(tf.rank(f), 1), [tf.rank(f)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.equal(tf.rank(f), 1), [tf.rank(f)])]",
                            "List"
                        ],
                        [
                            "[tf.Assert(tf.greater_equal(max_num_levels, num_levels), [tf.shape(im), num_levels, max_num_levels])]",
                            "List"
                        ]
                    ]
                }
            },
            "equal_205": {
                "x": {
                    "value": "tf.rank(f)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_220": {
                "input": {
                    "value": "x_padded[:, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "tf.cast(f_ex, x.dtype)[:, :, tf.newaxis, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 2, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_256": {
                "x": {
                    "value": "tf.rank(f)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_269": {
                "values": {
                    "value": "x_and_zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x, tf.zeros_like(x)]",
                            "List"
                        ],
                        [
                            "[tf.zeros_like(x), x]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "direction + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_282": {
                "input": {
                    "value": "x_padded[:, :, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "tf.cast(f_ex, x.dtype)[:, :, tf.newaxis, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_299": {
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_332": {
                "value": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_downsample(lo, filters.analysis_lo, 1, 0)",
                            "Call"
                        ],
                        [
                            "pyr[-1]",
                            "Subscript"
                        ],
                        [
                            "_upsample(_upsample(im, lo_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_lo, lo_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_lo, 0, 0) + _upsample(_upsample(lo_hi, hi_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_hi, hi_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_hi, 0, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_equal_336": {
                "x": {
                    "value": "max_num_levels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.ceil(log2(tf.maximum(1, min_sz))), tf.int32)",
                            "Call"
                        ],
                        [
                            "get_max_num_levels(tf.shape(im))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_levels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(pyr) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rank_205": {
                "input": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "rank_256": {
                "input": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_262": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_266": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_299": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_300": {
                "x": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "min_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(sz[1], sz[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_337": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_downsample(lo, filters.analysis_lo, 1, 0)",
                            "Call"
                        ],
                        [
                            "pyr[-1]",
                            "Subscript"
                        ],
                        [
                            "_upsample(_upsample(im, lo_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_lo, lo_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_lo, 0, 0) + _upsample(_upsample(lo_hi, hi_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_hi, hi_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_hi, 0, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_387": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_downsample(lo, filters.analysis_lo, 1, 0)",
                            "Call"
                        ],
                        [
                            "pyr[-1]",
                            "Subscript"
                        ],
                        [
                            "_upsample(_upsample(im, lo_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_lo, lo_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_lo, 0, 0) + _upsample(_upsample(lo_hi, hi_sz, filters.synthesis_lo, 1, 0) + _upsample(hi_hi, hi_sz, filters.synthesis_hi, 1, 1), up_sz, filters.synthesis_hi, 0, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_388": {
                "input": {
                    "value": "hi_hi",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "concat_456": {
                "values": {
                    "value": "[flat, pyr[d][1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_457": {
                "values": {
                    "value": "[pyr[d][2], pyr[d][0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "f_ex",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f[:, tf.newaxis]",
                            "Subscript"
                        ],
                        [
                            "f[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(f[::-1], 1 - direction)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_264": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_268": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_283": {
                "x": {
                    "value": "f_ex",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f[:, tf.newaxis]",
                            "Subscript"
                        ],
                        [
                            "f[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(f[::-1], 1 - direction)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_385": {
                "input": {
                    "value": "lo_hi",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_386": {
                "input": {
                    "value": "hi_lo",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_274": {
                "input": {
                    "value": "x_undecimated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(x_and_zeros, direction + 2), sz_ex)",
                            "Call"
                        ],
                        [
                            "x_undecimated[:, 0:up_sz[0], 0:up_sz[1]]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x_undecimated, [[0, 0], [0, up_sz[0] - tf.shape(x_undecimated)[1]], [0, up_sz[1] - tf.shape(x_undecimated)[2]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_275": {
                "input": {
                    "value": "x_undecimated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(x_and_zeros, direction + 2), sz_ex)",
                            "Call"
                        ],
                        [
                            "x_undecimated[:, 0:up_sz[0], 0:up_sz[1]]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(x_undecimated, [[0, 0], [0, up_sz[0] - tf.shape(x_undecimated)[1]], [0, up_sz[1] - tf.shape(x_undecimated)[2]]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "idas/losses/models/_internal/_sdnet/decoder.py": {
        "tensorflow": {
            "zeros_initializer_21": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "film4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._film_layer(film3, self.z_factors, scope='_film_layer_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "spatial_input",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_82": {
                "variable": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(spatial_input, filters=n_filters, kernel_size=3, strides=1, padding='same')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_84": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "n_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_85": {
                "variable": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=n_filters, kernel_size=3, strides=1, padding='same')",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_90": {
                "variable": {
                    "value": "film_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "film",
                    "type": "Name",
                    "possible_values": [
                        [
                            "film_layer(conv2_act, gamma_l2, beta_l2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_100": {
                "variable": {
                    "value": "fc",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "leaky_relu_101": {
                "variable": {
                    "value": "fc_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "fc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(incoming, units=n_units)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_102": {
                "variable": {
                    "value": "film_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(fc)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_film_layer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "_film_pred",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "film_fusion",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/_internal/_sdnet/layers/film_layer.py": {
        "tensorflow": {
            "shape_29": {
                "variable": {
                    "value": "in_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_30": {
                "variable": {
                    "value": "gamma_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_31": {
                "variable": {
                    "value": "beta_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_34": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, in_shape[1], in_shape[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_36": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, in_shape[1], in_shape[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'film'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_34": {
                "tensor": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(gamma_shape[0], 1, 1, gamma_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "tensor": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(beta_shape[0], 1, 1, beta_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/_internal/_sdnet/layers/rounding_layer.py": {
        "tensorflow": {
            "round_34": {
                "variable": {
                    "value": "forward_pass",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'RoundLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "idas/losses/models/_internal/_sdnet/layers/spectral_norm.py": {
        "tensorflow": {
            "reshape_27": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_43": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_44": {
                "variable": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_46": {
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_38": {
                "variable": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(u_hat, tf.transpose(w))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_41": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(v_hat, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_46": {
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_48": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_37": {
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "filter": {
                    "value": "spectral_norm(w, self.iteration)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_89": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/_internal/_sdnet/mask_discriminator.py": {
        "tensorflow": {
            "zeros_initializer_21": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.n_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_80": {
                "variable": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(input_tensor, filters=self.n_filters, kernel_size=4, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(layer, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self._conv_and_maybe_downsample_block(layer, n_filters=nf, stride=stride, scope=scp)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_115": {
                "variable": {
                    "value": "n_norm_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "n_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "spectral_norm_conv2d(incoming, filters=n_filters, kernel_size=4, stride=stride, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "flatten_94": {
                "variable": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(input_tensor, filters=self.n_filters, kernel_size=4, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(layer, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self._conv_and_maybe_downsample_block(layer, n_filters=nf, stride=stride, scope=scp)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_95": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(input_tensor, filters=self.n_filters, kernel_size=4, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(layer, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self._conv_and_maybe_downsample_block(layer, n_filters=nf, stride=stride, scope=scp)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/_internal/_sdnet/modality_encoder.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.input_data, self.encoded_anatomy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_122": {
                "variable": {
                    "value": "conv_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=16, kernel_size=3, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "leaky_relu_123": {
                "variable": {
                    "value": "conv_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_131": {
                "variable": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_132": {
                "variable": {
                    "value": "fc",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.flatten(incoming)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_133": {
                "variable": {
                    "value": "fc_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "fc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(flat, units=32)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "leaky_relu_134": {
                "variable": {
                    "value": "fc_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(fc, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_142": {
                "variable": {
                    "value": "z_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_latent",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "z_mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_143": {
                "variable": {
                    "value": "z_logvar",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_latent",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "z_logvar",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'encode_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'z_distribution'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'encode_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'z_distribution'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'encode_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'z_distribution'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_146": {
                "values": {
                    "value": "[tf.shape(incoming)[0], n_latent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_149": {
                "x": {
                    "value": "0.5 * z_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_146": {
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "idas/losses/models/_internal/_sdnet/segmentor.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_63": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_65": {
                "variable": {
                    "value": "conv1_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(self.input_data, filters=64, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv1, training=self.is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_68": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_70": {
                "variable": {
                    "value": "conv2_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=64, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv2, training=self.is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "self.output_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/_internal/_sdnet/unet.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_124": {
                "variable": {
                    "value": "conv1_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_125": {
                "variable": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_127": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_129": {
                "variable": {
                    "value": "conv2_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_130": {
                "variable": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_132": {
                "variable": {
                    "value": "pool",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_145": {
                "variable": {
                    "value": "upsampled",
                    "type": "Name",
                    "possible_values": []
                },
                "images": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "conv1t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "upsampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(incoming, size=[new_height, new_width])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_148": {
                "variable": {
                    "value": "conv1t_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(upsampled, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "conv1t_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1t_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv1t, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_151": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv1t_act, concat_layer_in]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([conv1t_act, concat_layer_in], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_155": {
                "variable": {
                    "value": "conv2_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_160": {
                "variable": {
                    "value": "conv3_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv2_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "conv3_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_170": {
                "variable": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_172": {
                "variable": {
                    "value": "code1_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_173": {
                "variable": {
                    "value": "code1_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "code1_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(code1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_175": {
                "variable": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "code1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(code1_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_177": {
                "variable": {
                    "value": "code2_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(code1_act, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_178": {
                "variable": {
                    "value": "code2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "code2_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.batch_normalization(code2, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_187": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_channels_out",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "Bottleneck",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "concat_layer_out",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/hyperbolic/hyp_layers.py": {
        "tensorflow": {
            "reshape_33": {
                "variable": {
                    "value": "incoming_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_37": {
                "variable": {
                    "value": "out_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[-1, W, H, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "out_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hyp_ops.tf_exp_map_zero(v=incoming_flat, c=radius)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_matrix, shape=out_shape)",
                            "Call"
                        ],
                        [
                            "hyp_mlr(incoming_flat, before_mlr_dim=C, num_classes=num_classes, radius=radius, mlr_geom='hyp')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_matrix, shape=[-1, W, H, num_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "out_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([-1, W, H, C])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "incoming_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "out_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hyp_ops.tf_exp_map_zero(v=incoming_flat, c=radius)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_matrix, shape=out_shape)",
                            "Call"
                        ],
                        [
                            "hyp_mlr(incoming_flat, before_mlr_dim=C, num_classes=num_classes, radius=radius, mlr_geom='hyp')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_matrix, shape=[-1, W, H, num_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, W, H, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "W_hyp",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, before_mlr_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "b_hyp",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, before_mlr_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "logits_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "HyperbolicDenseLayer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_132": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hyp_ops.tf_mob_add(mat_mul, b, radius)",
                            "Call"
                        ],
                        [
                            "hyp_ops.tf_hyp_non_lin(output, non_lin=activation, hyp_output=mlr_geom == 'hyp' and dropout == 1.0, c=radius)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=dropout)",
                            "Call"
                        ],
                        [
                            "hyp_ops.tf_exp_map_zero(output, radius)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'HyperbolicMLR'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "name": {
                    "value": "'A_mlr' + str(cl)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, before_mlr_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_163": {
                "name": {
                    "value": "'P_mlr' + str(cl)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, before_mlr_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "tensor": {
                    "value": "hyp_ops.tf_dot(-P_mlr[cl] + incoming, A_mlr[cl])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_166": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_175": {
                "x": {
                    "value": "A_mlr[cl]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "asinh_177": {
                "x": {
                    "value": "np.sqrt(radius) * px_dot_a * lambda_px",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "tensor": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2.0 / np.sqrt(radius) * norm_a * tf.asinh(np.sqrt(radius) * px_dot_a * lambda_px)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/hyperbolic/hyp_ops.py": {
        "tensorflow": {
            "clip_by_norm_30": {
                "t": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "(1.0 - PROJ_EPS) / np.sqrt(c)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "atanh_35": {
                "x": {
                    "value": "tf.minimum(x, 1.0 - EPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "x": {
                    "value": "tf.minimum(tf.maximum(x, -MAX_TANH_ARG), MAX_TANH_ARG)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "input_tensor": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_48": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "tf.square(u - v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_35": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 - EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_40": {
                "x": {
                    "value": "tf.maximum(x, -MAX_TANH_ARG)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "MAX_TANH_ARG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "square_89": {
                "x": {
                    "value": "u - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "maximum_40": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-MAX_TANH_ARG",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_207": {
                "features": {
                    "value": "eucl_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_eucl_non_lin(tf_log_map_zero(hyp_h, c), non_lin)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_209": {
                "x": {
                    "value": "eucl_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_eucl_non_lin(tf_log_map_zero(hyp_h, c), non_lin)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_211": {
                "x": {
                    "value": "eucl_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_eucl_non_lin(tf_log_map_zero(hyp_h, c), non_lin)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "idas/losses/models/layers/film_layer.py": {
        "tensorflow": {
            "shape_38": {
                "variable": {
                    "value": "in_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_39": {
                "variable": {
                    "value": "gamma_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_40": {
                "variable": {
                    "value": "beta_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_43": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, in_shape[1], in_shape[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_45": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, in_shape[1], in_shape[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'film'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "tensor": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(gamma_shape[0], 1, 1, gamma_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(beta_shape[0], 1, 1, beta_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/layers/rounding_layer.py": {
        "tensorflow": {
            "get_default_graph_44": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_46": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "py_func",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "Tout": {
                    "value": "out_types",
                    "type": "Name",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RegisterGradient_42": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, int(100000000.0)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "idas/losses/models/layers/spatial_transformer_layer.py": {
        "tensorflow": {
            "gather_195": {
                "variable": {
                    "value": "input_repeated",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "U",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(indices, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "variable": {
                    "value": "rep",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "rep",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_65": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_66": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_67": {
                "variable": {
                    "value": "height_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_68": {
                "variable": {
                    "value": "width_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_72": {
                "variable": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_73": {
                "variable": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_86": {
                "variable": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_87": {
                "variable": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_88": {
                "variable": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_102": {
                "variable": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_103": {
                "variable": {
                    "value": "Ia",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_104": {
                "variable": {
                    "value": "Ib",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_105": {
                "variable": {
                    "value": "Ic",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_106": {
                "variable": {
                    "value": "Id",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_109": {
                "variable": {
                    "value": "x0_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "x1_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_111": {
                "variable": {
                    "value": "y0_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_112": {
                "variable": {
                    "value": "y1_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "wa",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "variable": {
                    "value": "wb",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "wc",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_116": {
                "variable": {
                    "value": "wd",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_118": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "variable": {
                    "value": "y_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_132": {
                "variable": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_133": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(theta, (-1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.cast(theta, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_145": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(theta, (-1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.cast(theta, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_148": {
                "variable": {
                    "value": "height_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "width_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_153": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_155": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([num_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, 3, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(theta, (-1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.cast(theta, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_160": {
                "variable": {
                    "value": "x_s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(theta, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_161": {
                "variable": {
                    "value": "y_s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(theta, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "x_s_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "y_s_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_transformed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_interpolate(input_dim, x_s_flat, y_s_flat, out_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, out_height, out_width, num_channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SpatialTransformer'",
                            "MethodArgument"
                        ],
                        [
                            "'BatchSpatialTransformer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SpatialTransformer'",
                            "MethodArgument"
                        ],
                        [
                            "'BatchSpatialTransformer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "_interpolate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "_meshgrid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "_transform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[i] * num_transforms for i in range(num_batch)]",
                            "ListComp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_63": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "floor_80": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_82": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_101": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_124": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_127": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_140": {
                "input": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_155": {
                "values": {
                    "value": "[num_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_156": {
                "values": {
                    "value": "[num_batch, 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_170": {
                "values": {
                    "value": "[num_batch, out_height, out_width, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_51": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_126": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_73": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_124": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_125": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_127": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_51": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/layers/spectral_norm.py": {
        "tensorflow": {
            "reshape_56": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_72": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_73": {
                "variable": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_67": {
                "variable": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(u_hat, tf.transpose(w))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_70": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(v_hat, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_75": {
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_77": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_66": {
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_144": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "filter": {
                    "value": "spectral_norm(w, self.iteration)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_142": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/mlp.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_62": {
                "variable": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.incoming",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "input_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.flatten(self.incoming)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_65": {
                "variable": {
                    "value": "input_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(incoming, self.n_in, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_layer)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "input_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "input_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(incoming, self.n_in, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_68": {
                "variable": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(incoming, self.n_in, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_layer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.n_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_69": {
                "variable": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(input_layer, self.n_hidden, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(hidden_layer, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden_layer)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(input_layer, self.n_hidden, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(hidden_layer, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_72": {
                "variable": {
                    "value": "output_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(input_layer, self.n_hidden, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(hidden_layer, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden_layer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_73": {
                "variable": {
                    "value": "output_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "output_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(hidden_layer, self.n_out, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output_layer, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output_layer)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "output_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "output_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.dense(hidden_layer, self.n_out, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output_layer, training=self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/sdnet.py": {
        "tensorflow": {
            "zeros_initializer_24": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_140": {
                "variable": {
                    "value": "soft_anatomy",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "coarse_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unet.build_output(unet_decoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "non_hart",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "non_heart_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.soft_anatomy[..., self.n_classes - 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[non_hart, heart]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "AnatomyEncoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "RoundingLayer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "ModalityEncoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "ModalityEncoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "Segmentor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_210": {
                "indices": {
                    "value": "tf.argmax(self.pred_mask, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "logits": {
                    "value": "self.pred_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_210": {
                "input": {
                    "value": "self.pred_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/models/unet.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_151": {
                "variable": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "upsampled",
                            "Name"
                        ],
                        [
                            "layers.conv2d(upsampled, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ],
                        [
                            "conv1",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_158": {
                "variable": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_160": {
                "variable": {
                    "value": "pool",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_188": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv1_act, concat_layer_in]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_190": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([conv1_act, concat_layer_in], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_194": {
                "variable": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_196": {
                "variable": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_200": {
                "variable": {
                    "value": "conv3_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv2_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_209": {
                "variable": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_213": {
                "variable": {
                    "value": "code1_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(code1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_215": {
                "variable": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "code1_act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(code1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_219": {
                "variable": {
                    "value": "code2_act",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(code1_act, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(code2, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_228": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_channels_out",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "Bottleneck",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_normalization_150": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "upsampled",
                            "Name"
                        ],
                        [
                            "layers.conv2d(upsampled, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_157": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_transpose_172": {
                "variable": {
                    "value": "upsampled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_179": {
                "variable": {
                    "value": "upsampled",
                    "type": "Name",
                    "possible_values": []
                },
                "images": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_181": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "upsampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d_transpose(incoming, filters=nb_filters, kernel_size=2, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(incoming, size=[new_height, new_width], align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_184": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "upsampled",
                            "Name"
                        ],
                        [
                            "layers.conv2d(upsampled, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_normalization_193": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_normalization_199": {
                "variable": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(conv2_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "batch_normalization_212": {
                "variable": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "code1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(code1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_218": {
                "variable": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "code2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.conv2d(code1_act, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(code2, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "one_hot_235": {
                "indices": {
                    "value": "tf.argmax(self.prediction, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "concat_layer_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "input": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/tf_losses.py": {
        "tensorflow": {
            "reduce_sum_51": {
                "variable": {
                    "value": "n_tot",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.reduce_sum(tf.cast(y_true[..., c], tf.float32)) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reduce_sum(tf.cast(y_true[..., c], tf.float32)) for c in range(num_classes)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_56": {
                "variable": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(y_true, (-1, num_classes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_60": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(softmax + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(y_pred + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(y_true * tf.log(y_pred + eps), reduction_indices=[1])",
                            "UnaryOp"
                        ]
                    ]
                },
                "name": {
                    "value": "weighted_softmax_cross_entropy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "variable": {
                    "value": "n_tot",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.reduce_sum(tf.cast(y_true[..., c], tf.float32)) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reduce_sum(tf.cast(y_true[..., c], tf.float32)) for c in range(num_classes)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_82": {
                "variable": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(y_true, (-1, num_classes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(softmax + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(y_pred + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(y_true * tf.log(y_pred + eps), reduction_indices=[1])",
                            "UnaryOp"
                        ]
                    ]
                },
                "name": {
                    "value": "weighted_cross_entropy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_100": {
                "variable": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(y_true, (-1, num_classes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_cross_entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(softmax + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(y_pred + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(y_true * tf.log(y_pred + eps), reduction_indices=[1])",
                            "UnaryOp"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "x_true",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, n_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "x_reconstructed",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, n_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "total_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "generator_loss + kl_div_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_177": {
                "variable": {
                    "value": "pred_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.image.sobel_edges(y_pred[:, :, :, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "variable": {
                    "value": "input_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.image.sobel_edges(y_true[:, :, :, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "x_reconstructed_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.image.sobel_edges(y_pred[:, :, :, 0]), -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, shape[0] * shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "x_true_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.image.sobel_edges(y_true[:, :, :, 0]), -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, shape[0] * shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "grad_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(x_reconstructed_grad, x_true_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_194": {
                "variable": {
                    "value": "distances",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.squared_difference(y_pred - y_true), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_197": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(y_true, distances.dtype) * tf.square(distances) + (1.0 - tf.cast(y_true, distances.dtype)) * tf.square(tf.maximum(margin - distances, 0.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "contrastive_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_214": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(y_true, distances.dtype) * tf.square(distances) + (1.0 - tf.cast(y_true, distances.dtype)) * tf.square(tf.maximum(margin - distances, 0.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "hyperbolic_contrastive_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_squared_error_148": {
                "variable": {
                    "value": "generator_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "x_reconstructed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, shape=(-1, n_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "x_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y_true, shape=(-1, n_outputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "tf.cast(y_true[..., c], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.multiply(y_true * tf.log(softmax + eps), weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "input_tensor": {
                    "value": "tf.cast(y_true[..., c], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "tensor": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "tf.multiply(y_true * tf.log(y_pred + eps), weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "tensor": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "y_true * tf.log(y_pred + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Reconstruction_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "KL_divergence_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sobel_edges_177": {
                "image": {
                    "value": "y_pred[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sobel_edges_178": {
                "image": {
                    "value": "y_true[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_183": {
                "x": {
                    "value": "x_reconstructed_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(pred_grad, shape=(-1, shape[0] * shape[1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_true_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input_grad, shape=(-1, shape[0] * shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_194": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_pred - y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_50": {
                "x": {
                    "value": "y_true[..., c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_59": {
                "x": {
                    "value": "y_true * tf.log(softmax + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[n_tot / (n[c] + eps) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "[n_tot / (n[c] + eps) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_75": {
                "x": {
                    "value": "y_true[..., c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_84": {
                "x": {
                    "value": "y_true * tf.log(y_pred + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[n_tot / (n[c] + eps) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "[n_tot / (n[c] + eps) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_153": {
                "x": {
                    "value": "z_logstd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "input_tensor": {
                    "value": "kl_div_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 + z_logstd - tf.square(z_mean) - tf.exp(z_logstd)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * tf.reduce_sum(kl_div_loss, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squared_difference_194": {
                "x": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_102": {
                "x": {
                    "value": "y_pred + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_153": {
                "x": {
                    "value": "z_mean",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_197": {
                "x": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "distances.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_197": {
                "x": {
                    "value": "distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.squared_difference(y_pred - y_true), axis=1))",
                            "Call"
                        ],
                        [
                            "tf_poinc_dist_sq(y_pred, y_true, c=radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_199": {
                "x": {
                    "value": "tf.maximum(margin - distances, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_214": {
                "x": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "distances.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_214": {
                "x": {
                    "value": "distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.squared_difference(y_pred - y_true), axis=1))",
                            "Call"
                        ],
                        [
                            "tf_poinc_dist_sq(y_pred, y_true, c=radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_216": {
                "x": {
                    "value": "tf.maximum(margin - distances, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_59": {
                "x": {
                    "value": "softmax + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_84": {
                "x": {
                    "value": "y_pred + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_198": {
                "x": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "distances.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_199": {
                "x": {
                    "value": "margin - distances",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_215": {
                "x": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "distances.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_216": {
                "x": {
                    "value": "margin - distances",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/utils.py": {
        "tensorflow": {
            "placeholder_116": {
                "variable": {
                    "value": "x_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "jacobian",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[vec(tf.gradients(vec(f(x_ph))[d], x_ph)[0]) for d in range(x.size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_40": {
                "x": {
                    "value": "tf.minimum(x, tf.cast(3e+37, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_45": {
                "x": {
                    "value": "tf.minimum(x, tf.cast(3e+37, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_50": {
                "x": {
                    "value": "tf.minimum(x, tf.cast(87.5, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expm1_55": {
                "x": {
                    "value": "tf.minimum(x, tf.cast(87.5, x.dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_60": {
                "condition": {
                    "value": "y > 87.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.log(tf.math.expm1(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_40": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(3e+37, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_45": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(3e+37, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_50": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(87.5, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_55": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(87.5, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_60": {
                "x": {
                    "value": "tf.math.expm1(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_65": {
                "x": {
                    "value": "1.0 / y - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "real.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "scale.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "3e+37",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "3e+37",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_50": {
                "x": {
                    "value": "87.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "87.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expm1_60": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "x": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logit((alpha - lo) / (hi - lo))",
                            "Call"
                        ],
                        [
                            "inv_softplus((scale - lo) / (ref - lo)) - shift",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_89": {
                "features": {
                    "value": "real + shift",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_107": {
                "x": {
                    "value": "0.5 * df + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_106": {
                "x": {
                    "value": "0.5 * df",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_105": {
                "x": {
                    "value": "df",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_119": {
                "ys": {
                    "value": "vec(f(x_ph))[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, x.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_106": {
                "x": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(ref - lo) * tf.nn.softplus(real + shift) + lo",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log1p_104": {
                "x": {
                    "value": "(x / scale) ** 2.0 / df",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "idas/metrics/tf_activations.py": {
        "tensorflow": {
            "reduce_max_12": {
                "variable": {
                    "value": "max_axis",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_13": {
                "variable": {
                    "value": "target_exp",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "target - max_axis",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_14": {
                "variable": {
                    "value": "normalize",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(target - max_axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_11": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "idas/metrics/tf_metrics.py": {
        "tensorflow": {
            "reduce_sum_41": {
                "variable": {
                    "value": "intersection",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_43": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_44": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2.0 * intersection + smooth) / (a + b + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name='dice_coe')",
                            "Call"
                        ],
                        [
                            "2.0 * (numerator + smooth) / (denominator + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name='dice_coe')",
                            "Call"
                        ],
                        [
                            "(intersection + smooth) / (union + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name=_name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dice_coe",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "intersection",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis[:-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_80": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis[:-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis[:-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_87": {
                "variable": {
                    "value": "numerator",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights * intersection",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "variable": {
                    "value": "denominator",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights * (a + b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2.0 * intersection + smooth) / (a + b + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name='dice_coe')",
                            "Call"
                        ],
                        [
                            "2.0 * (numerator + smooth) / (denominator + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name='dice_coe')",
                            "Call"
                        ],
                        [
                            "(intersection + smooth) / (union + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name=_name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dice_coe",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "intersection",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output * output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_124": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2.0 * intersection + smooth) / (a + b + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name='dice_coe')",
                            "Call"
                        ],
                        [
                            "2.0 * (numerator + smooth) / (denominator + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name='dice_coe')",
                            "Call"
                        ],
                        [
                            "(intersection + smooth) / (union + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name=_name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'jaccard_coe'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_174": {
                "variable": {
                    "value": "p_l",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_175": {
                "variable": {
                    "value": "p_l",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "p_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(incoming, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_l, clip_value_min=smooth, clip_value_max=1 - smooth)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "smooth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ],
                        [
                            "1e-12",
                            "MethodArgument"
                        ],
                        [
                            "1e-12",
                            "MethodArgument"
                        ],
                        [
                            "1e-12",
                            "MethodArgument"
                        ],
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1 - smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_181": {
                "variable": {
                    "value": "entropy",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "entropy_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-p_l * tf.log(p_l) - (1 - p_l) * tf.log(1 - p_l)",
                            "BinOp"
                        ],
                        [
                            "tf.log(2.0) * entropy_l",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "variable": {
                    "value": "mean_entropy",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(entropy_l, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_176": {
                "x": {
                    "value": "1 - p_l",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_179": {
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis[:-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "idas/models/hyperbolic/hyp_layers.py": {
        "tensorflow": {
            "reshape_33": {
                "variable": {
                    "value": "incoming_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_37": {
                "variable": {
                    "value": "out_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[-1, W, H, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "out_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hyp_ops.tf_exp_map_zero(v=incoming_flat, c=radius)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_matrix, shape=out_shape)",
                            "Call"
                        ],
                        [
                            "hyp_mlr(incoming_flat, before_mlr_dim=C, num_classes=num_classes, radius=radius, mlr_geom='hyp')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_matrix, shape=[-1, W, H, num_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "out_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([-1, W, H, C])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "incoming_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "out_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hyp_ops.tf_exp_map_zero(v=incoming_flat, c=radius)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_matrix, shape=out_shape)",
                            "Call"
                        ],
                        [
                            "hyp_mlr(incoming_flat, before_mlr_dim=C, num_classes=num_classes, radius=radius, mlr_geom='hyp')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_matrix, shape=[-1, W, H, num_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, W, H, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "W_hyp",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, before_mlr_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "b_hyp",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, before_mlr_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "logits_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "HyperbolicDenseLayer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_132": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hyp_ops.tf_mob_add(mat_mul, b, radius)",
                            "Call"
                        ],
                        [
                            "hyp_ops.tf_hyp_non_lin(output, non_lin=activation, hyp_output=mlr_geom == 'hyp' and dropout == 1.0, c=radius)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=dropout)",
                            "Call"
                        ],
                        [
                            "hyp_ops.tf_exp_map_zero(output, radius)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'HyperbolicMLR'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "name": {
                    "value": "'A_mlr' + str(cl)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, before_mlr_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_163": {
                "name": {
                    "value": "'P_mlr' + str(cl)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, before_mlr_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "tensor": {
                    "value": "hyp_ops.tf_dot(-P_mlr[cl] + incoming, A_mlr[cl])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_166": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_175": {
                "x": {
                    "value": "A_mlr[cl]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "asinh_177": {
                "x": {
                    "value": "np.sqrt(radius) * px_dot_a * lambda_px",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "tensor": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2.0 / np.sqrt(radius) * norm_a * tf.asinh(np.sqrt(radius) * px_dot_a * lambda_px)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "idas/models/hyperbolic/hyp_ops.py": {
        "tensorflow": {
            "clip_by_norm_30": {
                "t": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "(1.0 - PROJ_EPS) / np.sqrt(c)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "atanh_35": {
                "x": {
                    "value": "tf.minimum(x, 1.0 - EPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "x": {
                    "value": "tf.minimum(tf.maximum(x, -MAX_TANH_ARG), MAX_TANH_ARG)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "input_tensor": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_48": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "tf.square(u - v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_35": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 - EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_40": {
                "x": {
                    "value": "tf.maximum(x, -MAX_TANH_ARG)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "MAX_TANH_ARG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "square_89": {
                "x": {
                    "value": "u - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "maximum_40": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + EPS",
                            "BinOp"
                        ],
                        [
                            "x + EPS",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-MAX_TANH_ARG",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_207": {
                "features": {
                    "value": "eucl_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_eucl_non_lin(tf_log_map_zero(hyp_h, c), non_lin)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_209": {
                "x": {
                    "value": "eucl_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_eucl_non_lin(tf_log_map_zero(hyp_h, c), non_lin)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_211": {
                "x": {
                    "value": "eucl_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_eucl_non_lin(tf_log_map_zero(hyp_h, c), non_lin)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "idas/models/layers/film_layer.py": {
        "tensorflow": {
            "shape_38": {
                "variable": {
                    "value": "in_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_39": {
                "variable": {
                    "value": "gamma_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_40": {
                "variable": {
                    "value": "beta_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_43": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, in_shape[1], in_shape[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_45": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, in_shape[1], in_shape[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'film'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "tensor": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(gamma_shape[0], 1, 1, gamma_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(beta_shape[0], 1, 1, beta_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "idas/models/layers/rounding_layer.py": {
        "tensorflow": {
            "get_default_graph_44": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_46": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "py_func",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "Tout": {
                    "value": "out_types",
                    "type": "Name",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RegisterGradient_42": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, int(100000000.0)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "idas/models/layers/spatial_transformer_layer.py": {
        "tensorflow": {
            "gather_195": {
                "variable": {
                    "value": "input_repeated",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "U",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(indices, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "variable": {
                    "value": "rep",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "rep",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_65": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_66": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_67": {
                "variable": {
                    "value": "height_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_68": {
                "variable": {
                    "value": "width_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_72": {
                "variable": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_73": {
                "variable": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_86": {
                "variable": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_87": {
                "variable": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_88": {
                "variable": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_102": {
                "variable": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_103": {
                "variable": {
                    "value": "Ia",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_104": {
                "variable": {
                    "value": "Ib",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_105": {
                "variable": {
                    "value": "Ic",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_106": {
                "variable": {
                    "value": "Id",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_109": {
                "variable": {
                    "value": "x0_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "x1_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_111": {
                "variable": {
                    "value": "y0_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_112": {
                "variable": {
                    "value": "y1_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "wa",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "variable": {
                    "value": "wb",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "wc",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_116": {
                "variable": {
                    "value": "wd",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_118": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "variable": {
                    "value": "y_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_132": {
                "variable": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_133": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(theta, (-1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.cast(theta, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_145": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(theta, (-1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.cast(theta, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_148": {
                "variable": {
                    "value": "height_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "width_f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_153": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_155": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([num_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, 3, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(theta, (-1, 2, 3))",
                            "Call"
                        ],
                        [
                            "tf.cast(theta, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat, ones], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 3, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_160": {
                "variable": {
                    "value": "x_s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(theta, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_161": {
                "variable": {
                    "value": "y_s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(theta, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "x_s_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "y_s_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_transformed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_interpolate(input_dim, x_s_flat, y_s_flat, out_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, out_height, out_width, num_channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SpatialTransformer'",
                            "MethodArgument"
                        ],
                        [
                            "'BatchSpatialTransformer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SpatialTransformer'",
                            "MethodArgument"
                        ],
                        [
                            "'BatchSpatialTransformer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "_interpolate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "_meshgrid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "_transform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[i] * num_transforms for i in range(num_batch)]",
                            "ListComp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_63": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "floor_80": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_82": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_101": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_124": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_127": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_140": {
                "input": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_155": {
                "values": {
                    "value": "[num_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_156": {
                "values": {
                    "value": "[num_batch, 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_170": {
                "values": {
                    "value": "[num_batch, out_height, out_width, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_51": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_126": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_73": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_124": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_125": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_127": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_51": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "idas/models/layers/spectral_norm.py": {
        "tensorflow": {
            "reshape_56": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_72": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_73": {
                "variable": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_67": {
                "variable": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(u_hat, tf.transpose(w))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_70": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(v_hat, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_75": {
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_77": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_66": {
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_144": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "filter": {
                    "value": "spectral_norm(w, self.iteration)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_142": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "idas/optimization/learning_rate.py": {
        "tensorflow": {
            "convert_to_tensor_123": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(learning_rate, name='learning_rate')",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_125": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.cast(global_step, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "learning_rate.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_126": {
                "variable": {
                    "value": "step_size",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "step_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.cast(step_size, dtype)",
                            "Call"
                        ],
                        [
                            "20.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "learning_rate.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_121": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_132": {
                "variable": {
                    "value": "double_step",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "step_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.cast(step_size, dtype)",
                            "Call"
                        ],
                        [
                            "20.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "divide_133": {
                "variable": {
                    "value": "global_div_double_step",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.cast(global_step, dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "double_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.multiply(2.0, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_134": {
                "variable": {
                    "value": "cycle",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.add(1.0, global_div_double_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_137": {
                "variable": {
                    "value": "double_cycle",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "cycle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.floor(math_ops.add(1.0, global_div_double_step))",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_138": {
                "variable": {
                    "value": "global_div_step",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.cast(global_step, dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "step_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.cast(step_size, dtype)",
                            "Call"
                        ],
                        [
                            "20.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "subtract_139": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "global_div_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.divide(global_step, step_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "double_cycle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.multiply(2.0, cycle)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_140": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.add(1.0, tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_143": {
                "variable": {
                    "value": "a1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.subtract(1.0, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_144": {
                "variable": {
                    "value": "a2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "max_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(learning_rate, name='learning_rate')",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_145": {
                "variable": {
                    "value": "clr",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.maximum(0.0, math_ops.subtract(1.0, x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.subtract(max_lr, learning_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_148": {
                "variable": {
                    "value": "clr",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "clr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.multiply(a1, a2)",
                            "Call"
                        ],
                        [
                            "math_ops.divide(clr, math_ops.cast(math_ops.pow(2, math_ops.cast(cycle - 1, tf.int32)), tf.float32))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(math_ops.pow(gamma, global_step), clr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "math_ops.cast(math_ops.pow(2, math_ops.cast(cycle - 1, tf.int32)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_151": {
                "variable": {
                    "value": "clr",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.pow(gamma, global_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "clr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.multiply(a1, a2)",
                            "Call"
                        ],
                        [
                            "math_ops.divide(clr, math_ops.cast(math_ops.pow(2, math_ops.cast(cycle - 1, tf.int32)), tf.float32))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(math_ops.pow(gamma, global_step), clr)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_152": {
                "x": {
                    "value": "clr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.multiply(a1, a2)",
                            "Call"
                        ],
                        [
                            "math_ops.divide(clr, math_ops.cast(math_ops.pow(2, math_ops.cast(cycle - 1, tf.int32)), tf.float32))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(math_ops.pow(gamma, global_step), clr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(learning_rate, name='learning_rate')",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "executing_eagerly_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_134": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "global_div_double_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.divide(global_step, double_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_140": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.subtract(global_div_step, double_cycle)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_143": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.abs(math_ops.add(1.0, tmp))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_148": {
                "x": {
                    "value": "cycle - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_151": {
                "x": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.99994",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math_ops.cast(global_step, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_148": {
                "x": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.cast(cycle - 1, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "idas/utils/tf_utils.py": {
        "tensorflow": {
            "unstack_35": {
                "variable": {
                    "value": "dynamic_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, dims_prod)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "dims_prod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_128": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_147": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_78": {
                "indices": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "palette",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "palette",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([bgd_color[background], [31, 120, 180], [215, 25, 29], [252, 174, 97], [172, 218, 233], [255, 127, 0], [51, 160, 44], [177, 89, 40], [166, 206, 227], [178, 223, 138], [251, 154, 153], [253, 191, 111], [106, 61, 154]], np.uint8)",
                            "Call"
                        ],
                        [
                            "tf.constant(palette, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_107": {
                "variable": {
                    "value": "class_indexes",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "class_indexes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_indexes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(incoming, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_indexes, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_110": {
                "variable": {
                    "value": "color_image",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "palette",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([bgd_color[background], [31, 120, 180], [215, 25, 29], [252, 174, 97], [172, 218, 233], [255, 127, 0], [51, 160, 44], [177, 89, 40], [166, 206, 227], [178, 223, 138], [251, 154, 153], [253, 191, 111], [106, 61, 154]], np.uint8)",
                            "Call"
                        ],
                        [
                            "tf.constant(palette, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "class_indexes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(incoming, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_indexes, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "color_image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "color_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(palette, class_indexes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(color_image, [-1, W, H, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(color_image, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, W, H, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_113": {
                "variable": {
                    "value": "color_image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "color_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(palette, class_indexes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(color_image, [-1, W, H, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(color_image, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, dims_prod)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_104": {
                "name": {
                    "value": "from_one_hot_to_rgb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_prod_70": {
                "input_tensor": {
                    "value": "[shape[d] for d in dims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "idas/utils/utils.py": {
        "tensorflow": {}
    },
    "test_on_acdc_test_set.py": {
        "tensorflow": {
            "set_verbosity_16": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_216": {
                "variable": {
                    "value": "configs",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_223": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_225": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.dirname(model.checkpoint_dir + '/checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_219": {
                "config": {
                    "value": "configs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "set_random_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_21": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_25": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}